name: Create new release from tip of branch

on:
  workflow_dispatch:
    # inputs:
    #   reason:
    #     description: "Reason for manual run"
    #     required: true
    #     default: "Just because"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CPU_ARCHITECTURE: "overwritten-below"
  NEW_VERSION_TAG: "overwritten-below"
  IMAGE_TAGS: "overwritten-below"

jobs:
  tag-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history so we can see all tags
          path: dotyoucore

      - name: Execute versioning script
        working-directory: dotyoucore
        run: |
          output=$(./.github/scripts/increment-version-tag-on-git-tip.sh)
          echo "Tagging output: $output"
          echo "NEW_VERSION_TAG=${output}" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          registry-url: "https://npm.pkg.github.com"
          # Defaults to the user or organization that owns the workflow file
          scope: "@octocat"

      - name: Checkout dotyoucorejs monorepo
        uses: actions/checkout@v3
        with:
          repository: YouFoundation/dotyoucore-js
          token: ${{ secrets.DOTYOUCORE_LIB_TOKEN }} # `GH_PAT` is a secret that contains your PAT
          path: client/apps

      - name: Checkout provisioning-app
        uses: actions/checkout@v3
        with:
          repository: YouFoundation/provisioning-app
          token: ${{ secrets.DOTYOUCORE_LIB_TOKEN }} # `GH_PAT` is a secret that contains your PAT
          path: client/provisioning-app

      - name: Authenticate to Github packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > client/provisioning-app/.npmrc

      - name: Build libs & setup .env
        working-directory: ./client/apps
        run: |
          npm ci
          npm run build-libs
          touch packages/public-app/.env
          echo VITE_VERSION=$(date +%s) >> packages/public-app/.env
          touch packages/owner-app/.env
          echo VITE_VERSION=$(date +%s) >> packages/owner-app/.env

      - name: Build owner-app
        working-directory: ./client/apps
        run: |
          npm run build -w ./packages/owner-app
          rm -rf ../../dotyoucore/services/Odin.Hosting/client/owner-app
          mv packages/owner-app/dist ../../dotyoucore/services/Odin.Hosting/client/owner-app

      - name: Build public-app
        working-directory: ./client/apps
        run: |

          npm run build -w ./packages/public-app
          rm -rf ../../dotyoucore/services/Odin.Hosting/client/public-app
          mv packages/public-app/dist ../../dotyoucore/services/Odin.Hosting/client/public-app

      - name: Build provisioning-app
        working-directory: ./client/provisioning-app
        run: |
          npm ci
          touch .env
          echo VITE_VERSION=$(date +%s) >> .env
          npm run build
          rm -rf ../../dotyoucore/services/Odin.Hosting/client/provisioning-app
          mv dist ../../dotyoucore/services/Odin.Hosting/client/provisioning-app

      #
      # Build Docker image
      #
      - name: Get CPU architecture
        working-directory: dotyoucore
        run: |
          output=$(./.github/scripts/get-cpu-architecture.sh)
          echo "Silocon is: $output"
          echo "CPU_ARCHITECTURE=${output}" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Combine Docker tags
        run: |
          lowercase_image_tags=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEW_VERSION_TAG }}-${{ env.CPU_ARCHITECTURE }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_TAGS=$lowercase_image_tags" >> $GITHUB_ENV

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./dotyoucore
      #     file: ./dotyoucore/Docker/Dockerfile-identity-host
      #     push: true
      #     tags: ${{ env.IMAGE_TAGS }}
      #     labels: ${{ steps.meta.outputs.labels }}
