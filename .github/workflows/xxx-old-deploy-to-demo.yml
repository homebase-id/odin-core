name: Bleeding Edge Docker

on:
  workflow_dispatch:
  push:
    branches: [odin-admin-cli]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          registry-url: "https://npm.pkg.github.com"
          # Defaults to the user or organization that owns the workflow file
          scope: "@octocat"

      - name: Checkout dotyoucore
        uses: actions/checkout@v3
        with:
          path: dotyoucore

      # - name: Checkout dotyoucorejs monorepo
      #   uses: actions/checkout@v3
      #   with:
      #     repository: YouFoundation/dotyoucore-js
      #     token: ${{ secrets.DOTYOUCORE_LIB_TOKEN }} # `GH_PAT` is a secret that contains your PAT
      #     path: client/apps

      # - name: Checkout provisioning-app
      #   uses: actions/checkout@v3
      #   with:
      #     repository: YouFoundation/provisioning-app
      #     token: ${{ secrets.DOTYOUCORE_LIB_TOKEN }} # `GH_PAT` is a secret that contains your PAT
      #     path: client/provisioning-app

      # - name: Authenticate to Github packages
      #   run: |
      #     echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > client/provisioning-app/.npmrc

      # - name: Build libs & setup .env
      #   working-directory: ./client/apps
      #   run: |
      #     npm ci
      #     npm run build-libs
      #     touch packages/public-app/.env
      #     echo VITE_VERSION=$(date +%s) >> packages/public-app/.env
      #     touch packages/owner-app/.env
      #     echo VITE_VERSION=$(date +%s) >> packages/owner-app/.env

      # - name: Build owner-app
      #   working-directory: ./client/apps
      #   run: |
      #     npm run build -w ./packages/owner-app
      #     rm -rf ../../dotyoucore/services/Odin.Hosting/client/owner-app
      #     mv packages/owner-app/dist ../../dotyoucore/services/Odin.Hosting/client/owner-app

      # - name: Build public-app
      #   working-directory: ./client/apps
      #   run: |

      #     npm run build -w ./packages/public-app
      #     rm -rf ../../dotyoucore/services/Odin.Hosting/client/public-app
      #     mv packages/public-app/dist ../../dotyoucore/services/Odin.Hosting/client/public-app

      # - name: Build provisioning-app
      #   working-directory: ./client/provisioning-app
      #   run: |
      #     npm ci
      #     touch .env
      #     echo VITE_VERSION=$(date +%s) >> .env
      #     npm run build
      #     rm -rf ../../dotyoucore/services/Odin.Hosting/client/provisioning-app
      #     mv dist ../../dotyoucore/services/Odin.Hosting/client/provisioning-app

      #
      # Build Docker image
      #
      - name: Get CPU architecture
        working-directory: dotyoucore
        run: |
          output=$(./.github/scripts/get-cpu-architecture.sh)
          echo "Silocon is: $output"
          echo "CPU_ARCHITECTURE=${output}" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./dotyoucore
      #     file: ./dotyoucore/Docker/Dockerfile-identity-host
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}

      # #
      # # Deploy
      # #
      # - name: Get the branch name
      #   run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      # - name: Create image deploy name
      #   run: |
      #     lowercase_deploy_image=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}" | tr '[:upper:]' '[:lower:]')
      #     echo "DEPLOY_IMAGE=$lowercase_deploy_image" >> $GITHUB_ENV

      # - name: Output DEPLOY_IMAGE
      #   run: |
      #     echo "Deploying: ${{ env.DEPLOY_IMAGE }}"

      # - name: Deploy to bleeding edge host using Ansible
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.ANSIBLE_HOST }}
      #     username: ${{ secrets.ANSIBLE_USERNAME }}
      #     key: ${{ secrets.ANSIBLE_SSH_KEY }}
      #     script: cd $HOME/DevOps/ansible && ansible-playbook deploy-identity-hosts.yml --limit sandbox -e "identity_host_docker_image=${{ env.DEPLOY_IMAGE }}"
