name: Deploy latest release to production

on:
  workflow_dispatch:
    # inputs:
    #   reason:
    #     description: "Reason for manual run"
    #     required: true
    #     default: "Just because"

env:
  REGISTRY: ghcr.io
  ARCHITECTURE: x64

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Setup environment variables
        run: echo "REPO=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get lastest image version tag
        run: |
          set -ex
          USERNAME=${{ github.actor }}
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          registry_token=$(curl -u $USERNAME:$TOKEN -s https://${{ env.REGISTRY }}/token\?scope\="repository:${{ env.REPO }}:pull" | jq -r .token)
          echo "registry_token: $registry_token"
          latest_version_tag=$(curl -s -H "Authorization: Bearer $registry_token" "https://${{ env.REGISTRY }}/v2/${{ env.REPO }}/tags/list" | jq -r '.tags[]' | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1)
          echo "latest_version_tag: $latest_version_tag"
          echo "LATEST_VERSION_TAG=$latest_version_tag" >> $GITHUB_ENV

      - name: Get deployable image name
        run: |
          set -ex
          if [[ -z "${{ env.LATEST_VERSION_TAG }}" ]]; then
            echo "Error: env.LATEST_VERSION_TAG is empty"
            exit 1
          fi
          image_name_with_tag="${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.LATEST_VERSION_TAG }}"
          echo "image_name_with_tag: $image_name_with_tag"
          echo "IMAGE_NAME_WITH_TAG=$image_name_with_tag" >> $GITHUB_ENV

      - name: Check IMAGE_NAME_WITH_TAG
        run: |
          set -ex
          if [[ -z "${{ env.IMAGE_NAME_WITH_TAG }}" ]]; then
            echo "Error: env.IMAGE_NAME_WITH_TAG is empty"
            exit 1
          fi
          echo "Deploying: ${{ env.IMAGE_NAME_WITH_TAG }}"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ANSIBLE_HOST }}
          username: ${{ secrets.ANSIBLE_USERNAME }}
          key: ${{ secrets.ANSIBLE_SSH_KEY }}
          script: cd $HOME/DevOps/ansible && ansible-playbook deploy-identity-hosts.yml --limit sandbox --extra-vars "identity_host_docker_image=${{ env.IMAGE_NAME_WITH_TAG }}"
