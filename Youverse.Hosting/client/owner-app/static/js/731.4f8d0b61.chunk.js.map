{"version":3,"file":"static/js/731.4f8d0b61.chunk.js","mappings":"6QA2IA,IA/HiC,SAAC,GAoB3B,IAnBLA,EAmBI,EAnBJA,MACAC,EAkBI,EAlBJA,YAEAC,EAgBI,EAhBJA,eAEAC,EAcI,EAdJA,OAEAC,EAYI,EAZJA,UACAC,EAWI,EAXJA,SAYMC,GAASC,EAAAA,EAAAA,GAAU,mBAEzB,GAAoEC,EAAAA,EAAAA,GAClE,CAAC,GACDC,cAFmBC,EAArB,EAAQC,YAAoCC,EAA5C,EAAoCC,OAGtBC,GAAYC,EAAAA,EAAAA,KAAaC,MAA/BC,KAER,GAAwBC,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAsCF,EAAAA,EAAAA,UAAiB,MAAvD,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAwCJ,EAAAA,EAAAA,UAAmB,IAA3D,eAAOK,EAAP,KAAqBC,EAArB,KAEA,IAAKrB,EACH,OAAO,KAGT,IAAMsB,GACJ,SAAC,IAAD,CAAezB,MAAOA,EAAO0B,QAASrB,EAAtC,UACE,+BACE,kBACEsB,SAAQ,yCAAE,WAAOC,GAAP,6EACRA,EAAEC,iBADM,SAEFnB,EAAc,CAClBR,eAAgBA,EAChBiB,KAAMA,EACNE,YAAaA,EACbS,UAAWP,IANL,OASRnB,IATQ,2CAAF,sDADV,WAaE,gBAAK2B,UAAU,OAAf,mBAA0B7B,EAA1B,aAA4C8B,EAAAA,EAAAA,GAC1C,yCAGF,gBAAID,UAAU,eAAd,WAA8BC,EAAAA,EAAAA,GAAE,8BAAhC,QACA,iBAAKD,UAAU,OAAf,WACE,kBAAOE,QAAQ,WAAf,oBACA,SAAC,IAAD,CACEC,GAAG,OACHf,KAAK,OACLgB,UAAQ,EACRC,SAAU,SAACR,GACT,IAAMS,EAAQT,EAAEtB,OAAOgC,MAAMD,MAAM,KACnCjB,EAAQ,CAAEmB,UAAWF,EAAM,GAAIG,QAASH,EAAM,IAC/C,QAGL,iBAAKN,UAAU,OAAf,WACE,kBAAOE,QAAQ,WAAf,oBACA,SAAC,IAAD,CACEC,GAAG,OACHf,KAAK,OACLiB,SAAU,SAACR,GACTa,QAAQC,IAAId,EAAEtB,OAAOgC,YAASK,GAC9BrB,EAAeM,EAAEtB,OAAOgC,YAASK,EAClC,OAGJ7B,EAAQ8B,QACP,iCACE,gBAAIb,UAAU,eAAd,WAA8BC,EAAAA,EAAAA,GAAE,wCAAhC,OAEClB,EAAQ+B,KAAI,SAACC,EAAQC,GAAW,IAAD,EAC9B,OACE,SAAC,IAAD,CACEC,UAAWF,EAEXf,UAAS,4CACPR,EAAa0B,MAAK,SAACC,GAAD,OAAiBA,IAAgBJ,EAAOZ,EAAxC,IACd,yEACA,IAENiB,QAAS,WACP,IAAMC,GAAe,OAAO7B,GACvB6B,EAAgBH,MAAK,SAACC,GAAD,OAAiBA,IAAgBJ,EAAOZ,EAAxC,IAIxBV,EACE4B,EAAgBC,QAAO,SAACC,GAAD,OAAcA,IAAaR,EAAOZ,EAAlC,MAJzBkB,EAAgBG,KAAKT,EAAOZ,IAC5BV,EAAgB4B,GAMnB,GAlBH,UAEON,EAAOZ,UAFd,QAEoBa,EAmBvB,OAED,MAEJ,iBAAKhB,UAAU,kCAAf,WACE,SAAC,IAAD,CAAcA,UAAU,MAAMyB,KAAM,OAAQC,MAAO7C,EAAnD,gBACGX,QADH,IACGA,EAAAA,GAAe+B,EAAAA,EAAAA,GAAE,aAEpB,SAAC,IAAD,CAAcD,UAAU,MAAM2B,KAAK,YAAYP,QAAS9C,EAAxD,UACG2B,EAAAA,EAAAA,GAAE,sBAQf,OAAO2B,EAAAA,EAAAA,cAAalC,EAAQnB,EAC7B,C,qFCjGD,IA/BqB,SACnBsD,GAEA,OAAmEC,EAAAA,EAAAA,GAAqB,CACtFC,UAAWC,EAAAA,EAAAA,kBAAAA,WACXL,KAAMM,EAAAA,GAAAA,KAAAA,OACLC,cAHWC,EAAd,EAAQjD,KAAiCkD,EAAzC,EAA8BC,UAK9B,OACE,UAAC,KAAD,kBAAYR,GAAZ,eACE,qCAAY5B,EAAAA,EAAAA,GAAE,iBAAd,SACCmC,IAAyB,2CAF5B,OAGGD,QAHH,IAGGA,OAHH,EAGGA,EACGb,QAAO,SAACgB,GAAD,YAAwB1B,IAAd0B,EAAKpD,IAAf,IACR4B,KAAI,SAACwB,GACJ,IAAMC,EAAQ,UAAMD,EAAKpD,KAAKsD,EAAAA,GAAAA,aAAhB,YACZF,EAAKpD,KAAKsD,EAAAA,GAAAA,YAEZ,OACE,oBAAQjC,MAAOgC,EAAf,oBACMD,EAAKpD,KAAKsD,EAAAA,GAAAA,aADhB,YAEIF,EAAKpD,KAAKsD,EAAAA,GAAAA,YACR,IAHN,IAIIC,OAAOC,SAASC,SAJpB,MAA8BJ,EAOjC,OAGR,C,qFCJD,IAzBsB,SACpBV,GAEA,OAAqEC,EAAAA,EAAAA,GAAqB,CACxFC,UAAWC,EAAAA,EAAAA,kBAAAA,WACXL,KAAMM,EAAAA,GAAAA,MAAAA,OACLC,cAHWU,EAAd,EAAQ1D,KAAkC2D,EAA1C,EAA+BR,UAK/B,OACE,UAAC,KAAD,kBAAYR,GAAZ,eACE,oBAAQtB,MAAO,GAAf,iBAAuBN,EAAAA,EAAAA,GAAE,kBAAzB,SACC4C,IAA0B,2CAF7B,OAGGD,QAHH,IAGGA,OAHH,EAGGA,EACGtB,QAAO,SAACgB,GAAD,YAAwB1B,IAAd0B,EAAKpD,IAAf,IACR4B,KAAI,SAACwB,GACJ,OACE,mBAAQ/B,MAAO+B,EAAKpD,KAAKsD,EAAAA,GAAAA,mBAAzB,SACGF,EAAKnC,IAD+DmC,EAAKnC,GAI/E,OAGR,C,8CCdD,IAXe,SAAC0B,GACd,OACE,qCACMA,GADN,IAEE7B,UAAS,iRAA4Q6B,EAAM7B,WAF7R,SAIG6B,EAAMiB,WAGZ,C,qFC+DD,IAvE6B,SAAC,GAUvB,IATL7B,EASI,EATJA,UACA8B,EAQI,EARJA,gBACA/C,EAOI,EAPJA,UACAoB,EAMI,EANJA,QAOc4B,GAAYC,EAAAA,EAAAA,GAAU,CAAE1B,SAAQ,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAWd,KAAM+C,aAAzDhE,KAER,IAAK+B,EACH,OAAO,wBAGT,IAAMkC,EAAc,SAAC,GAAD,IAAGL,EAAH,EAAGA,SAAH,OAClB1B,GACE,8BAAG0B,KAEH,SAAC,KAAD,CACEM,GAAE,yBAAoBC,mBAAmBpC,EAAUd,KACnDH,UAAU,0EAFZ,SAIG8C,GARa,EAYpB,OACE,gBACE9C,UAAS,+BAAmBA,QAAnB,IAAmBA,EAAAA,EAAa,GAAhC,YAAsCiB,EAAUqC,UAAY,aAA5D,YACPlC,GAAW,kBAEbA,QAAS,kBAAMA,GAAWA,GAAjB,EAJX,UAME,UAAC+B,EAAD,YACE,SAAC,IAAD,CAASnD,UAAU,+BACnB,iBAAKA,UAAU,qBAAf,WACE,eAAGA,UAAS,uBAAZ,UACGiB,EAAUqC,WAAYrD,EAAAA,EAAAA,GAAE,aAD3B,WAC0CgB,QAD1C,IAC0CA,OAD1C,EAC0CA,EAAW7B,KAClD2D,GAAe,YAASA,OAE3B,mBAAO/C,UAAU,QAAjB,UACGgD,EAAO,UACDA,EAAQnC,OADP,YACoC,IAAnBmC,EAAQnC,QAAeZ,EAAAA,EAAAA,GAAE,WAAYA,EAAAA,EAAAA,GAAE,WADxD,aACsEA,EAAAA,EAAAA,GACxE,YAFE,KAIJ,KACM,OAATgB,QAAS,IAATA,GAAAA,EAAWsC,YAAX,WACMtD,EAAAA,EAAAA,GAAE,aADR,YACwBgB,EAAUsC,YAAY1C,OAD9C,YAEKI,EAAUsC,YAAY1C,QAAU,GAAIZ,EAAAA,EAAAA,GAAE,WAAYA,EAAAA,EAAAA,GAAE,UAEtD,WAGPmB,GACC,SAAC,KAAD,CACEgC,GAAE,yBAAoBC,mBAAmBpC,EAAUd,KACnDH,UAAU,2FAFZ,UAIE,SAAC,IAAD,CAAOA,UAAU,eAGnB,SAAC,IAAD,CAAOA,UAAU,gCAK1B,C,oCCxCD,IAnCgB,SAAC,GAYV,IAXL/B,EAWI,EAXJA,MACA+B,EAUI,EAVJA,UACA8C,EASI,EATJA,SASI,IARJU,WAAAA,OAQI,aAPJC,aAAAA,OAOI,SACJ,OACE,qBACEzD,UAAS,0BACPwD,EACIC,EACE,GACA,sFACF,qCALG,uCAMezD,QANf,IAMeA,EAAAA,EAAa,IAPvC,UASG/B,GACC,gBACE+B,UAAS,kHADX,UAGE,eAAIA,UAAU,2BAAd,SAA0C/B,MAE1C,MACJ,gBAAK+B,UAAU,QAAf,SAAwB8C,MAG7B,C,8ECnCM,IAAMY,EAAoB,SAACC,GAChC,OAAOA,EAAKrD,MAAM,KAAKsD,KAAK,KAAKC,aAClC,EAEYC,EAAY,SAACC,GACxB,OAAOC,OAAOC,KAAKF,GAChBjD,KAAI,SAACoD,GAAD,OAASA,EAAM,IAAMH,EAAIG,EAAzB,IACJN,KAAK,IACT,C,6ECYD,IAhBmB,WACjB,IAAQO,GAAoBC,EAAAA,EAAAA,KAApBD,gBACFE,EAAiBC,EAAAA,EAAAA,YAA2BH,KAE5CI,EAAQ,yCAAG,yGACOF,EAAeG,aADtB,cACTzF,EADS,gCAERA,QAFQ,IAERA,OAFQ,EAERA,EAAS0F,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEpB,SAAW,EAAI,IAAMqB,EAAErB,SAAW,EAAI,EAAnD,KAFN,2CAAH,qDAKd,MAAO,CACLrE,OAAO2F,EAAAA,EAAAA,UAAS,CAAC,YAAY,kBAAML,GAAN,GAAkB,CAC7CM,sBAAsB,IAG3B,C,iGCkKD,IA9KsB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SACjBC,GAAcC,EAAAA,EAAAA,kBAEZb,GAAoBC,EAAAA,EAAAA,KAApBD,gBACFc,EAAwBC,EAAAA,EAAAA,YAAkCf,KAC1DgB,EAA+BC,EAAAA,EAAAA,YAAyCjB,KAExEkB,EAAW,yCAAG,mGAASP,EAAT,EAASA,SAAT,iEAKWG,EAAsBK,kBAAkBR,GALnD,YAKZS,EALY,SAM4C,SAAxCA,EAAezG,OAAO+E,cAN1B,yCAOT0B,GAPS,wBAUWJ,EAA6BK,kBAAkBV,GAV1D,aAUZW,EAVY,kDAYTA,GAZS,yBAeQN,EAA6BO,eAAeZ,GAfpD,eAeZa,EAfY,gCAgBXA,QAhBW,IAgBXA,EAAAA,EAAeJ,GAhBJ,4CAAH,sDAmBXK,EAAU,yCAAG,iGAASC,EAAT,EAASA,mBAAT,SACJZ,EAAsBa,sBAAtB,OAA4CD,QAA5C,IAA4CA,EAAAA,EAAsBf,GAD9D,mFAAH,sDAIViB,EAAqB,yCAAG,yGAC5BC,EAD4B,EAC5BA,eACAC,EAF4B,EAE5BA,QACA7G,EAH4B,EAG5BA,KACAE,EAJ4B,EAI5BA,YACAS,EAL4B,EAK5BA,UAL4B,SAatBoF,EAA6Be,YACjCF,EACAC,EACA7G,EACAE,EACAS,GAlB0B,gCAoBrB,CAAEiG,eAAAA,IApBmB,2CAAH,sDAuBrBG,EAAuB,yCAAG,iGAASH,EAAT,EAASA,eAAT,SACjBb,EAA6BiB,kBAAkBJ,GAD9B,mFAAH,sDAIvBtH,EAAa,yCAAG,uGACpBP,EADoB,EACpBA,eACAiB,EAFoB,EAEpBA,KACAE,EAHoB,EAGpBA,YACAS,EAJoB,EAIpBA,UAJoB,SAWdoF,EAA6BkB,wBACjClI,EACAiB,EACAE,EACAS,GAfkB,gCAiBb,CAAE5B,eAAAA,IAjBW,2CAAH,sDAoBbmI,EAAa,yCAAG,iGAASnI,EAAT,EAASA,eAAT,SACPgH,EAA6BoB,qBAAqBpI,GAD3C,mFAAH,sDAInB,MAAO,CACLc,OAAO2F,EAAAA,EAAAA,UAAS,CAAC,iBAAkBE,IAAW,kBAAMO,EAAY,CAAEP,SAAAA,GAApB,GAAiC,CAC7ED,sBAAsB,IAGxBe,YAAYY,EAAAA,EAAAA,aAAYZ,EAAY,CAClCa,UAAW,SAACvH,EAAMwH,GAChB3B,EAAY4B,kBAAkB,CAAC,sBAC/B5B,EAAY4B,kBAAkB,CAAC,iBAAkBD,GAClD,EACDE,QAAS,SAACC,GACRnG,QAAQoG,MAAMD,EACf,IAGHd,uBAAuBS,EAAAA,EAAAA,aAAYT,EAAuB,CACxDgB,SAAS,WAAD,8BAAE,WAAOC,GAAP,8FACFjC,EAAYkC,cAAc,CAAC,iBADzB,cAGFC,EAAwCnC,EAAYoC,aAAa,CAAC,iBAClEC,EAJE,CAKN,CACEtI,OAAQ,OACRuI,UAAWL,EAAWhB,iBAPlB,eASHkB,IAGLnC,EAAYuC,aAAa,CAAC,gBAAiBF,GAZnC,kBAcD,CAAEF,iBAAAA,EAAkBF,WAAAA,IAdnB,2CAAF,mDAAC,GAgBTJ,QAAS,SAACW,EAAKC,EAASC,GACtB/G,QAAQoG,MAAMS,GAEdxC,EAAYuC,aAAa,CAAC,gBAAiBG,EAAQP,iBACpD,EACDQ,UAAW,SAACxI,GACV6F,EAAY4B,kBAAkB,CAAC,iBAC/B5B,EAAY4B,kBAAkB,CAAC,iBAAkBzH,EAAK8G,gBACvD,IAEHG,yBAAyBK,EAAAA,EAAAA,aAAYL,EAAyB,CAC5DM,UAAW,SAACvH,EAAMwH,GAChB3B,EAAY4B,kBAAkB,CAAC,iBAC/B5B,EAAY4B,kBAAkB,CAAC,iBAAkBD,EAAMV,gBACxD,EACDY,QAAS,SAACC,GACRnG,QAAQoG,MAAMD,EACf,IAEHnI,eAAe8H,EAAAA,EAAAA,aAAY9H,EAAe,CACxCqI,SAAS,WAAD,8BAAE,WAAOC,GAAP,8FACFjC,EAAYkC,cAAc,CAAC,sBADzB,cAGFU,EAA2C5C,EAAYoC,aAAa,CACxE,sBAEIS,EANE,CAON,CACE9I,OAAQ,UACRgG,SAAUkC,EAAW7I,iBATjB,eAWHwJ,IAGL5C,EAAYuC,aAAa,CAAC,qBAAsBM,GAdxC,kBAgBD,CAAED,oBAAAA,EAAqBX,WAAAA,IAhBtB,2CAAF,mDAAC,GAkBTJ,QAAS,SAACW,EAAKC,EAASC,GACtB/G,QAAQoG,MAAMS,GAEdxC,EAAYuC,aAAa,CAAC,qBAAsBG,EAAQE,oBACzD,EACDD,UAAW,SAACxI,GACV6F,EAAY4B,kBAAkB,CAAC,uBAC/B5B,EAAY4B,kBAAkB,CAAC,sBAC/B5B,EAAY4B,kBAAkB,CAAC,iBAAkBzH,EAAKf,gBACvD,IAEHmI,eAAeE,EAAAA,EAAAA,aAAYF,EAAe,CACxCG,UAAW,SAACvH,EAAMwH,GAChB3B,EAAY4B,kBAAkB,CAAC,uBAC/B5B,EAAY4B,kBAAkB,CAAC,iBAAkBD,EAAMvI,gBACxD,EACDyI,QAAS,SAACC,GACRnG,QAAQoG,MAAMD,EACf,IAGN,C,4EC3JD,IAnB6B,SAAC,GAA8D,IAA5D9E,EAA2D,EAA3DA,UAAWJ,EAAgD,EAAhDA,KACjCwC,GAAoBC,EAAAA,EAAAA,KAApBD,gBACF0D,EAAS,IAAIC,EAAAA,GAAO,CAAEC,IAAKC,EAAAA,GAAAA,MAAeC,aAAc9D,MAExDjC,EAAa,yCAAG,mGAASH,EAAT,EAASA,UAAWJ,EAApB,EAAoBA,KAApB,SACNkG,EAAOK,oBAAoBC,qBAAqBpG,OAAWnB,EAAWe,GADhE,uCAEjByG,UAFiB,2CAAH,sDAInB,MAAO,CACLlG,eAAe0C,EAAAA,EAAAA,UACb,CAAC,oBAAqB7C,EAAWJ,IACjC,kBAAMO,EAAc,CAAEH,UAAAA,EAAWJ,KAAAA,GAAjC,GACA,CACEkD,sBAAsB,IAI7B,C,yKCfYK,EAAb,0CAIE,WAAY+C,GAAuC,IAAD,EAChD,IADgD,gBAC3CA,EACH,KAAM,4BAFwC,OAIhD,cAAMA,IANAI,KAAO,uBAEmC,CAKjD,CATH,qFAWE,WAAoBvD,GAApB,uFACQ+C,GADR,iEAEQS,EAAMC,KAAKF,KAAO,SAElBnJ,EAAwB,CAAE4F,SAAUA,GAJ5C,kBAKS+C,EACJW,KAAKF,EAAKpJ,GACVuJ,MAAK,SAACC,GACL,OAAOA,EAASxJ,IACjB,IACAyJ,OALI,0DALT,gDAXF,mIAwBE,WAA4B7D,GAA5B,uFACQ+C,GADR,iEAEQS,EAAMC,KAAKF,KAAO,cAClBnJ,EAAwB,CAAE4F,SAAUA,GAH5C,kBAIS+C,EACJW,KAAKF,EAAKpJ,GACVuJ,MAAK,SAACC,GACL,OAAOA,EAASxJ,IACjB,IACAyJ,OALI,0DAJT,gDAxBF,4HAoCE,WAAqBzJ,GAArB,qFACQ2I,GADR,iEAEQS,EAAMC,KAAKF,KAAO,eAAgBvE,EAAAA,EAAAA,GAAU5E,GAFpD,kBAGS2I,EAAOW,KAAiCF,EAAKpJ,GAAMuJ,MAAK,SAACC,GAC9D,OAAOA,EAASxJ,IAsBjB,KA1BH,gDApCF,mIAiEE,WAA4B0J,GAA5B,qFACQf,GADR,iEAEQS,EAAMC,KAAKF,KAAO,aAAcvE,EAAAA,EAAAA,GAAU8E,GAFlD,kBAGSf,EACJgB,IAAIP,GACJG,MAAK,SAACC,GACL,OAAOA,EAASxJ,IACjB,IACAyJ,OALI,0DAHT,gDAjEF,sFA4EE,SAAkB7D,GAChB,IAAM+C,GAAM,iEACNS,EAAMC,KAAKF,KAAO,UAElBnJ,EAAwB,CAAE4F,SAAUA,GAC1C,OAAO+C,EACJW,KAAKF,EAAKpJ,GACVuJ,MAAK,SAACC,GAAc,IAAD,IAClB,OAAO,kBAAKA,EAASxJ,MAArB,IAA2BJ,OAAM,UAAE4J,EAASxJ,YAAX,iBAAE,EAAeJ,cAAjB,aAAE,EAAuB+E,eAC3D,IACA8E,OALI,wDAMR,IAvFH,0BAwFE,SAA0BV,GAKxB,OAJK/C,EAAsB4D,WACzB5D,EAAsB4D,SAAW,IAAI5D,EAAsB+C,IAGtD/C,EAAsB4D,QAC9B,KA9FH,GAA2CC,EAAAA,GAA9B7D,EACI4D,cAAAA,C,mLCYJ1D,EAAb,0CAOE,WAAY6C,GAAuC,IAAD,EAChD,IADgD,gBAC3CA,EACH,KAAM,4BAFwC,OAIhD,cAAMA,IARAe,KAAO,oBAImC,EAH1CC,aAAuB,EAAKD,KAAO,QAGO,EAF1CE,gBAA0B,EAAKF,KAAO,WAEI,CAKjD,CAZH,0FAcE,WAAyBJ,GAAzB,4FACQf,GADR,iEAEQS,EAAMC,KAAKW,gBAAkB,UAAWpF,EAAAA,EAAAA,GAAU8E,GAF1D,kBAISf,EACJgB,IAAoCP,GACpCG,MAAK,SAACC,GACL,OAAOA,EAASxJ,IAqBjB,IACAyJ,OAAM,YACL,oDAED,KAhCL,gDAdF,+HAiDE,WAAwB7D,GAAxB,uFACQ+C,GADR,iEAEQS,EAAMC,KAAKW,gBAAkB,UAG7BhK,EAAwB,CAAE4F,SAAUA,GAL5C,kBAMS+C,EACJW,KAAKF,EAAKpJ,GACVuJ,MAAK,SAACC,GACL,OAAO,kBAAKA,EAASxJ,MAArB,IAA2BJ,OAAQ,WACpC,IACA6J,OAAM,WAEN,KAbL,gDAjDF,6HAiEE,WAAsBC,GAAtB,qFACQf,GADR,iEAEQS,EAAMC,KAAKU,aAAe,UAAWnF,EAAAA,EAAAA,GAAU8E,GAFvD,kBAISf,EACJgB,IAAIP,GACJG,MAAK,SAACC,GACL,OAAOA,EAASxJ,IACjB,IACAyJ,OALI,0DAJT,gDAjEF,4HA6EE,WAAqB7D,GAArB,8FACQ+C,GADR,iEAEQS,EAAMC,KAAKU,aAAe,UAG1B/J,EAAwB,CAAE4F,SAAUA,GAL5C,kBAOS+C,EACJW,KAAKF,EAAKpJ,GACVuJ,MAAK,SAACC,GACL,OAAO,kBAAKA,EAASxJ,MAArB,IAA2BJ,OAAQ,QACpC,IACA6J,OAAM,SAACpB,GACN,GAA4B,MAAxBA,EAAImB,SAAS5J,OACf,OAAO,MAET,4DAA0ByI,EAC3B,KAjBL,gDA7EF,qIAiGE,WACEzC,EACA1F,EACAE,EACAS,GAJF,uFAMQ8H,GANR,iEAOQS,EAAMC,KAAKW,gBAAkB,WAE7BC,EAA8B,CAClCC,OAAQtE,EACR/E,UAAWA,EACXsJ,YAAa,KACbC,aAAY,UAAMlK,KAGhBE,EAhBN,uBAiBUiK,EAAa,IAAIC,EAAAA,GAAW,CAChCzB,IAAKC,EAAAA,GAAAA,MACLC,aAAcM,KAAKpE,oBAnBzB,SAsB4BoF,EAAWE,cAAcC,uBAC/CC,EAAAA,EAAAA,IAA4B3H,EAAAA,EAAAA,kBAAAA,YAC5B1C,GAxBN,QAsBUsK,EAtBV,UA4BMT,EAAOG,YAAYO,OAAnB,kBACKD,GADL,IAEEE,QAASC,EAAAA,GAAAA,mBAA4B,IAAIC,WAAWJ,EAAUE,aA9BtE,gCAmCSjC,EACJW,KAAKF,EAAKa,GACVV,MAAK,SAACC,GACL,OAAOA,EAASxJ,IACjB,IACAyJ,OALI,0DAnCT,iDAjGF,wIA4IE,WAA2B7D,GAA3B,uFACQ+C,GADR,iEAEQS,EAAMC,KAAKW,gBAAkB,UAG7BhK,EAAwB,CAAE4F,SAAUA,GAL5C,kBAOS+C,EACJW,KAAKF,EAAKpJ,GACVuJ,MAAK,SAACC,GACL,OAAOA,EAASxJ,IACjB,IACAyJ,OALI,0DAPT,gDA5IF,+HA2JE,WAAwB7D,GAAxB,uFACQ+C,GADR,iEAEQS,EAAMC,KAAKU,aAAe,UAE1B/J,EAAwB,CAAE4F,SAAUA,GAJ5C,kBAMS+C,EACJW,KAAKF,EAAKpJ,GACVuJ,MAAK,SAACC,GACL,OAAOA,EAASxJ,IACjB,IACAyJ,OALI,0DANT,gDA3JF,yHAyKE,WACE7D,EACAmB,EACA7G,EACAE,EACAS,GALF,uFAOQuI,EAAMC,KAAKS,KAAO,eAClB9J,EAAgC,CACpCmI,UAAWvC,EACXmB,QAASA,EACTqD,aAAY,UAAMlK,GAClBW,UAAWA,IAGTT,EAfN,uBAgBUiK,EAAa,IAAIC,EAAAA,GAAW,CAChCzB,IAAKC,EAAAA,GAAAA,MACLC,aAAcM,KAAKpE,oBAlBzB,SAqB4BoF,EAAWE,cAAcC,uBAC/CC,EAAAA,EAAAA,IAA4B3H,EAAAA,EAAAA,kBAAAA,YAC5B1C,GAvBN,QAqBUsK,EArBV,UA2BM1K,EAAKoK,YAAYO,OAAjB,kBACKD,GADL,IAEEE,QAASC,EAAAA,GAAAA,mBAA4B,IAAIC,WAAWJ,EAAUE,aA7BtE,cAkCQjC,GAlCR,mFAmCSA,EACJW,KAAKF,EAAKpJ,GACVuJ,MAAK,SAACC,GACL,OAAOA,EAASxJ,IACjB,IACAyJ,OALI,0DAnCT,iDAzKF,0FAoNE,SAA0BV,GAKxB,OAJK7C,EAA6B0D,WAChC1D,EAA6B0D,SAAW,IAAI1D,EAA6B6C,IAGpE7C,EAA6B0D,QACrC,KA1NH,GAAkDC,EAAAA,GAArC3D,EACI0D,cAAAA,C","sources":["components/Dialog/ConnectionDialogs/IncomingConnectionDialog.tsx","components/Form/NameSelector.tsx","components/Form/PhotoSelector.tsx","components/Form/Select.tsx","components/PermissionViews/CirclePermissionView/CirclePermissionView.tsx","components/Sections/Section.tsx","helpers/common.ts","hooks/circles/useCircles.ts","hooks/connection/useConnection.ts","hooks/profiles/useAttributeVersions.ts","provider/connections/CircleNetworkProvider.ts","provider/connections/CircleNetworkRequestProvider.ts"],"sourcesContent":["import { ReactNode, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport ActionButton from '../../Buttons/ActionButton';\nimport NameSelector from '../../Form/NameSelector';\nimport PhotoSelector from '../../Form/PhotoSelector';\nimport CirclePermissionView from '../../PermissionViews/CirclePermissionView/CirclePermissionView';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst IncomingConnectionDialog = ({\n  title,\n  confirmText,\n\n  senderDotYouId,\n\n  isOpen,\n\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  senderDotYouId: string;\n\n  isOpen: boolean;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  const { mutateAsync: acceptPending, status: acceptPendingStatus } = useConnection(\n    {}\n  ).acceptRequest;\n  const { data: circles } = useCircles().fetch;\n\n  const [name, setName] = useState<{ givenName: string; surname: string }>();\n  const [photoFileId, setPhotoFileId] = useState<string>(null);\n  const [circleGrants, setCircleGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            await acceptPending({\n              senderDotYouId: senderDotYouId,\n              name: name,\n              photoFileId: photoFileId,\n              circleIds: circleGrants,\n            });\n\n            onConfirm();\n          }}\n        >\n          <div className=\"mt-2\">{`${senderDotYouId} ${t(\n            'has sent you a connection request'\n          )}`}</div>\n\n          <h2 className=\"my-4 text-lg\">{t('Provide your contact info:')}:</h2>\n          <div className=\"mb-5\">\n            <label htmlFor=\"dotyouid\">From:</label>\n            <NameSelector\n              id=\"name\"\n              name=\"name\"\n              required\n              onChange={(e) => {\n                const split = e.target.value.split('+');\n                setName({ givenName: split[0], surname: split[1] });\n              }}\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"dotyouid\">From:</label>\n            <PhotoSelector\n              id=\"name\"\n              name=\"name\"\n              onChange={(e) => {\n                console.log(e.target.value || undefined);\n                setPhotoFileId(e.target.value || undefined);\n              }}\n            />\n          </div>\n          {circles.length ? (\n            <>\n              <h2 className=\"my-4 text-lg\">{t('Add as member to one or more circles')}:</h2>\n\n              {circles.map((circle, index) => {\n                return (\n                  <CirclePermissionView\n                    circleDef={circle}\n                    key={circle.id ?? index}\n                    className={`my-4 w-full rounded-lg border p-4 ${\n                      circleGrants.some((circleGrant) => circleGrant === circle.id)\n                        ? 'border-indigo-500 bg-slate-50 dark:border-indigo-700 dark:bg-slate-700'\n                        : ''\n                    }`}\n                    onClick={() => {\n                      const newCircleGrants = [...circleGrants];\n                      if (!newCircleGrants.some((circleGrant) => circleGrant === circle.id)) {\n                        newCircleGrants.push(circle.id);\n                        setCircleGrants(newCircleGrants);\n                      } else {\n                        setCircleGrants(\n                          newCircleGrants.filter((circleId) => circleId !== circle.id)\n                        );\n                      }\n                    }}\n                  />\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-m-2 flex flex-row-reverse py-3\">\n            <ActionButton className=\"m-2\" icon={'send'} state={acceptPendingStatus}>\n              {confirmText ?? t('Accept')}\n            </ActionButton>\n            <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default IncomingConnectionDialog;\n","import {\n  AttributeDefinitions,\n  BuiltInProfiles,\n  MinimalProfileFields,\n} from '@youfoundation/transit-lib';\nimport { t } from '../../helpers/i18n/dictionary';\nimport useAttributeVersions from '../../hooks/profiles/useAttributeVersions';\nimport Select from './Select';\n\nconst NameSelector = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n) => {\n  const { data: nameAttributes, isLoading: nameAttributesLoading } = useAttributeVersions({\n    profileId: BuiltInProfiles.StandardProfileId.toString(),\n    type: AttributeDefinitions.Name.type,\n  }).fetchVersions;\n\n  return (\n    <Select {...props}>\n      <option>-- {t('Choose a name')} --</option>\n      {nameAttributesLoading && <option>Loading...</option>}\n      {nameAttributes\n        ?.filter((attr) => attr.data !== undefined)\n        .map((attr) => {\n          const fullName = `${attr.data[MinimalProfileFields.GivenNameId]}+${\n            attr.data[MinimalProfileFields.SurnameId]\n          }`;\n          return (\n            <option value={fullName} key={fullName}>\n              {`${attr.data[MinimalProfileFields.GivenNameId]} ${\n                attr.data[MinimalProfileFields.SurnameId]\n              }`}{' '}\n              ({window.location.hostname})\n            </option>\n          );\n        })}\n    </Select>\n  );\n};\n\nexport default NameSelector;\n","import {\n  AttributeDefinitions,\n  BuiltInProfiles,\n  MinimalProfileFields,\n} from '@youfoundation/transit-lib';\nimport { t } from '../../helpers/i18n/dictionary';\nimport useAttributeVersions from '../../hooks/profiles/useAttributeVersions';\nimport Select from './Select';\n\nconst PhotoSelector = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n) => {\n  const { data: photoAttributes, isLoading: photoAttributesLoading } = useAttributeVersions({\n    profileId: BuiltInProfiles.StandardProfileId.toString(),\n    type: AttributeDefinitions.Photo.type,\n  }).fetchVersions;\n\n  return (\n    <Select {...props}>\n      <option value={''}>-- {t('Choose a photo')} --</option>\n      {photoAttributesLoading && <option>Loading...</option>}\n      {photoAttributes\n        ?.filter((attr) => attr.data !== undefined)\n        .map((attr) => {\n          return (\n            <option value={attr.data[MinimalProfileFields.ProfileImageUrlId]} key={attr.id}>\n              {attr.id}\n            </option>\n          );\n        })}\n    </Select>\n  );\n};\n\nexport default PhotoSelector;\n","import { ReactNode } from 'react';\n\ntype SelectProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLSelectElement>,\n  HTMLSelectElement\n> & { children: ReactNode };\n\nconst Select = (props: SelectProps) => {\n  return (\n    <select\n      {...props}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    >\n      {props.children}\n    </select>\n  );\n};\n\nexport default Select;\n","import { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircle from '../../../hooks/circle/useCircle';\nimport { CircleDefinition } from '../../../provider/connections/CircleDataTypes';\nimport Arrow from '../../Icons/Arrow/Arrow';\nimport Circles from '../../Icons/Circles/Circles';\n\nconst CirclePermissionView = ({\n  circleDef,\n  permissionLevel,\n  className,\n  onClick,\n}: {\n  circleDef: CircleDefinition;\n  permissionLevel?: string;\n  className?: string;\n  onClick?: () => void;\n}) => {\n  const { data: members } = useCircle({ circleId: circleDef?.id }).fetchMembers;\n\n  if (!circleDef) {\n    return <></>;\n  }\n\n  const LinkWrapper = ({ children }: { children: ReactNode }) =>\n    onClick ? (\n      <>{children}</>\n    ) : (\n      <Link\n        to={`/owner/circles/${encodeURIComponent(circleDef.id)}`}\n        className=\"contents hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        {children}\n      </Link>\n    );\n\n  return (\n    <div\n      className={`flex flex-row ${className ?? ''} ${circleDef.disabled && 'opacity-50'} ${\n        onClick && 'cursor-pointer'\n      }`}\n      onClick={() => onClick && onClick()}\n    >\n      <LinkWrapper>\n        <Circles className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`my-auto leading-none`}>\n            {circleDef.disabled && t('Disabled:')} {circleDef?.name}\n            {permissionLevel && `: ${permissionLevel}`}\n          </p>\n          <small className=\"block\">\n            {members\n              ? `${members.length} ${members.length === 1 ? t('member') : t('members')} ${t(\n                  'receives'\n                )} `\n              : null}\n            {circleDef?.driveGrants\n              ? `${t('access on')} ${circleDef.driveGrants.length} ${\n                  circleDef.driveGrants.length >= 2 ? t('drives') : t('drive')\n                }`\n              : null}\n          </small>\n        </div>\n        {onClick ? (\n          <Link\n            to={`/owner/circles/${encodeURIComponent(circleDef.id)}`}\n            className=\"my-auto ml-auto py-2 px-4 hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n          >\n            <Arrow className=\"h-5 w-5\" />\n          </Link>\n        ) : (\n          <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n        )}\n      </LinkWrapper>\n    </div>\n  );\n};\n\nexport default CirclePermissionView;\n","import { ReactNode } from 'react';\n\nconst Section = ({\n  title,\n  className,\n  children,\n  isOpaqueBg = false,\n  isBorderLess = false,\n}: {\n  title?: ReactNode;\n  className?: string;\n  children: ReactNode;\n  isOpaqueBg?: boolean;\n  isBorderLess?: boolean;\n}) => {\n  return (\n    <section\n      className={`my-5 rounded-md ${\n        isOpaqueBg\n          ? isBorderLess\n            ? ''\n            : 'rounded-lg border-[1px] border-gray-200 border-opacity-80 px-5 dark:border-gray-700'\n          : 'bg-slate-50 px-5 dark:bg-slate-800'\n      } dark:text-slate-300 ${className ?? ''}`}\n    >\n      {title ? (\n        <div\n          className={`relative border-b-[1px] border-gray-200 border-opacity-80 py-5 transition-all duration-300 dark:border-gray-700`}\n        >\n          <h3 className=\"text-2xl dark:text-white\">{title}</h3>\n        </div>\n      ) : null}\n      <div className=\"py-5 \">{children}</div>\n    </section>\n  );\n};\n\nexport default Section;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { CircleProvider } from '../../provider/connections/CircleProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useCircles = () => {\n  const { getSharedSecret } = useAuth();\n  const circleProvider = CircleProvider.getInstance(getSharedSecret());\n\n  const fetchAll = async () => {\n    const circles = await circleProvider.getCircles();\n    return circles?.sort((a, b) => (a.disabled ? 1 : 0) - (b.disabled ? 1 : 0));\n  };\n\n  return {\n    fetch: useQuery(['circles'], () => fetchAll(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useCircles;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport { ConnectionRequest } from '../../provider/connections/CircleDataTypes';\nimport useAuth from '../auth/useAuth';\n\nconst useConnection = ({ dotYouId }: { dotYouId?: string }) => {\n  const queryClient = useQueryClient();\n\n  const { getSharedSecret } = useAuth();\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n\n  const fetchSingle = async ({ dotYouId }: { dotYouId: string }) => {\n    if (!dotYouId) {\n      return;\n    }\n\n    const connectionInfo = await circleNetworkProvider.getConnectionInfo(dotYouId);\n    if (connectionInfo && connectionInfo.status.toLowerCase() !== 'none') {\n      return connectionInfo;\n    }\n\n    const pendingRequest = await circleNetworkRequestProvider.getPendingRequest(dotYouId);\n    if (pendingRequest) {\n      return pendingRequest;\n    }\n\n    const sentRequest = await circleNetworkRequestProvider.getSentRequest(dotYouId);\n    return sentRequest ?? connectionInfo;\n  };\n\n  const disconnect = async ({ connectionDotYouId }: { connectionDotYouId?: string }) => {\n    return await circleNetworkProvider.disconnectFromContact(connectionDotYouId ?? dotYouId);\n  };\n\n  const sendConnectionRequest = async ({\n    targetDotYouId,\n    message,\n    name,\n    photoFileId,\n    circleIds,\n  }: {\n    targetDotYouId: string;\n    message: string;\n    name: { givenName: string; surname: string };\n    photoFileId: string | undefined;\n    circleIds: string[];\n  }) => {\n    await circleNetworkRequestProvider.sendRequest(\n      targetDotYouId,\n      message,\n      name,\n      photoFileId,\n      circleIds\n    );\n    return { targetDotYouId };\n  };\n\n  const revokeConnectionRequest = async ({ targetDotYouId }: { targetDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deleteSentRequest(targetDotYouId);\n  };\n\n  const acceptRequest = async ({\n    senderDotYouId,\n    name,\n    photoFileId,\n    circleIds,\n  }: {\n    senderDotYouId: string;\n    name: { givenName: string; surname: string };\n    photoFileId: string | undefined;\n    circleIds: string[];\n  }) => {\n    await circleNetworkRequestProvider.acceptConnectionRequest(\n      senderDotYouId,\n      name,\n      photoFileId,\n      circleIds\n    );\n    return { senderDotYouId };\n  };\n\n  const ignoreRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deletePendingRequest(senderDotYouId);\n  };\n\n  return {\n    fetch: useQuery(['connectionInfo', dotYouId], () => fetchSingle({ dotYouId }), {\n      refetchOnWindowFocus: false,\n    }),\n\n    disconnect: useMutation(disconnect, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    sendConnectionRequest: useMutation(sendConnectionRequest, {\n      onMutate: async (newRequest) => {\n        await queryClient.cancelQueries(['sentRequests']);\n\n        const previousRequests: ConnectionRequest[] = queryClient.getQueryData(['sentRequests']);\n        const newRequests = [\n          {\n            status: 'sent',\n            recipient: newRequest.targetDotYouId,\n          },\n          ...previousRequests,\n        ];\n\n        queryClient.setQueryData(['sentRequests'], newRequests);\n\n        return { previousRequests, newRequest };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['sentRequests'], context.previousRequests);\n      },\n      onSettled: (data) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', data.targetDotYouId]);\n      },\n    }),\n    revokeConnectionRequest: useMutation(revokeConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    acceptRequest: useMutation(acceptRequest, {\n      onMutate: async (newRequest) => {\n        await queryClient.cancelQueries(['activeConnections']);\n\n        const previousConnections: ConnectionRequest[] = queryClient.getQueryData([\n          'activeConnections',\n        ]);\n        const newConnections = [\n          {\n            status: 'pending', // Set to pending to not update the connetion details page yet, as we don't have the data for that\n            dotYouId: newRequest.senderDotYouId,\n          },\n          ...previousConnections,\n        ];\n\n        queryClient.setQueryData(['activeConnections'], newConnections);\n\n        return { previousConnections, newRequest };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['activeConnections'], context.previousConnections);\n      },\n      onSettled: (data) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', data.senderDotYouId]);\n      },\n    }),\n    ignoreRequest: useMutation(ignoreRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useConnection;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, Client } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useAttributeVersions = ({ profileId, type }: { profileId: string; type: string }) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchVersions = async ({ profileId, type }: { profileId: string; type: string }) => {\n    return (await client.profileDataProvider.getAttributeVersions(profileId, undefined, type))\n      .versions;\n  };\n  return {\n    fetchVersions: useQuery(\n      ['attributeVersions', profileId, type],\n      () => fetchVersions({ profileId, type }),\n      {\n        refetchOnWindowFocus: false,\n      }\n    ),\n  };\n};\n\nexport default useAttributeVersions;\n","import { ConnectionInfo, DotYouIdRequest, DotYouProfile } from './CircleDataTypes';\nimport { DataUtil, PagedResult, PagingOptions } from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport { stringify } from '../../helpers/common';\n\n//Handles management of established connections\nexport class CircleNetworkProvider extends OwnerProviderBase {\n  private static instance: CircleNetworkProvider;\n  private root = '/circles/connections';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async blockDotYouId(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/block';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async disconnectFromContact(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/disconnect';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getConnections(data: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/connected?' + stringify(data);\n    return client.post<PagedResult<DotYouProfile>>(url, data).then((response) => {\n      return response.data;\n\n      // const results = response.data.results.map((connection) => {\n      //   return {\n      //     ...connection,\n      //     originalContactData: {\n      //       ...connection.originalContactData,\n      //       image: connection.originalContactData.image\n      //         ? {\n      //             ...connection.originalContactData.image,\n      //             // content: connection.originalContactData.image.content\n      //             content:\n      //               typeof connection.originalContactData.image.content === 'string'\n      //                 ? DataUtil.base64ToUint8Array(connection.originalContactData.image.content)\n      //                 : connection.originalContactData.image.content,\n      //           }\n      //         : undefined,\n      //     },\n      //   };\n      // });\n\n      // return { ...response.data, results: results };\n    });\n  }\n\n  async getBlockedConnections(params: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/blocked?' + stringify(params);\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  getConnectionInfo(dotYouId: string): Promise<ConnectionInfo> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/status';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: response.data?.status?.toLowerCase() };\n      })\n      .catch(super.handleErrorResponse);\n  }\n  public static getInstance(sharedSecret): CircleNetworkProvider {\n    if (!CircleNetworkProvider.instance) {\n      CircleNetworkProvider.instance = new CircleNetworkProvider(sharedSecret);\n    }\n\n    return CircleNetworkProvider.instance;\n  }\n}\n","import {\n  AcceptRequestHeader,\n  ConnectionRequest,\n  ConnectionRequestHeader,\n  DotYouIdRequest,\n} from './CircleDataTypes';\nimport {\n  ApiType,\n  BuiltInProfiles,\n  CoreClient,\n  DataUtil,\n  getTargetDriveFromProfileId,\n  PagedResult,\n  PagingOptions,\n} from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport { stringify } from '../../helpers/common';\n\n//Handles making and reading requests to connect with others\nexport class CircleNetworkRequestProvider extends OwnerProviderBase {\n  private static instance: CircleNetworkRequestProvider;\n\n  private Root = '/circles/requests';\n  private SentPathRoot: string = this.Root + '/sent';\n  private PendingPathRoot: string = this.Root + '/pending';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async getPendingRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get<PagedResult<ConnectionRequest>>(url)\n      .then((response) => {\n        return response.data;\n\n        // const results = response.data.results.map((request) => {\n        //   return {\n        //     ...request,\n        //     contactData: {\n        //       ...request.contactData,\n        //       image: request.contactData.image\n        //         ? {\n        //             ...request.contactData.image,\n        //             content:\n        //               typeof request.contactData.image.content === 'string'\n        //                 ? DataUtil.base64ToUint8Array(request.contactData.image.content)\n        //                 : request.contactData.image.content,\n        //           }\n        //         : undefined,\n        //     },\n        //   };\n        // });\n\n        // return { ...response.data, results: results };\n      })\n      .catch(() => {\n        super.handleErrorResponse;\n        return undefined;\n      });\n  }\n\n  async getPendingRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/single';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: 'pending' };\n      })\n      .catch(() => {\n        return undefined;\n      });\n  }\n\n  async getSentRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getSentRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/single';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: 'sent' };\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          return null;\n        }\n        super.handleErrorResponse(err);\n      });\n  }\n\n  async acceptConnectionRequest(\n    dotYouId: string,\n    name: { givenName: string; surname: string },\n    photoFileId?: string | undefined,\n    circleIds?: string[]\n  ): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/accept/';\n\n    const header: AcceptRequestHeader = {\n      sender: dotYouId,\n      circleIds: circleIds,\n      permissions: null,\n      contactData: { ...name },\n    };\n\n    if (photoFileId) {\n      const coreClient = new CoreClient({\n        api: ApiType.Owner,\n        sharedSecret: this.getSharedSecret(),\n      });\n\n      const photoData = await coreClient.mediaProvider.getDecryptedImageData(\n        getTargetDriveFromProfileId(BuiltInProfiles.StandardProfileId.toString()),\n        photoFileId\n      );\n\n      if (photoData) {\n        header.contactData.image = {\n          ...photoData,\n          content: DataUtil.uint8ArrayToBase64(new Uint8Array(photoData.content)) as any,\n        };\n      }\n    }\n\n    return client\n      .post(url, header)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deletePendingRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/delete';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deleteSentRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/delete';\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async sendRequest(\n    dotYouId: string,\n    message: string,\n    name: { givenName: string; surname: string },\n    photoFileId: string | undefined,\n    circleIds: string[]\n  ): Promise<boolean> {\n    const url = this.Root + '/sendrequest';\n    const data: ConnectionRequestHeader = {\n      recipient: dotYouId,\n      message: message,\n      contactData: { ...name },\n      circleIds: circleIds,\n    };\n\n    if (photoFileId) {\n      const coreClient = new CoreClient({\n        api: ApiType.Owner,\n        sharedSecret: this.getSharedSecret(),\n      });\n\n      const photoData = await coreClient.mediaProvider.getDecryptedImageData(\n        getTargetDriveFromProfileId(BuiltInProfiles.StandardProfileId.toString()),\n        photoFileId\n      );\n\n      if (photoData) {\n        data.contactData.image = {\n          ...photoData,\n          content: DataUtil.uint8ArrayToBase64(new Uint8Array(photoData.content)) as any,\n        };\n      }\n    }\n\n    const client = super.createAxiosClient();\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  public static getInstance(sharedSecret): CircleNetworkRequestProvider {\n    if (!CircleNetworkRequestProvider.instance) {\n      CircleNetworkRequestProvider.instance = new CircleNetworkRequestProvider(sharedSecret);\n    }\n\n    return CircleNetworkRequestProvider.instance;\n  }\n}\n"],"names":["title","confirmText","senderDotYouId","isOpen","onConfirm","onCancel","target","usePortal","useConnection","acceptRequest","acceptPending","mutateAsync","acceptPendingStatus","status","circles","useCircles","fetch","data","useState","name","setName","photoFileId","setPhotoFileId","circleGrants","setCircleGrants","dialog","onClose","onSubmit","e","preventDefault","circleIds","className","t","htmlFor","id","required","onChange","split","value","givenName","surname","console","log","undefined","length","map","circle","index","circleDef","some","circleGrant","onClick","newCircleGrants","filter","circleId","push","icon","state","type","createPortal","props","useAttributeVersions","profileId","BuiltInProfiles","AttributeDefinitions","fetchVersions","nameAttributes","nameAttributesLoading","isLoading","attr","fullName","MinimalProfileFields","window","location","hostname","photoAttributes","photoAttributesLoading","children","permissionLevel","members","useCircle","fetchMembers","LinkWrapper","to","encodeURIComponent","disabled","driveGrants","isOpaqueBg","isBorderLess","convertTextToSlug","text","join","toLowerCase","stringify","obj","Object","keys","key","getSharedSecret","useAuth","circleProvider","CircleProvider","fetchAll","getCircles","sort","a","b","useQuery","refetchOnWindowFocus","dotYouId","queryClient","useQueryClient","circleNetworkProvider","CircleNetworkProvider","circleNetworkRequestProvider","CircleNetworkRequestProvider","fetchSingle","getConnectionInfo","connectionInfo","getPendingRequest","pendingRequest","getSentRequest","sentRequest","disconnect","connectionDotYouId","disconnectFromContact","sendConnectionRequest","targetDotYouId","message","sendRequest","revokeConnectionRequest","deleteSentRequest","acceptConnectionRequest","ignoreRequest","deletePendingRequest","useMutation","onSuccess","param","invalidateQueries","onError","ex","error","onMutate","newRequest","cancelQueries","previousRequests","getQueryData","newRequests","recipient","setQueryData","err","newData","context","onSettled","previousConnections","newConnections","client","Client","api","ApiType","sharedSecret","profileDataProvider","getAttributeVersions","versions","root","url","this","post","then","response","catch","params","get","instance","OwnerProviderBase","Root","SentPathRoot","PendingPathRoot","header","sender","permissions","contactData","coreClient","CoreClient","mediaProvider","getDecryptedImageData","getTargetDriveFromProfileId","photoData","image","content","DataUtil","Uint8Array"],"sourceRoot":""}