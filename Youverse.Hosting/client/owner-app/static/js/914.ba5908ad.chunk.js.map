{"version":3,"file":"static/js/914.ba5908ad.chunk.js","mappings":"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","sources":["components/Buttons/SaveStatus.tsx","components/Layout/PageMeta/PageMeta.tsx","components/Templates/Drives/Drives.tsx","hooks/drives/useDrives.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { FC, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n  breadCrumbs,\n  icon,\n}: {\n  title?: ReactNode;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n  breadCrumbs?: { title: string; href?: string }[];\n  icon?: FC;\n}) => {\n  return (\n    <section\n      className=\"-my-8 -mx-10 mb-10 border-b-2 border-gray-100 bg-slate-50 py-8\n    px-10 dark:border-gray-700 dark:bg-slate-800\"\n    >\n      <div className=\"flex flex-row\">\n        <div className=\"flex-col\">\n          {breadCrumbs && (\n            <ul className=\"mb-2 hidden flex-row sm:flex\">\n              {breadCrumbs.map((crumb, index) => {\n                return (\n                  <li key={index} className=\"mr-2\">\n                    {crumb.href ? (\n                      <Link to={crumb.href} className=\"\">\n                        {crumb.title}\n                        <span className=\"ml-2\">{'>'}</span>\n                      </Link>\n                    ) : (\n                      <span className=\"text-slate-500\">{crumb.title}</span>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {title && (\n            <h1 className=\"mb-5 flex flex-row text-4xl dark:text-white\">\n              {icon && icon({ className: 'h-8 w-8 my-auto mr-4' })} {title}\n            </h1>\n          )}\n        </div>\n        <div className=\"ml-auto \">\n          <div className=\"flex flex-row\">{actions}</div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","import { DriveDefinition } from '@youfoundation/transit-lib';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useDrives from '../../../hooks/drives/useDrives';\nimport DrivePermissionOverview from './DrivePermissionOverview/DrivePermissionOverview';\nimport HardDrive from '../../Icons/HardDrive/HardDrive';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\n\nconst Drives = () => {\n  const {\n    fetch: { data: drives, isLoading: isDrivesLoading },\n  } = useDrives();\n\n  //   const [isOpenCreate, setIsOpenCreate] = useState(false);\n\n  if (isDrivesLoading) {\n    <>Loading</>;\n  }\n\n  return (\n    <>\n      <PageMeta\n        icon={HardDrive}\n        title={t('My Drives')}\n        // actions={\n        //   <>\n        //     <ActionButton icon=\"plus\" onClick={() => setIsOpenCreate(true)}>\n        //       {t('Add Drive')}\n        //     </ActionButton>\n        //   </>\n        // }\n      />\n      <section className=\"-my-4\">\n        {drives && !isDrivesLoading\n          ? drives.map((driveDef) => (\n              <DriveCard\n                driveDefinition={driveDef}\n                key={`${driveDef.targetDriveInfo.alias}-${driveDef.targetDriveInfo.type}`}\n                className=\"py-4\"\n              />\n            ))\n          : null}\n      </section>\n    </>\n  );\n};\n\nconst DriveCard = ({\n  driveDefinition,\n  className,\n}: {\n  driveDefinition: DriveDefinition;\n  className: string;\n}) => {\n  return (\n    <div className={`${className}`}>\n      <Link\n        to={`${driveDefinition.targetDriveInfo.alias}_${driveDefinition.targetDriveInfo.type}`}\n        className=\"contents\"\n      >\n        <div\n          className={`h-full rounded-md border-[1px] border-gray-200 border-opacity-60 bg-white transition-colors hover:bg-slate-100 dark:border-gray-800 dark:bg-gray-800 dark:hover:bg-slate-700`}\n        >\n          <h2 className=\"bg-slate-100 p-4 text-xl dark:bg-slate-700 dark:text-slate-200\">\n            {driveDefinition.name}\n          </h2>\n          <div className=\"p-4\">\n            <h3 className=\"text-lg\">Metadata</h3>\n            <p>{driveDefinition.metadata}</p>\n            <ul>\n              {driveDefinition.allowAnonymousReads ? <li>Allow Anonymous Reads</li> : null}\n              {driveDefinition.isReadonly ? <li>Read Only</li> : null}\n            </ul>\n            {/* <p className=\"text-xs\">\n              Created on: {new Date(driveDefinition.).toLocaleDateString()}\n            </p> */}\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\nexport default Drives;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, CoreClient } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useDrives = () => {\n  const { getSharedSecret } = useAuth();\n  const client = new CoreClient({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchAll = async () => {\n    return await (\n      await client.driveProvider.GetDrives({ pageNumber: 1, pageSize: 100 })\n    ).results;\n  };\n\n  return {\n    fetch: useQuery(['drives'], () => fetchAll(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useDrives;\n"],"names":["className","state","useState","lastSave","setLastSave","Date","now","setNow","useEffect","timer","setTimeout","clearTimeout","diff","getTime","text","toLocaleString","title","actions","saveStatus","breadCrumbs","icon","map","crumb","index","href","to","DriveCard","driveDefinition","targetDriveInfo","alias","type","name","metadata","allowAnonymousReads","isReadonly","useDrives","fetch","drives","data","isDrivesLoading","isLoading","HardDrive","t","driveDef","getSharedSecret","useAuth","client","CoreClient","api","ApiType","sharedSecret","fetchAll","driveProvider","GetDrives","pageNumber","pageSize","results","useQuery","refetchOnWindowFocus"],"sourceRoot":""}