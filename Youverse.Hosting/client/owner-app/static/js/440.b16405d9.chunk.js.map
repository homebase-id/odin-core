{"version":3,"file":"static/js/440.b16405d9.chunk.js","mappings":"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","sources":["components/Form/Checkbox.tsx","components/PermissionViews/DrivePermissionView/DrivePermissionView.tsx","components/Dialog/CircleMembershipDialog/CircleMembershipDialog.tsx","components/Templates/ConnectionDetails/ConnectionDetails.tsx","components/Templates/DemoData/helpers.ts","hooks/drive/useDrive.ts","provider/permission/permissionLevels.ts"],"sourcesContent":["const Checkbox = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n) => {\n  return (\n    <input\n      {...props}\n      type=\"checkbox\"\n      className={`h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-blue-600 ${props.className}`}\n    />\n  );\n};\n\nexport default Checkbox;\n","import { DriveDefinition } from '@youfoundation/transit-lib';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useDrive from '../../../hooks/drive/useDrive';\nimport { DriveGrant } from '../../../provider/connections/CircleDataTypes';\nimport { drivePermissionLevels } from '../../../provider/permission/permissionLevels';\nimport Arrow from '../../Icons/Arrow/Arrow';\nimport HardDrive from '../../Icons/HardDrive/HardDrive';\nimport LoadingParagraph from '../../Loaders/LoadingParagraph/LoadingParagraph';\nimport { getAccessFromPermissionNumber } from '../../Templates/DemoData/helpers';\n\nconst DrivePermissionView = ({\n  driveGrant,\n  permissionTree,\n  className,\n}: {\n  driveGrant: DriveGrant;\n  permissionTree?: string;\n  className?: string;\n}) => {\n  const { data: drive, isLoading } = useDrive({\n    targetDrive: driveGrant.permissionedDrive.drive,\n  }).fetch;\n\n  if (isLoading) {\n    return <LoadingParagraph className={`h-4 max-w-xs ${className}`} />;\n  }\n\n  return (\n    <div\n      key={`${driveGrant?.permissionedDrive?.drive?.alias}-${driveGrant?.permissionedDrive.drive?.type}`}\n      className={`flex flex-row ${className}`}\n      title={permissionTree}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"flex flex-row hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`leading-none ${!permissionTree ? 'my-auto' : ''}`}>\n            {drive?.name}:{' '}\n            {\n              getAccessFromPermissionNumber(\n                driveGrant?.permissionedDrive.permission,\n                drivePermissionLevels\n              ).name\n            }\n          </p>\n          {permissionTree && (\n            <small className=\"\">\n              {t('Via')} {permissionTree}\n            </small>\n          )}\n        </div>\n        <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n      </Link>\n    </div>\n  );\n};\n\nexport const DriveView = ({ drive, className }: { drive: DriveDefinition; className?: string }) => {\n  return (\n    <div\n      key={`${drive.targetDriveInfo?.alias}-${drive.targetDriveInfo?.type}`}\n      className={`flex flex-row ${className}`}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"flex flex-row hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`my-auto leading-none`}>{drive?.name}</p>\n        </div>\n        <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n      </Link>\n    </div>\n  );\n};\n\nexport default DrivePermissionView;\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircle from '../../../hooks/circle/useCircle';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport { CircleGrant } from '../../../provider/connections/CircleDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Checkbox from '../../Form/Checkbox';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst CircleMembershipDialog = ({\n  title,\n  isOpen,\n\n  currentCircleGrants,\n  dotYouId,\n\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  isOpen: boolean;\n\n  currentCircleGrants: CircleGrant[];\n  dotYouId: string;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  const { data: circles } = useCircles().fetch;\n  const {\n    provideGrant: { mutateAsync: provideGrant },\n    revokeGrant: { mutateAsync: revokeGrant },\n  } = useCircle({});\n  const currentCircleGrantIds = currentCircleGrants.map((grant) => grant.circleId);\n\n  const [toRevokeGrants, setToRevokeGrants] = useState<string[]>([]);\n  const [toProvideGrants, setToProvideGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            await Promise.all(\n              toProvideGrants.map(async (circleToProvide) => {\n                return provideGrant({ circleId: circleToProvide, dotYouId: dotYouId });\n              })\n            );\n\n            await Promise.all(\n              toRevokeGrants.map(async (circleToRevoke) => {\n                return revokeGrant({ circleId: circleToRevoke, dotYouId: dotYouId });\n              })\n            );\n\n            onConfirm();\n          }}\n        >\n          {circles.length ? (\n            <>\n              <h2 className=\"mb-2 text-lg\">{t('Member of')}:</h2>\n\n              {circles.map((circle, index) => {\n                return (\n                  <div key={circle.id ?? index} className=\"mb-2\">\n                    <Checkbox\n                      value={circle.id}\n                      id={circle.id}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          // If grant wasn't there, add to provide\n                          if (!currentCircleGrantIds.some((grant) => grant === circle.id)) {\n                            setToProvideGrants([...toProvideGrants, circle.id]);\n                          }\n                          setToRevokeGrants(\n                            toRevokeGrants.filter((circleId) => circleId !== circle.id)\n                          );\n                        } else {\n                          // If grant was there, add to revoke\n                          if (currentCircleGrantIds.some((grant) => grant === circle.id)) {\n                            setToRevokeGrants([...toRevokeGrants, circle.id]);\n                          }\n                          setToProvideGrants(\n                            toProvideGrants.filter((circleId) => circleId !== circle.id)\n                          );\n                        }\n                      }}\n                      defaultChecked={currentCircleGrantIds.indexOf(circle.id) !== -1}\n                    />\n                    <label htmlFor={circle.id} className=\"ml-2\">\n                      {circle.name}\n                    </label>\n                  </div>\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-m-2 flex flex-row-reverse py-3\">\n            <ActionButton className=\"m-2\" icon={'send'}>\n              {t('Save')}\n            </ActionButton>\n            <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default CircleMembershipDialog;\n","import { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport {\n  AccessGrant,\n  ConnectionInfo,\n  DriveGrant,\n} from '../../../provider/connections/CircleDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport CircleMembershipDialog from '../../Dialog/CircleMembershipDialog/CircleMembershipDialog';\nimport IncomingConnectionDialog from '../../Dialog/ConnectionDialogs/IncomingConnectionDialog';\nimport Persons from '../../Icons/Persons/Persons';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport LoadingDetailPage from '../../Loaders/LoadingDetailPage/LoadingDetailPage';\nimport LoadingParagraph from '../../Loaders/LoadingParagraph/LoadingParagraph';\nimport CirclePermissionView from '../../PermissionViews/CirclePermissionView/CirclePermissionView';\nimport DrivePermissionView from '../../PermissionViews/DrivePermissionView/DrivePermissionView';\nimport Section from '../../Sections/Section';\n\nconst ConnectionDetails = () => {\n  const { connectionKey } = useParams();\n  const navigate = useNavigate();\n  const {\n    fetch: { data: connectionInfo, isLoading: connectionInfoLoading },\n    disconnect: { mutate: disconnect, status: disconnectStatus },\n    acceptRequest: { mutate: acceptPending, status: acceptPendingStatus },\n    ignoreRequest: { mutate: ignoreRequest, status: ignoreRequestStatus },\n    revokeConnectionRequest: { mutate: revokeRequest, status: revokeRequestStatus },\n  } = useConnection({ dotYouId: connectionKey });\n\n  const [isAcceptDialogOpen, setIsAcceptDialogOpen] = useState(false);\n\n  const [isEditPermissionActive, setIsEditPermissionActive] = useState(false);\n\n  if (connectionInfoLoading) {\n    return <LoadingDetailPage />;\n  }\n\n  if (!connectionInfo) {\n    return <>No matching connection found</>;\n  }\n\n  const actions =\n    connectionInfo.status === 'connected' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"m-2\"\n          onClick={() => {\n            setIsEditPermissionActive(true);\n          }}\n          state={disconnectStatus}\n        >\n          {t('Edit Access')}\n        </ActionButton>\n        <ActionButton\n          type=\"remove\"\n          className=\"m-2\"\n          onClick={() => disconnect({})}\n          icon={'trash'}\n          state={disconnectStatus}\n          confirmOptions={{\n            title: `${t('Remove')} ${connectionKey}`,\n            buttonText: t('Remove'),\n            body: `${t('Are you sure you want to remove')} ${connectionKey} ${t(\n              'from your connections. They will lose all existing access.'\n            )}`,\n          }}\n        >\n          {t('Remove')}\n        </ActionButton>\n      </>\n    ) : connectionInfo.status === 'pending' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"m-2\"\n          onClick={() => {\n            setIsAcceptDialogOpen(true);\n          }}\n          state={acceptPendingStatus}\n        >\n          {t('Accept Request')}...\n        </ActionButton>\n        <ActionButton\n          type=\"secondary\"\n          className=\"m-2\"\n          onClick={() => {\n            ignoreRequest(\n              { senderDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={ignoreRequestStatus}\n        >\n          {t('Ignore')}\n        </ActionButton>\n        <IncomingConnectionDialog\n          isOpen={isAcceptDialogOpen}\n          senderDotYouId={connectionInfo.senderDotYouId}\n          title={t('Accept connection request')}\n          confirmText={t('Accept and give access')}\n          onConfirm={() => {\n            setIsAcceptDialogOpen(false);\n          }}\n          onCancel={() => {\n            setIsAcceptDialogOpen(false);\n          }}\n        />\n      </>\n    ) : connectionInfo.status === 'sent' ? (\n      <>\n        <ActionButton\n          type=\"secondary\"\n          className=\"m-2\"\n          onClick={() => {\n            revokeRequest(\n              { targetDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={revokeRequestStatus}\n        >\n          {t('Revoke')}\n        </ActionButton>\n      </>\n    ) : (\n      <></>\n    );\n\n  const activeConnection = connectionInfo as ConnectionInfo;\n\n  return (\n    <>\n      <PageMeta\n        icon={Persons}\n        title={`${connectionKey} (${connectionInfo.status})`}\n        actions={actions}\n        breadCrumbs={[\n          { href: '/owner/connections', title: 'Connections' },\n          { title: connectionKey },\n        ]}\n      />\n      {connectionInfo.status === 'connected' ? (\n        <>\n          <ConnectionPermissionViewer accessGrant={activeConnection.accessGrant} />\n          <CircleMembershipDialog\n            title={`${t('Edit Circle Membership for')} ${connectionKey}`}\n            isOpen={isEditPermissionActive}\n            dotYouId={connectionKey}\n            currentCircleGrants={activeConnection.accessGrant.circleGrants}\n            onCancel={() => {\n              setIsEditPermissionActive(false);\n            }}\n            onConfirm={() => {\n              setIsEditPermissionActive(false);\n            }}\n          />\n          <section>\n            <p className=\"text-sm\">\n              {t('Connected since')}: {new Date(activeConnection.created).toLocaleDateString()}\n            </p>\n          </section>\n        </>\n      ) : connectionInfo.status === 'pending' || connectionInfo.status === 'sent' ? (\n        <>\n          <p className=\"mb-3 text-sm\">{connectionInfo.message}</p>\n        </>\n      ) : null}\n    </>\n  );\n};\n\nconst ConnectionPermissionViewer = ({ accessGrant }: { accessGrant: AccessGrant }) => {\n  const { data: circles, isLoading: circlesLoading } = useCircles().fetch;\n\n  const grantedCircles = circles?.filter((circle) =>\n    accessGrant.circleGrants.some((circleGrant) => circleGrant.circleId === circle.id)\n  );\n\n  const grantedDrives = grantedCircles?.flatMap((circle) => circle.driveGrants ?? []);\n  const uniqueDrivesWithHighestPermission = grantedDrives?.reduce((prevValue, grantedDrive) => {\n    const existingGrantIndex = prevValue.findIndex(\n      (driveGrant) =>\n        driveGrant.permissionedDrive.drive.alias === grantedDrive.permissionedDrive.drive.alias &&\n        driveGrant.permissionedDrive.drive.type === grantedDrive.permissionedDrive.drive.type\n    );\n\n    if (existingGrantIndex !== -1) {\n      prevValue[existingGrantIndex].permissionedDrive.permission = Math.max(\n        prevValue[existingGrantIndex].permissionedDrive.permission,\n        grantedDrive.permissionedDrive.permission\n      );\n      return prevValue;\n    } else {\n      return [...prevValue, grantedDrive];\n    }\n  }, [] as DriveGrant[]);\n\n  const driveGrantsWithPermissionTree = uniqueDrivesWithHighestPermission?.map((drive) => {\n    const viaCircles = grantedCircles.filter((circle) =>\n      circle.driveGrants?.some(\n        (driveGrant) =>\n          driveGrant.permissionedDrive.drive.alias === drive.permissionedDrive.drive.alias &&\n          driveGrant.permissionedDrive.drive.type === drive.permissionedDrive.drive.type\n      )\n    );\n\n    const circleNames = viaCircles.map((circle) => circle.name);\n\n    return { driveGrant: drive, permissionTree: circleNames.join(', ') };\n  });\n  return (\n    <>\n      <Section title={t('Member of the following circles')} isOpaqueBg={true}>\n        {circlesLoading ? (\n          <>\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n          </>\n        ) : (\n          <>\n            {!accessGrant.isRevoked ? (\n              <div className=\"-my-4\">\n                {grantedCircles?.map((grantedCircle) => (\n                  <CirclePermissionView\n                    circleDef={grantedCircle}\n                    key={grantedCircle.id}\n                    className=\"my-4\"\n                  />\n                ))}\n              </div>\n            ) : null}\n          </>\n        )}\n      </Section>\n\n      {driveGrantsWithPermissionTree?.length ? (\n        <Section title={t('Access on the following drives')} isOpaqueBg={true}>\n          <div className=\"-my-6\">\n            {driveGrantsWithPermissionTree.map((grantsWithCircle) => {\n              return (\n                <DrivePermissionView\n                  key={`${grantsWithCircle.driveGrant.permissionedDrive.drive.alias}-${grantsWithCircle.driveGrant.permissionedDrive.drive.type}`}\n                  driveGrant={grantsWithCircle.driveGrant}\n                  permissionTree={grantsWithCircle.permissionTree}\n                  className=\"my-6\"\n                />\n              );\n            })}\n          </div>\n        </Section>\n      ) : null}\n    </>\n  );\n};\n\nexport default ConnectionDetails;\n","export const rando = (arr: string[]) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\nexport const getRandomAbstract = () => {\n  const sentences = [\n    'Ut bibendum, neque ac lacinia aliquam, justo ipsum aliquam urna, id vestibulum augue mauris sit amet lacus.',\n    'Proin ante sapien, interdum sit amet eros sit amet, eleifend pharetra metus.',\n    'Sed elit mi, euismod eget neque at, suscipit aliquam nisi.',\n    'Nunc diam arcu, tincidunt quis dignissim ac, volutpat non odio.',\n  ];\n\n  return rando(sentences);\n};\n\nexport const getFunName = () => {\n  const adjectives = [\n    'adorable',\n    'beautiful',\n    'clean',\n    'drab',\n    'elegant',\n    'fancy',\n    'glamorous',\n    'handsome',\n    'long',\n    'magnificent',\n    'old-fashioned',\n    'plain',\n    'quaint',\n    'sparkling',\n    'ugliest',\n    'unsightly',\n    'angry',\n    'bewildered',\n    'clumsy',\n    'defeated',\n    'embarrassed',\n    'fierce',\n    'grumpy',\n    'helpless',\n    'itchy',\n    'jealous',\n    'lazy',\n    'mysterious',\n    'nervous',\n    'obnoxious',\n    'panicky',\n    'repulsive',\n    'scary',\n    'thoughtless',\n    'uptight',\n    'worried',\n  ];\n\n  const nouns = [\n    'women',\n    'men',\n    'children',\n    'teeth',\n    'feet',\n    'people',\n    'leaves',\n    'mice',\n    'geese',\n    'halves',\n    'knives',\n    'wives',\n    'lives',\n    'elves',\n    'loaves',\n    'potatoes',\n    'tomatoes',\n    'cacti',\n    'foci',\n    'fungi',\n    'nuclei',\n    'syllabuses',\n    'analyses',\n    'diagnoses',\n    'oases',\n    'theses',\n    'crises',\n    'phenomena',\n    'criteria',\n    'data',\n  ];\n\n  return `${rando(adjectives)} ${rando(adjectives)} ${rando(nouns)}`;\n};\n\nexport const base64ToArrayBuffer = (base64: string) => {\n  const binary_string = window.atob(base64);\n  const len = binary_string.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes.buffer;\n};\n\nexport const arrayBufferToBase64 = (buffer: Iterable<number>) => {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n};\n\nexport const getAccessFromPermissionNumber = (\n  value: number,\n  permissionLevels: { name: string; value: number }[]\n) => {\n  return permissionLevels.reduce((prevValue, currValue) => {\n    if (currValue.value > prevValue.value && currValue.value <= value) {\n      return currValue;\n    }\n\n    return prevValue;\n  }, permissionLevels[0]);\n};\n\nexport const moveElementInArray = (arr: Array<unknown>, fromIndex: number, toIndex: number) => {\n  const element = arr[fromIndex];\n  arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, element);\n\n  return arr;\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, CoreClient, TargetDrive } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useDrive = ({ targetDrive }: { targetDrive: TargetDrive }) => {\n  const { getSharedSecret } = useAuth();\n  const client = new CoreClient({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetch = async (targetDrive: TargetDrive) => {\n    const allDrives = await (\n      await client.driveProvider.GetDrives({ pageNumber: 1, pageSize: 100 })\n    ).results;\n\n    return allDrives.find(\n      (drive) =>\n        drive.targetDriveInfo.alias === targetDrive.alias &&\n        drive.targetDriveInfo.type === targetDrive.type\n    );\n  };\n\n  return {\n    fetch: useQuery(\n      ['drive', `${targetDrive.alias}_${targetDrive.type}`],\n      () => fetch(targetDrive),\n      {\n        refetchOnWindowFocus: false,\n      }\n    ),\n  };\n};\n\nexport default useDrive;\n","import { t } from '../../helpers/i18n/dictionary';\n\nexport const drivePermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Reader'), value: 1 },\n  { name: t('Editor'), value: 3 },\n];\n\nexport const circlePermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Read Connections'), value: 10 },\n  { name: t('Read Circle Members'), value: 50 },\n];\n\nexport const appPermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Read Connections'), value: 10 },\n  { name: t('Manage Connection Requests'), value: 30 },\n  { name: t('Read Circle Members'), value: 50 },\n];\n"],"names":["props","type","className","DriveView","drive","to","targetDriveInfo","alias","name","driveGrant","permissionTree","useDrive","targetDrive","permissionedDrive","fetch","data","isLoading","title","getAccessFromPermissionNumber","permission","drivePermissionLevels","t","isOpen","currentCircleGrants","dotYouId","onConfirm","onCancel","target","usePortal","circles","useCircles","useCircle","provideGrant","mutateAsync","revokeGrant","currentCircleGrantIds","map","grant","circleId","useState","toRevokeGrants","setToRevokeGrants","toProvideGrants","setToProvideGrants","dialog","DialogWrapper","onClose","onSubmit","e","preventDefault","Promise","all","circleToProvide","circleToRevoke","length","circle","index","Checkbox","value","id","onChange","checked","some","filter","defaultChecked","indexOf","htmlFor","ActionButton","icon","onClick","createPortal","ConnectionPermissionViewer","accessGrant","circlesLoading","grantedCircles","circleGrants","circleGrant","grantedDrives","flatMap","driveGrants","uniqueDrivesWithHighestPermission","reduce","prevValue","grantedDrive","existingGrantIndex","findIndex","Math","max","driveGrantsWithPermissionTree","circleNames","join","Section","isOpaqueBg","LoadingParagraph","isRevoked","grantedCircle","CirclePermissionView","circleDef","grantsWithCircle","DrivePermissionView","connectionKey","useParams","navigate","useNavigate","useConnection","connectionInfo","connectionInfoLoading","disconnect","mutate","disconnectStatus","status","acceptRequest","acceptPendingStatus","ignoreRequest","ignoreRequestStatus","revokeConnectionRequest","revokeRequest","revokeRequestStatus","isAcceptDialogOpen","setIsAcceptDialogOpen","isEditPermissionActive","setIsEditPermissionActive","LoadingDetailPage","actions","state","confirmOptions","buttonText","body","senderDotYouId","onSuccess","IncomingConnectionDialog","confirmText","targetDotYouId","activeConnection","PageMeta","Persons","breadCrumbs","href","Date","created","toLocaleDateString","message","rando","arr","floor","random","getRandomAbstract","getFunName","adjectives","base64ToArrayBuffer","base64","binary_string","window","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","permissionLevels","currValue","moveElementInArray","fromIndex","toIndex","element","splice","getSharedSecret","useAuth","client","CoreClient","api","ApiType","sharedSecret","driveProvider","GetDrives","pageNumber","pageSize","results","allDrives","find","useQuery","refetchOnWindowFocus","circlePermissionLevels","appPermissionLevels"],"sourceRoot":""}