{"version":3,"file":"static/js/720.b1f5e0fc.chunk.js","mappings":"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","sources":["components/Buttons/SaveStatus.tsx","components/Layout/PageMeta/PageMeta.tsx","components/Templates/Apps/Apps.tsx","hooks/apps/useApps.ts","provider/app/AppManagementProvider.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { FC, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n  breadCrumbs,\n  icon,\n}: {\n  title?: ReactNode;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n  breadCrumbs?: { title: string; href?: string }[];\n  icon?: FC;\n}) => {\n  return (\n    <section\n      className=\"-my-8 -mx-10 mb-10 border-b-2 border-gray-100 bg-slate-50 py-8\n    px-10 dark:border-gray-700 dark:bg-slate-800\"\n    >\n      <div className=\"flex flex-row\">\n        <div className=\"flex-col\">\n          {breadCrumbs && (\n            <ul className=\"mb-2 hidden flex-row sm:flex\">\n              {breadCrumbs.map((crumb, index) => {\n                return (\n                  <li key={index} className=\"mr-2\">\n                    {crumb.href ? (\n                      <Link to={crumb.href} className=\"\">\n                        {crumb.title}\n                        <span className=\"ml-2\">{'>'}</span>\n                      </Link>\n                    ) : (\n                      <span className=\"text-slate-500\">{crumb.title}</span>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {title && (\n            <h1 className=\"mb-5 flex flex-row text-4xl dark:text-white\">\n              {icon && icon({ className: 'h-8 w-8 my-auto mr-4' })} {title}\n            </h1>\n          )}\n        </div>\n        <div className=\"ml-auto \">\n          <div className=\"flex flex-row\">{actions}</div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","import { Link } from 'react-router-dom';\nimport useApps from '../../../hooks/apps/useApps';\nimport { RedactedAppRegistration } from '../../../provider/app/AppManagementProviderTypes';\nimport Flag from '../../Icons/Flag/Flag';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\n\nconst Apps = () => {\n  const { data: registeredApps, isLoading: loadingRegisteredApps } = useApps().fetchRegistered;\n\n  return (\n    <>\n      <section>\n        <PageMeta icon={Flag} title={'Apps'} />\n      </section>\n      {!loadingRegisteredApps && registeredApps?.length\n        ? registeredApps.map((app) => (\n            <AppCard appRegistration={app} key={app.appId} className=\"py-4\" />\n          ))\n        : null}\n    </>\n  );\n};\n\nconst AppCard = ({\n  appRegistration,\n  className,\n}: {\n  appRegistration: RedactedAppRegistration;\n  className: string;\n}) => {\n  return (\n    <div className={`${className}`}>\n      <Link to={`/owner/apps/${encodeURIComponent(appRegistration.appId)}`} className=\"contents\">\n        <div\n          className={`h-full rounded-md border-[1px] border-gray-200 border-opacity-60 bg-white transition-colors hover:bg-slate-100 dark:border-gray-800 dark:bg-gray-800 dark:hover:bg-slate-700`}\n        >\n          <h2 className=\"bg-slate-100 p-4 text-xl dark:bg-slate-700 dark:text-slate-200\">\n            {appRegistration.name}\n          </h2>\n          <div className=\"p-4\">\n            <p className=\"text-xs\">\n              Created on: {new Date(appRegistration.created).toLocaleDateString()}\n            </p>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default Apps;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport AppManagementProvider from '../../provider/app/AppManagementProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useApps = () => {\n  const queryClient = useQueryClient();\n  const { getSharedSecret } = useAuth();\n\n  const appManagementProvider = AppManagementProvider.getInstance(getSharedSecret());\n\n  const fetchRegistered = async () => {\n    return await await appManagementProvider.GetAppRegistrations();\n  };\n\n  const revokeApp = async ({ appId }: { appId: string }) => {\n    // return await circleNetworkRequestProvider.deleteSentRequest(targetDotYouId);\n  };\n\n  return {\n    fetchRegistered: useQuery(['registeredApps'], () => fetchRegistered(), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n    revokeApp: useMutation(revokeApp, {\n      onSuccess: () => {\n        queryClient.invalidateQueries(['registeredApps']);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useApps;\n","import {\n  AppClientRegistrationRequest,\n  AppClientRegistrationResponse,\n  AppRegistrationRequest,\n  RedactedAppRegistration,\n  GetAppRequest,\n} from './AppManagementProviderTypes';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\nexport default class AppManagementProvider extends OwnerProviderBase {\n  private static instance: AppManagementProvider;\n  constructor(sharedSecret: Uint8Array | undefined) {\n    super(sharedSecret);\n  }\n\n  //adds the specified client to the list of allowed clients for a given app; returns a CAT\n  async RegisterAppClient(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/client',\n      request\n    );\n    return response.data;\n  }\n\n  async RegisterChatAppClient_temp(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/chatclient_temp',\n      request\n    );\n    console.log('RegisterChatAppClient_temp returning response');\n    console.log(response);\n\n    return response.data;\n  }\n\n  async RegisterApp(request: AppRegistrationRequest): Promise<RedactedAppRegistration> {\n    const client = this.createAxiosClient();\n    const response = await client.post<RedactedAppRegistration>(\n      'appmanagement/register/app',\n      request\n    );\n\n    console.log('RegisterApp returning response');\n    console.log(response);\n\n    return response.data;\n  }\n\n  async GetAppRegistration(request: GetAppRequest): Promise<RedactedAppRegistration> {\n    const client = this.createAxiosClient();\n    const response = await client.post<RedactedAppRegistration>('appmanagement/app', request);\n    return response.data;\n  }\n\n  async GetAppRegistrations(): Promise<RedactedAppRegistration[]> {\n    const client = this.createAxiosClient();\n    const response = await client.get<RedactedAppRegistration[]>('appmanagement/list');\n    return response.data;\n  }\n\n  public static getInstance(sharedSecret): AppManagementProvider {\n    if (!AppManagementProvider.instance) {\n      AppManagementProvider.instance = new AppManagementProvider(sharedSecret);\n    }\n\n    return AppManagementProvider.instance;\n  }\n}\n"],"names":["className","state","useState","lastSave","setLastSave","Date","now","setNow","useEffect","timer","setTimeout","clearTimeout","diff","getTime","text","toLocaleString","title","actions","saveStatus","breadCrumbs","icon","map","crumb","index","href","to","AppCard","appRegistration","encodeURIComponent","appId","name","created","toLocaleDateString","useApps","fetchRegistered","registeredApps","data","loadingRegisteredApps","isLoading","Flag","length","app","queryClient","useQueryClient","getSharedSecret","useAuth","appManagementProvider","AppManagementProvider","GetAppRegistrations","revokeApp","useQuery","refetchOnMount","refetchOnWindowFocus","useMutation","onSuccess","invalidateQueries","onError","ex","console","error","sharedSecret","request","client","this","createAxiosClient","post","response","log","get","instance","OwnerProviderBase"],"sourceRoot":""}