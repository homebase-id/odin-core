{"version":3,"file":"static/js/440.b4dc98b9.chunk.js","mappings":"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","sources":["components/PermissionViews/DrivePermissionView/DrivePermissionView.tsx","components/Dialog/CircleMembershipDialog/CircleMembershipDialog.tsx","components/Templates/ConnectionDetails/ConnectionDetails.tsx","hooks/connection/useConnection.ts"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport useDrive from '../../../hooks/drive/useDrive';\nimport { DriveGrant } from '../../../provider/connections/CirlceDataTypes';\nimport { drivePermissionLevels } from '../../../provider/permission/permissionLevels';\nimport Arrow from '../../Icons/Arrow/Arrow';\nimport HardDrive from '../../Icons/HardDrive/HardDrive';\nimport { getAccessFromPermissionNumber } from '../../Templates/DemoData/helpers';\n\nconst DrivePermissionView = ({\n  driveGrant,\n  permissionTree,\n  className,\n}: {\n  driveGrant: DriveGrant;\n  permissionTree?: string;\n  className?: string;\n}) => {\n  const { data: drive } = useDrive({ targetDrive: driveGrant.drive }).fetch;\n\n  return (\n    <div\n      key={`${driveGrant?.drive?.alias}-${driveGrant?.drive?.type}`}\n      className={`flex flex-row ${className}`}\n      title={permissionTree}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"flex flex-row hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`leading-none ${!permissionTree ? 'my-auto' : ''}`}>\n            {drive?.name}:{' '}\n            {getAccessFromPermissionNumber(driveGrant?.permission, drivePermissionLevels).name}\n          </p>\n          {permissionTree && <small className=\"\">{permissionTree}</small>}\n        </div>\n        <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n      </Link>\n    </div>\n  );\n};\n\nexport default DrivePermissionView;\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport { CircleGrant } from '../../../provider/connections/CirlceDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Checkbox from '../../Form/Checkbox';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst CircleMembershipDialog = ({\n  title,\n  isOpen,\n\n  currentCircleGrants,\n  dotYouId,\n\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  isOpen: boolean;\n\n  currentCircleGrants: CircleGrant[];\n  dotYouId: string;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  const {\n    fetch: { data: circles },\n    provideGrant: { mutateAsync: provideGrant },\n    revokeGrant: { mutateAsync: revokeGrant },\n  } = useCircles();\n  const currentCircleGrantIds = currentCircleGrants.map((grant) => grant.circleId);\n\n  const [toRevokeGrants, setToRevokeGrants] = useState<string[]>([]);\n  const [toProvideGrants, setToProvideGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            await Promise.all(\n              toProvideGrants.map(async (circleToProvide) => {\n                return provideGrant({ circleId: circleToProvide, dotYouId: dotYouId });\n              })\n            );\n\n            await Promise.all(\n              toRevokeGrants.map(async (circleToRevoke) => {\n                return revokeGrant({ circleId: circleToRevoke, dotYouId: dotYouId });\n              })\n            );\n\n            onConfirm();\n          }}\n        >\n          {circles.length ? (\n            <>\n              <h2 className=\"mb-2 text-lg\">{t('Member of')}:</h2>\n\n              {circles.map((circle, index) => {\n                return (\n                  <div key={circle.id ?? index} className=\"mb-2\">\n                    <Checkbox\n                      value={circle.id}\n                      id={circle.id}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          // If grant wasn't there, add to provide\n                          if (!currentCircleGrantIds.some((grant) => grant === circle.id)) {\n                            setToProvideGrants([...toProvideGrants, circle.id]);\n                          }\n                          setToRevokeGrants(\n                            toRevokeGrants.filter((circleId) => circleId !== circle.id)\n                          );\n                        } else {\n                          // If grant was there, add to revoke\n                          if (currentCircleGrantIds.some((grant) => grant === circle.id)) {\n                            setToRevokeGrants([...toRevokeGrants, circle.id]);\n                          }\n                          setToProvideGrants(\n                            toProvideGrants.filter((circleId) => circleId !== circle.id)\n                          );\n                        }\n                      }}\n                      defaultChecked={currentCircleGrantIds.indexOf(circle.id) !== -1}\n                    />\n                    <label htmlFor={circle.id} className=\"ml-2\">\n                      {circle.name}\n                    </label>\n                  </div>\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-mx-2 py-3 sm:flex sm:flex-row-reverse\">\n            <ActionButton className=\"mx-2\" icon={'send'}>\n              {t('Save')}\n            </ActionButton>\n            <ActionButton className=\"mx-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default CircleMembershipDialog;\n","import { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport {\n  AccessGrant,\n  ConnectionInfo,\n  DriveGrant,\n} from '../../../provider/connections/CirlceDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport CircleMembershipDialog from '../../Dialog/CircleMembershipDialog/CircleMembershipDialog';\nimport Persons from '../../Icons/Persons/Persons';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport CircleMembershipView from '../../PermissionViews/CirclePermissionView/CirclePermissionView';\nimport DrivePermissionView from '../../PermissionViews/DrivePermissionView/DrivePermissionView';\nimport Section from '../../Sections/Section';\n\nconst ConnectionDetails = () => {\n  const { connectionKey } = useParams();\n  const navigate = useNavigate();\n  const {\n    fetch: { data: connectionInfo, isLoading: connectionInfoLoading },\n    disconnect: { mutate: disconnect, status: disconnectStatus },\n    acceptRequest: { mutate: acceptPending, status: acceptPendingStatus },\n    ignoreRequest: { mutate: ignoreRequest, status: ignoreRequestStatus },\n    revokeConnectionRequest: { mutate: revokeRequest, status: revokeRequestStatus },\n  } = useConnection({ dotYouId: connectionKey });\n\n  const [isEditPermissionActive, setIsEditPermissionActive] = useState(false);\n\n  if (connectionInfoLoading) {\n    <>Loading</>;\n  }\n\n  if (!connectionInfo) {\n    return <>No matching connection found</>;\n  }\n\n  const actions =\n    connectionInfo.status === 'Connected' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"my-auto ml-auto\"\n          onClick={() => {\n            setIsEditPermissionActive(true);\n          }}\n          state={disconnectStatus}\n        >\n          {t('Edit Access')}\n        </ActionButton>\n        <ActionButton\n          type=\"remove\"\n          className=\"my-auto ml-2\"\n          onClick={() => disconnect({})}\n          icon={'trash'}\n          state={disconnectStatus}\n          confirmOptions={{\n            title: `${t('Remove')} ${connectionKey}`,\n            buttonText: t('Remove'),\n            body: `${t('Are you sure you want to remove')} ${connectionKey} ${t(\n              'from your connections. They will lose all existing access.'\n            )}`,\n          }}\n        >\n          {t('Remove')}\n        </ActionButton>\n      </>\n    ) : connectionInfo.status === 'Pending' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"my-auto ml-auto\"\n          onClick={() => {\n            acceptPending({ senderDotYouId: connectionInfo.senderDotYouId });\n          }}\n          state={acceptPendingStatus}\n        >\n          {t('Accept Request')}\n        </ActionButton>\n        <ActionButton\n          type=\"secondary\"\n          className=\"my-auto ml-2\"\n          onClick={() => {\n            ignoreRequest(\n              { senderDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={ignoreRequestStatus}\n        >\n          {t('Ignore')}\n        </ActionButton>\n      </>\n    ) : connectionInfo.status === 'Sent' ? (\n      <>\n        <ActionButton\n          type=\"secondary\"\n          className=\"my-auto ml-2\"\n          onClick={() => {\n            revokeRequest(\n              { targetDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={revokeRequestStatus}\n        >\n          {t('Revoke')}\n        </ActionButton>\n      </>\n    ) : (\n      <></>\n    );\n\n  const activeConnection = connectionInfo as ConnectionInfo;\n\n  return (\n    <>\n      <PageMeta\n        icon={Persons}\n        title={`${connectionKey} (${connectionInfo.status})`}\n        actions={actions}\n        breadCrumbs={[\n          { href: '/owner/connections', title: 'Connections' },\n          { title: connectionKey },\n        ]}\n      />\n      {connectionInfo.status === 'Connected' ? (\n        <>\n          <section>\n            <p className=\"text-sm\">\n              {t('Connected since')}: {new Date(activeConnection.created).toLocaleDateString()}\n            </p>\n            <ConnectionPermissionViewer accessGrant={activeConnection.accessGrant} />\n          </section>\n          <CircleMembershipDialog\n            title={`${t('Edit Circle Membership for')} ${connectionKey}`}\n            isOpen={isEditPermissionActive}\n            dotYouId={connectionKey}\n            currentCircleGrants={activeConnection.accessGrant.circleGrants}\n            onCancel={() => {\n              setIsEditPermissionActive(false);\n            }}\n            onConfirm={() => {\n              setIsEditPermissionActive(false);\n            }}\n          />\n        </>\n      ) : connectionInfo.status === 'Pending' || connectionInfo.status === 'Sent' ? (\n        <>\n          <p className=\"mb-3 text-sm\">{connectionInfo.message}</p>\n        </>\n      ) : null}\n    </>\n  );\n};\n\nconst ConnectionPermissionViewer = ({ accessGrant }: { accessGrant: AccessGrant }) => {\n  const { data: circles } = useCircles().fetch;\n  const grantedCircles = circles?.filter((circle) =>\n    accessGrant.circleGrants.some((circleGrant) => circleGrant.circleId === circle.id)\n  );\n\n  const allDriveGrantsWithPermissionTree = grantedCircles?.reduce((prevVal, currVal) => {\n    return [\n      ...prevVal,\n      ...currVal.drivesGrants.map((driveGrant) => {\n        return { driveGrant: driveGrant, permissionTree: `${t('Via:')} ${currVal.name}` };\n      }),\n    ];\n  }, [] as { driveGrant: DriveGrant; permissionTree: string }[]);\n  return (\n    <>\n      <Section title={t('Member of the following circles')} isOpaqueBg={true}>\n        {!accessGrant.isRevoked ? (\n          <>\n            {grantedCircles?.map((grantedCircle) => (\n              <CircleMembershipView circleDef={grantedCircle} key={grantedCircle.id} />\n            ))}\n          </>\n        ) : null}\n      </Section>\n\n      <Section title={t('Access on the following drives')} isOpaqueBg={true}>\n        {allDriveGrantsWithPermissionTree?.length ? (\n          <>\n            {allDriveGrantsWithPermissionTree.map((grantsWithCircle) => {\n              return (\n                <DrivePermissionView\n                  key={`${grantsWithCircle.driveGrant.drive.alias}-${grantsWithCircle.driveGrant.drive.type}`}\n                  driveGrant={grantsWithCircle.driveGrant}\n                  permissionTree={grantsWithCircle.permissionTree}\n                  className=\"mb-6\"\n                />\n              );\n            })}\n          </>\n        ) : null}\n      </Section>\n    </>\n  );\n};\n\nexport default ConnectionDetails;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useConnection = ({ dotYouId }: { dotYouId?: string }) => {\n  const queryClient = useQueryClient();\n\n  const { getSharedSecret } = useAuth();\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n\n  const fetchSingle = async ({ dotYouId }: { dotYouId: string }) => {\n    if (!dotYouId) {\n      return;\n    }\n\n    const connectionInfo = await circleNetworkProvider.getConnectionInfo(dotYouId);\n    if (connectionInfo && connectionInfo.status !== 'None') {\n      return connectionInfo;\n    }\n\n    const pendingRequest = await circleNetworkRequestProvider.getPendingRequest(dotYouId);\n    if (pendingRequest) {\n      return pendingRequest;\n    }\n\n    const sentRequest = await circleNetworkRequestProvider.getSentRequest(dotYouId);\n    return sentRequest ?? connectionInfo;\n  };\n\n  const disconnect = async ({ connectionDotYouId }: { connectionDotYouId?: string }) => {\n    return await circleNetworkProvider.disconnectFromContact(connectionDotYouId ?? dotYouId);\n  };\n\n  const sendConnectionRequest = async ({\n    targetDotYouId,\n    message,\n    name,\n    circleIds,\n  }: {\n    targetDotYouId: string;\n    message: string;\n    name: string;\n    circleIds: string[];\n  }) => {\n    return await circleNetworkRequestProvider.sendRequest(targetDotYouId, message, name, circleIds);\n  };\n\n  const revokeConnectionRequest = async ({ targetDotYouId }: { targetDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deleteSentRequest(targetDotYouId);\n  };\n\n  const acceptRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.acceptConnectionRequest(senderDotYouId);\n  };\n\n  const ignoreRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deletePendingRequest(senderDotYouId);\n  };\n\n  return {\n    fetch: useQuery(['connectionInfo', dotYouId], () => fetchSingle({ dotYouId }), {\n      refetchOnWindowFocus: false,\n    }),\n\n    disconnect: useMutation(disconnect, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    sendConnectionRequest: useMutation(sendConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    revokeConnectionRequest: useMutation(revokeConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    acceptRequest: useMutation(acceptRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    ignoreRequest: useMutation(ignoreRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useConnection;\n"],"names":["driveGrant","permissionTree","className","drive","useDrive","targetDrive","fetch","data","title","to","targetDriveInfo","alias","type","name","getAccessFromPermissionNumber","permission","drivePermissionLevels","isOpen","currentCircleGrants","dotYouId","onConfirm","onCancel","target","usePortal","useCircles","circles","provideGrant","mutateAsync","revokeGrant","currentCircleGrantIds","map","grant","circleId","useState","toRevokeGrants","setToRevokeGrants","toProvideGrants","setToProvideGrants","dialog","DialogWrapper","onClose","onSubmit","e","preventDefault","Promise","all","circleToProvide","circleToRevoke","length","t","circle","index","Checkbox","value","id","onChange","checked","some","filter","defaultChecked","indexOf","htmlFor","ActionButton","icon","onClick","createPortal","ConnectionPermissionViewer","accessGrant","grantedCircles","circleGrants","circleGrant","allDriveGrantsWithPermissionTree","reduce","prevVal","currVal","drivesGrants","Section","isOpaqueBg","isRevoked","grantedCircle","circleDef","grantsWithCircle","DrivePermissionView","connectionKey","useParams","navigate","useNavigate","useConnection","connectionInfo","connectionInfoLoading","isLoading","disconnect","mutate","disconnectStatus","status","acceptRequest","acceptPending","acceptPendingStatus","ignoreRequest","ignoreRequestStatus","revokeConnectionRequest","revokeRequest","revokeRequestStatus","isEditPermissionActive","setIsEditPermissionActive","actions","state","confirmOptions","buttonText","body","senderDotYouId","onSuccess","targetDotYouId","activeConnection","PageMeta","Persons","breadCrumbs","href","Date","created","toLocaleDateString","message","queryClient","useQueryClient","getSharedSecret","useAuth","circleNetworkProvider","CircleNetworkProvider","circleNetworkRequestProvider","CircleNetworkRequestProvider","fetchSingle","getConnectionInfo","getPendingRequest","pendingRequest","getSentRequest","sentRequest","connectionDotYouId","disconnectFromContact","sendConnectionRequest","circleIds","sendRequest","deleteSentRequest","acceptConnectionRequest","deletePendingRequest","useQuery","refetchOnWindowFocus","useMutation","param","invalidateQueries","onError","ex","console","error"],"sourceRoot":""}