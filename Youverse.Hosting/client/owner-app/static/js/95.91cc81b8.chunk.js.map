{"version":3,"file":"static/js/95.91cc81b8.chunk.js","mappings":"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","sources":["components/Buttons/SaveStatus.tsx","components/Layout/PageMeta/PageMeta.tsx","provider/temp/Util.ts","provider/temp/connections/CircleNetworkRequestProvider.ts","provider/temp/connections/CircleNetworkProvider.ts","components/Templates/Connections/Connections.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { ReactNode } from 'react';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n}: {\n  title?: ReactNode;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n}) => {\n  return (\n    <section\n      className=\"-my-8 -mx-10 mb-10 border-b-2 border-gray-100 bg-slate-50 py-8\n    px-10 dark:border-gray-700 dark:bg-slate-800\"\n    >\n      <div className=\"flex flex-row\">\n        {title && <h1 className=\"mb-5 text-4xl dark:text-white\">{title}</h1>}\n        <div className=\"ml-auto \">\n          <div className=\"flex flex-row\">{actions}</div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","export const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { AcceptRequestHeader, ConnectionRequest, ConnectionRequestHeader } from './CirlceDataTypes';\nimport { PagedResult, PagingOptions } from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../../OwnerProviderBase';\nimport { stringify } from '../Util';\nimport { DotYouIdRequest } from '../TempTypes';\n\n//Handles making and reading requests to connect with others\nexport class CircleNetworkRequestProvider extends OwnerProviderBase {\n  private Root = '/circles/requests';\n  private SentPathRoot: string = this.Root + '/sent';\n  private PendingPathRoot: string = this.Root + '/pending';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async getPendingRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getPendingRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/single';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          return null;\n        }\n\n        super.handleErrorResponse(err);\n      });\n  }\n\n  async getSentRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getSentRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/single';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          return null;\n        }\n        super.handleErrorResponse(err);\n      });\n  }\n\n  async acceptConnectionRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/accept/';\n\n    //todo: build from drives a UI selection of drives\n    // let drive: DriveGrantRequest = {\n    //     drive: {\n    //         alias: \"\",\n    //         type: \"\"\n    //     },\n    //     permission: DrivePermissions.None\n    // }\n\n    const header: AcceptRequestHeader = {\n      sender: dotYouId,\n      drives: [],\n      permissions: null,\n    };\n\n    return client\n      .post(url, header)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deletePendingRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/delete';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deleteSentRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/delete';\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async sendRequest(dotYouId: string, message: string): Promise<boolean> {\n    const url = this.Root + '/sendrequest';\n    const header: ConnectionRequestHeader = {\n      recipient: dotYouId,\n      message: message,\n    };\n\n    const client = super.createAxiosClient();\n    return client\n      .post(url, header)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n}\n","import { ConnectionInfo, DotYouProfile } from './CirlceDataTypes';\nimport { PagedResult, PagingOptions } from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../../OwnerProviderBase';\nimport { stringify } from '../Util';\nimport { DotYouIdRequest } from '../TempTypes';\n\n//Handles management of established connections\nexport class CircleNetworkProvider extends OwnerProviderBase {\n  private Root = '/circles/connections';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async blockDotYouId(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.Root + '/block';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async disconnectFromContact(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.Root + '/disconnect';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getConnections(params: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.Root + '/connected?' + stringify(params);\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getBlockedConnections(params: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.Root + '/blocked?' + stringify(params);\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  getConnectionInfo(dotYouId: string): Promise<ConnectionInfo> {\n    const client = super.createAxiosClient();\n    const url = this.Root + '/status';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n}\n","// import {\n//   ApiType,\n//   AttributeDefinitions,\n//   BuiltInProfiles,\n//   Client,\n// }\n// from '@youfoundation/transit-lib';\n\nimport useAuth from '../../../hooks/auth/useAuth';\nimport { CircleNetworkRequestProvider } from '../../../provider/temp/connections/CircleNetworkRequestProvider';\nimport { CircleNetworkProvider } from '../../../provider/temp/connections/CircleNetworkProvider';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\n// import { ReactNode } from 'react';\n// import ActionButton from '../../Buttons/ActionButton';\n\nconst Connections = () => {\n  const { getSharedSecret } = useAuth();\n\n  const sendConnectionRequests = async () => {\n    // if frodo - send requests to sam (and others in the future)\n\n    const isLocalDemo = window.location.hostname.toLowerCase().endsWith('.digital');\n    const isFrodo =\n      window.location.hostname == 'frodo.digital' || window.location.hostname == 'frodobaggins.me';\n    const isSam =\n      window.location.hostname == 'samwise.digital' ||\n      window.location.hostname == 'samwisegamgee.me';\n\n    let intendedRecipient = '';\n\n    if (isLocalDemo) {\n      intendedRecipient = isFrodo ? 'samwise.digital' : 'frodo.digital';\n    } else {\n      intendedRecipient = isFrodo ? 'samwisegamgee.me' : 'frodobaggins.me';\n    }\n\n    console.log('intended recipient:', intendedRecipient);\n\n    //accept all incoming requests\n    const requestProvider = new CircleNetworkRequestProvider(getSharedSecret());\n    const circleProvider = new CircleNetworkProvider(getSharedSecret());\n\n    const connectionInfo = await circleProvider.getConnectionInfo(intendedRecipient);\n    console.log('connection status', connectionInfo?.status ?? 'None');\n\n    if (connectionInfo == null || connectionInfo.status != 'Connected') {\n      const pendingRequest = await requestProvider.getPendingRequest(intendedRecipient);\n      console.log('has pending request', pendingRequest != null);\n\n      if (pendingRequest) {\n        console.log('accepting the pending request');\n\n        //TODO: need to specify the chat drive?\n        await requestProvider.acceptConnectionRequest(intendedRecipient);\n        //validate we're connected\n        const isConnectedInfo = await circleProvider.getConnectionInfo(intendedRecipient);\n\n        console.log('connection status', connectionInfo?.status ?? 'None');\n\n        if (isConnectedInfo == null) {\n          throw 'Failed to connect to ' + intendedRecipient;\n        }\n      } else {\n        const sentRequest = await requestProvider.getSentRequest(intendedRecipient);\n        if (null == sentRequest) {\n          console.log('sending a new request');\n          await requestProvider.sendRequest(intendedRecipient, 'Demo data setup');\n\n          //TODO: render this in the screen so the user can just click thru\n          alert(\n            `Connection request was sent to ${intendedRecipient}.  You must go to https://${intendedRecipient} and approve their connection`\n          );\n        } else {\n          alert(\n            `There is a pending connection request to ${intendedRecipient} from you.  You must go to https://${intendedRecipient} and approve their connection`\n          );\n        }\n      }\n    }\n  };\n  return (\n    <section>\n      <PageMeta title={'Connections'} />\n      <div className=\"container mx-auto\">\n        <div className=\"flex flex-wrap\">\n          <button\n            onClick={sendConnectionRequests}\n            className=\"block w-1/3 rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\"\n          >\n            Send connection request\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\n//\n// const Connections = () => {\n//   return (\n//     <div>\n//       <h1 className=\"text-4xl\">Connections</h1>\n//\n//       <section className=\"border-b-[1px] border-b-slate-200 py-10\">\n//         <h2 className=\"mb-5 text-xl\">Connection requests</h2>\n//         <div className=\"-m-1 flex flex-row flex-wrap\">\n//           <PersonRequest className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonRequest className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonRequest className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonRequest className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonRequest className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonRequest className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//         </div>\n//       </section>\n//\n//       <section className=\"border-b-[1px] border-b-slate-200 py-10\">\n//         <h2 className=\"mb-5 text-xl\">Your connections</h2>\n//         <div className=\"-m-1 flex flex-row flex-wrap\">\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//           <PersonCurrent className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n//         </div>\n//       </section>\n//     </div>\n//   );\n// };\n//\n// const PersonRequest = ({ className }: { className: string }) => {\n//   return (\n//     <PersonCard className={className}>\n//       <ActionButton type=\"primary\" className=\"mb-2 w-full\">\n//         Confirm\n//       </ActionButton>\n//       <ActionButton type=\"secondary\" className=\"mb-2 w-full\">\n//         Ignore\n//       </ActionButton>\n//     </PersonCard>\n//   );\n// };\n//\n// const PersonCurrent = ({ className }: { className: string }) => {\n//   return (\n//     <PersonCard className={className}>\n//       <ActionButton type=\"secondary\" className=\"w-full\">\n//         Remove\n//       </ActionButton>\n//     </PersonCard>\n//   );\n// };\n//\n// const PersonCard = ({ className, children }: { className: string; children: ReactNode }) => {\n//   return (\n//     <div className={className}>\n//       <div\n//         className={`h-full rounded-md border-[1px] border-gray-200 border-opacity-60 bg-white transition-colors dark:border-gray-800 dark:bg-gray-800`}\n//       >\n//         <div className=\"aspect-square\">\n//           <img src=\"https://placehold.co/200\" className=\"h-full w-full\" />\n//         </div>\n//         <div className=\"p-2\">\n//           <h2 className=\"font-thiner mb-6 dark:text-white\">Samwise Gamgee</h2>\n//           {children}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\nexport default Connections;\n"],"names":["className","state","useState","lastSave","setLastSave","Date","now","setNow","useEffect","timer","setTimeout","clearTimeout","diff","getTime","text","toLocaleString","title","actions","saveStatus","stringify","obj","Object","keys","map","key","join","CircleNetworkRequestProvider","sharedSecret","Root","SentPathRoot","PendingPathRoot","params","client","url","this","get","then","response","data","catch","dotYouId","post","err","status","header","sender","drives","permissions","message","recipient","OwnerProviderBase","CircleNetworkProvider","getSharedSecret","useAuth","sendConnectionRequests","isLocalDemo","window","location","hostname","toLowerCase","endsWith","isFrodo","intendedRecipient","console","log","requestProvider","circleProvider","getConnectionInfo","connectionInfo","getPendingRequest","pendingRequest","acceptConnectionRequest","isConnectedInfo","getSentRequest","sendRequest","alert","PageMeta","onClick"],"sourceRoot":""}