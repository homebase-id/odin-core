{"version":3,"file":"static/js/440.70f42d5e.chunk.js","mappings":"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","sources":["components/PermissionViews/DrivePermissionView/DrivePermissionView.tsx","components/Dialog/CircleMembershipDialog/CircleMembershipDialog.tsx","components/Templates/ConnectionDetails/ConnectionDetails.tsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useDrive from '../../../hooks/drive/useDrive';\nimport { DriveGrant } from '../../../provider/connections/CircleDataTypes';\nimport { drivePermissionLevels } from '../../../provider/permission/permissionLevels';\nimport Arrow from '../../Icons/Arrow/Arrow';\nimport HardDrive from '../../Icons/HardDrive/HardDrive';\nimport LoadingParagraph from '../../Loaders/LoadingParagraph/LoadingParagraph';\nimport { getAccessFromPermissionNumber } from '../../Templates/DemoData/helpers';\n\nconst DrivePermissionView = ({\n  driveGrant,\n  permissionTree,\n  className,\n}: {\n  driveGrant: DriveGrant;\n  permissionTree?: string;\n  className?: string;\n}) => {\n  const { data: drive, isLoading } = useDrive({ targetDrive: driveGrant.permissionedDrive.drive }).fetch;\n\n  if (isLoading) {\n    return <LoadingParagraph className={`h-4 max-w-xs ${className}`} />;\n  }\n\n  return (\n    <div\n      key={`${driveGrant?.permissionedDrive?.drive?.alias}-${driveGrant?.permissionedDrive.drive?.type}`}\n      className={`flex flex-row ${className}`}\n      title={permissionTree}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"flex flex-row hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`leading-none ${!permissionTree ? 'my-auto' : ''}`}>\n            {drive?.name}:{' '}\n            {\n              getAccessFromPermissionNumber(\n                driveGrant?.permissionedDrive.permission,\n                drivePermissionLevels\n              ).name\n            }\n          </p>\n          {permissionTree && (\n            <small className=\"\">\n              {t('Via')} {permissionTree}\n            </small>\n          )}\n        </div>\n        <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n      </Link>\n    </div>\n  );\n};\n\nexport default DrivePermissionView;\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircle from '../../../hooks/circle/useCircle';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport { CircleGrant } from '../../../provider/connections/CircleDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Checkbox from '../../Form/Checkbox';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst CircleMembershipDialog = ({\n  title,\n  isOpen,\n\n  currentCircleGrants,\n  dotYouId,\n\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  isOpen: boolean;\n\n  currentCircleGrants: CircleGrant[];\n  dotYouId: string;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  const { data: circles } = useCircles().fetch;\n  const {\n    provideGrant: { mutateAsync: provideGrant },\n    revokeGrant: { mutateAsync: revokeGrant },\n  } = useCircle({});\n  const currentCircleGrantIds = currentCircleGrants.map((grant) => grant.circleId);\n\n  const [toRevokeGrants, setToRevokeGrants] = useState<string[]>([]);\n  const [toProvideGrants, setToProvideGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            await Promise.all(\n              toProvideGrants.map(async (circleToProvide) => {\n                return provideGrant({ circleId: circleToProvide, dotYouId: dotYouId });\n              })\n            );\n\n            await Promise.all(\n              toRevokeGrants.map(async (circleToRevoke) => {\n                return revokeGrant({ circleId: circleToRevoke, dotYouId: dotYouId });\n              })\n            );\n\n            onConfirm();\n          }}\n        >\n          {circles.length ? (\n            <>\n              <h2 className=\"mb-2 text-lg\">{t('Member of')}:</h2>\n\n              {circles.map((circle, index) => {\n                return (\n                  <div key={circle.id ?? index} className=\"mb-2\">\n                    <Checkbox\n                      value={circle.id}\n                      id={circle.id}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          // If grant wasn't there, add to provide\n                          if (!currentCircleGrantIds.some((grant) => grant === circle.id)) {\n                            setToProvideGrants([...toProvideGrants, circle.id]);\n                          }\n                          setToRevokeGrants(\n                            toRevokeGrants.filter((circleId) => circleId !== circle.id)\n                          );\n                        } else {\n                          // If grant was there, add to revoke\n                          if (currentCircleGrantIds.some((grant) => grant === circle.id)) {\n                            setToRevokeGrants([...toRevokeGrants, circle.id]);\n                          }\n                          setToProvideGrants(\n                            toProvideGrants.filter((circleId) => circleId !== circle.id)\n                          );\n                        }\n                      }}\n                      defaultChecked={currentCircleGrantIds.indexOf(circle.id) !== -1}\n                    />\n                    <label htmlFor={circle.id} className=\"ml-2\">\n                      {circle.name}\n                    </label>\n                  </div>\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-m-2 flex flex-row-reverse py-3\">\n            <ActionButton className=\"m-2\" icon={'send'}>\n              {t('Save')}\n            </ActionButton>\n            <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default CircleMembershipDialog;\n","import { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport {\n  AccessGrant,\n  ConnectionInfo,\n  DriveGrant,\n} from '../../../provider/connections/CircleDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport CircleMembershipDialog from '../../Dialog/CircleMembershipDialog/CircleMembershipDialog';\nimport IncomingConnectionDialog from '../../Dialog/ConnectionDialogs/IncomingConnectionDialog';\nimport Persons from '../../Icons/Persons/Persons';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport LoadingDetailPage from '../../Loaders/LoadingDetailPage/LoadingDetailPage';\nimport LoadingParagraph from '../../Loaders/LoadingParagraph/LoadingParagraph';\nimport CircleMembershipView from '../../PermissionViews/CirclePermissionView/CirclePermissionView';\nimport DrivePermissionView from '../../PermissionViews/DrivePermissionView/DrivePermissionView';\nimport Section from '../../Sections/Section';\n\nconst ConnectionDetails = () => {\n  const { connectionKey } = useParams();\n  const navigate = useNavigate();\n  const {\n    fetch: { data: connectionInfo, isLoading: connectionInfoLoading },\n    disconnect: { mutate: disconnect, status: disconnectStatus },\n    acceptRequest: { mutate: acceptPending, status: acceptPendingStatus },\n    ignoreRequest: { mutate: ignoreRequest, status: ignoreRequestStatus },\n    revokeConnectionRequest: { mutate: revokeRequest, status: revokeRequestStatus },\n  } = useConnection({ dotYouId: connectionKey });\n\n  const [isAcceptDialogOpen, setIsAcceptDialogOpen] = useState(false);\n\n  const [isEditPermissionActive, setIsEditPermissionActive] = useState(false);\n\n  if (connectionInfoLoading) {\n    return <LoadingDetailPage />;\n  }\n\n  if (!connectionInfo) {\n    return <>No matching connection found</>;\n  }\n\n  const actions =\n    connectionInfo.status === 'Connected' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"m-2\"\n          onClick={() => {\n            setIsEditPermissionActive(true);\n          }}\n          state={disconnectStatus}\n        >\n          {t('Edit Access')}\n        </ActionButton>\n        <ActionButton\n          type=\"remove\"\n          className=\"m-2\"\n          onClick={() => disconnect({})}\n          icon={'trash'}\n          state={disconnectStatus}\n          confirmOptions={{\n            title: `${t('Remove')} ${connectionKey}`,\n            buttonText: t('Remove'),\n            body: `${t('Are you sure you want to remove')} ${connectionKey} ${t(\n              'from your connections. They will lose all existing access.'\n            )}`,\n          }}\n        >\n          {t('Remove')}\n        </ActionButton>\n      </>\n    ) : connectionInfo.status === 'Pending' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"m-2\"\n          onClick={() => {\n            setIsAcceptDialogOpen(true);\n          }}\n          state={acceptPendingStatus}\n        >\n          {t('Accept Request')}...\n        </ActionButton>\n        <ActionButton\n          type=\"secondary\"\n          className=\"m-2\"\n          onClick={() => {\n            ignoreRequest(\n              { senderDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={ignoreRequestStatus}\n        >\n          {t('Ignore')}\n        </ActionButton>\n        <IncomingConnectionDialog\n          isOpen={isAcceptDialogOpen}\n          title={t('Accept connection request')}\n          confirmText={t('Accept and give access')}\n          onConfirm={(circleGrants: string[]) => {\n            acceptPending({\n              senderDotYouId: connectionInfo.senderDotYouId,\n              circleIds: circleGrants,\n            });\n            setIsAcceptDialogOpen(false);\n          }}\n          onCancel={() => {\n            setIsAcceptDialogOpen(false);\n          }}\n        >{`${connectionInfo.senderDotYouId} ${t(\n          'has sent you a connection request'\n        )}`}</IncomingConnectionDialog>\n      </>\n    ) : connectionInfo.status === 'Sent' ? (\n      <>\n        <ActionButton\n          type=\"secondary\"\n          className=\"m-2\"\n          onClick={() => {\n            revokeRequest(\n              { targetDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={revokeRequestStatus}\n        >\n          {t('Revoke')}\n        </ActionButton>\n      </>\n    ) : (\n      <></>\n    );\n\n  const activeConnection = connectionInfo as ConnectionInfo;\n\n  return (\n    <>\n      <PageMeta\n        icon={Persons}\n        title={`${connectionKey} (${connectionInfo.status})`}\n        actions={actions}\n        breadCrumbs={[\n          { href: '/owner/connections', title: 'Connections' },\n          { title: connectionKey },\n        ]}\n      />\n      {connectionInfo.status === 'Connected' ? (\n        <>\n          <section>\n            <p className=\"text-sm\">\n              {t('Connected since')}: {new Date(activeConnection.created).toLocaleDateString()}\n            </p>\n            <ConnectionPermissionViewer accessGrant={activeConnection.accessGrant} />\n          </section>\n          <CircleMembershipDialog\n            title={`${t('Edit Circle Membership for')} ${connectionKey}`}\n            isOpen={isEditPermissionActive}\n            dotYouId={connectionKey}\n            currentCircleGrants={activeConnection.accessGrant.circleGrants}\n            onCancel={() => {\n              setIsEditPermissionActive(false);\n            }}\n            onConfirm={() => {\n              setIsEditPermissionActive(false);\n            }}\n          />\n        </>\n      ) : connectionInfo.status === 'Pending' || connectionInfo.status === 'Sent' ? (\n        <>\n          <p className=\"mb-3 text-sm\">{connectionInfo.message}</p>\n        </>\n      ) : null}\n    </>\n  );\n};\n\nconst ConnectionPermissionViewer = ({ accessGrant }: { accessGrant: AccessGrant }) => {\n  const { data: circles, isLoading: circlesLoading } = useCircles().fetch;\n\n  const grantedCircles = circles?.filter((circle) =>\n    accessGrant.circleGrants.some((circleGrant) => circleGrant.circleId === circle.id)\n  );\n\n  const grantedDrives = grantedCircles?.flatMap((circle) => circle.driveGrants ?? []);\n  const uniqueDrivesWithHighestPermission = grantedDrives?.reduce((prevValue, grantedDrive) => {\n    const existingGrantIndex = prevValue.findIndex(\n      (driveGrant) =>\n        driveGrant.permissionedDrive.drive.alias === grantedDrive.permissionedDrive.drive.alias &&\n        driveGrant.permissionedDrive.drive.type === grantedDrive.permissionedDrive.drive.type\n    );\n\n    if (existingGrantIndex !== -1) {\n      prevValue[existingGrantIndex].permissionedDrive.permission = Math.max(\n        prevValue[existingGrantIndex].permissionedDrive.permission,\n        grantedDrive.permissionedDrive.permission\n      );\n      return prevValue;\n    } else {\n      return [...prevValue, grantedDrive];\n    }\n  }, [] as DriveGrant[]);\n\n  const driveGrantsWithPermissionTree = uniqueDrivesWithHighestPermission?.map((drive) => {\n    const viaCircles = grantedCircles.filter((circle) =>\n      circle.driveGrants?.some(\n        (driveGrant) =>\n          driveGrant.permissionedDrive.drive.alias === drive.permissionedDrive.drive.alias &&\n          driveGrant.permissionedDrive.drive.type === drive.permissionedDrive.drive.type\n      )\n    );\n\n    const circleNames = viaCircles.map((circle) => circle.name);\n\n    return { driveGrant: drive, permissionTree: circleNames.join(', ') };\n  });\n  return (\n    <>\n      <Section title={t('Member of the following circles')} isOpaqueBg={true}>\n        {circlesLoading ? (\n          <>\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n          </>\n        ) : (\n          <>\n            {!accessGrant.isRevoked ? (\n              <>\n                {grantedCircles?.map((grantedCircle) => (\n                  <CircleMembershipView circleDef={grantedCircle} key={grantedCircle.id} />\n                ))}\n              </>\n            ) : null}\n          </>\n        )}\n      </Section>\n\n      {driveGrantsWithPermissionTree?.length ? (\n        <Section title={t('Access on the following drives')} isOpaqueBg={true}>\n          {driveGrantsWithPermissionTree.map((grantsWithCircle) => {\n            return (\n              <DrivePermissionView\n                key={`${grantsWithCircle.driveGrant.permissionedDrive.drive.alias}-${grantsWithCircle.driveGrant.permissionedDrive.drive.type}`}\n                driveGrant={grantsWithCircle.driveGrant}\n                permissionTree={grantsWithCircle.permissionTree}\n                className=\"mb-6\"\n              />\n            );\n          })}\n        </Section>\n      ) : null}\n    </>\n  );\n};\n\nexport default ConnectionDetails;\n"],"names":["driveGrant","permissionTree","className","useDrive","targetDrive","permissionedDrive","drive","fetch","data","isLoading","title","to","targetDriveInfo","alias","type","name","getAccessFromPermissionNumber","permission","drivePermissionLevels","t","isOpen","currentCircleGrants","dotYouId","onConfirm","onCancel","target","usePortal","circles","useCircles","useCircle","provideGrant","mutateAsync","revokeGrant","currentCircleGrantIds","map","grant","circleId","useState","toRevokeGrants","setToRevokeGrants","toProvideGrants","setToProvideGrants","dialog","DialogWrapper","onClose","onSubmit","e","preventDefault","Promise","all","circleToProvide","circleToRevoke","length","circle","index","Checkbox","value","id","onChange","checked","some","filter","defaultChecked","indexOf","htmlFor","ActionButton","icon","onClick","createPortal","ConnectionPermissionViewer","accessGrant","circlesLoading","grantedCircles","circleGrants","circleGrant","grantedDrives","flatMap","driveGrants","uniqueDrivesWithHighestPermission","reduce","prevValue","grantedDrive","existingGrantIndex","findIndex","Math","max","driveGrantsWithPermissionTree","circleNames","join","Section","isOpaqueBg","LoadingParagraph","isRevoked","grantedCircle","circleDef","grantsWithCircle","DrivePermissionView","connectionKey","useParams","navigate","useNavigate","useConnection","connectionInfo","connectionInfoLoading","disconnect","mutate","disconnectStatus","status","acceptRequest","acceptPending","acceptPendingStatus","ignoreRequest","ignoreRequestStatus","revokeConnectionRequest","revokeRequest","revokeRequestStatus","isAcceptDialogOpen","setIsAcceptDialogOpen","isEditPermissionActive","setIsEditPermissionActive","LoadingDetailPage","actions","state","confirmOptions","buttonText","body","senderDotYouId","onSuccess","IncomingConnectionDialog","confirmText","circleIds","targetDotYouId","activeConnection","PageMeta","Persons","breadCrumbs","href","Date","created","toLocaleDateString","message"],"sourceRoot":""}