{"version":3,"file":"static/js/485.a445c160.chunk.js","mappings":"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","sources":["components/Connection/PersonCard/PersonCard.tsx","components/Sections/CollapsableSection.tsx","components/Connection/PersonIncomingRequest/PersonIncomingRequest.tsx","components/Connection/PersonOutgoingRequest/PersonOutgoingRequest.tsx","components/Connection/PersonActive/PersonActive.tsx","components/Dialog/ConnectionDialog/ConnectionDialog.tsx","components/Templates/Connections/Connections.tsx","hooks/connection/useConnection.ts","hooks/connections/useConnections.ts"],"sourcesContent":["import { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PersonCard = ({\n  name,\n  href,\n  className,\n  children,\n  onClick,\n}: {\n  name: string;\n  href?: string;\n  className: string;\n  children: ReactNode;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n}) => {\n  const Wrapper = ({ children }) => (href ? <Link to={href}>{children}</Link> : <>{children}</>);\n\n  return (\n    <div className={className}>\n      <Wrapper>\n        <div\n          className={`h-full rounded-md border-[1px] border-gray-200 border-opacity-60 bg-white transition-colors dark:border-gray-800 dark:bg-gray-800`}\n          onClick={onClick}\n        >\n          <div className=\"aspect-square\">\n            <img src=\"https://placehold.co/200\" className=\"h-full w-full\" />\n          </div>\n          <div className=\"p-2\">\n            <h2 className=\"font-thiner mb-6 dark:text-white\">{name}</h2>\n            {children}\n          </div>\n        </div>\n      </Wrapper>\n    </div>\n  );\n};\n\nexport default PersonCard;\n","import { ReactNode, useEffect, useRef, useState } from 'react';\nimport Arrow from '../Icons/Arrow/Arrow';\n\nconst CollapsableSection = ({\n  isOpenByDefault = true,\n  title,\n  className,\n  children,\n  isOpaqueBg = false,\n  isBorderLess = false,\n}: {\n  isOpenByDefault?: boolean;\n  title: ReactNode;\n  className?: string;\n  children: ReactNode;\n  isOpaqueBg?: boolean;\n  isBorderLess?: boolean;\n}) => {\n  const [isOpen, setIsOpen] = useState(isOpenByDefault);\n  const sectionContainerRef = useRef<HTMLDivElement>(null);\n  const height = useRef(0);\n\n  useEffect(() => {\n    if (isOpenByDefault && sectionContainerRef.current) {\n      height.current = sectionContainerRef.current.clientHeight;\n    }\n    // Todo apply FLIP approach (when not open by default) to calculate the to-be height when we can't use the height of the open state\n  }, [isOpen]);\n\n  return (\n    <section\n      className={`my-5 rounded-md ${\n        isOpaqueBg\n          ? isBorderLess\n            ? ''\n            : 'rounded-lg border-[1px] border-gray-200 border-opacity-80 px-5 dark:border-gray-700'\n          : 'bg-slate-50 px-5 dark:bg-slate-800 dark:text-slate-300'\n      } ${className}`}\n    >\n      <div\n        className={`relative cursor-pointer border-b-[1px] border-slate-200 py-5 transition-all duration-300 ${\n          isOpen ? 'border-opacity-100' : 'border-opacity-0'\n        }`}\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <h3 className=\"text-2xl dark:text-white\">{title}</h3>\n        <button className=\"absolute top-0 right-0 bottom-0\">\n          <Arrow\n            className={`h-4 w-4 transition-transform duration-300 ${\n              isOpen ? 'rotate-90' : '-rotate-90'\n            }`}\n          />\n        </button>\n      </div>\n      <div\n        className={`overflow-hidden transition-all duration-300 `}\n        style={{ maxHeight: `${isOpen ? (height.current ? height.current : 2000) : 0}px` }}\n        ref={sectionContainerRef}\n      >\n        <div className=\"py-5 \">{children}</div>\n      </div>\n    </section>\n  );\n};\n\nexport default CollapsableSection;\n","import { ReactNode } from 'react';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonIncomingRequest = ({\n  senderDotYouId,\n  children,\n  className,\n}: {\n  senderDotYouId: string;\n  children?: ReactNode;\n  className: string;\n}) => {\n  const {\n    acceptRequest: { mutate: acceptPending, status: acceptPendingStatus },\n    ignoreRequest: { mutate: ignoreRequest, status: ignoreRequestStatus },\n  } = useConnection({});\n\n  return (\n    <PersonCard\n      className={className}\n      name={senderDotYouId}\n      href={(senderDotYouId && `/owner/connections/${senderDotYouId}`) ?? undefined}\n    >\n      {children}\n      <ActionButton\n        type=\"primary\"\n        className=\"mb-2 w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          acceptPending({ senderDotYouId: senderDotYouId });\n          return false;\n        }}\n        state={acceptPendingStatus}\n      >\n        Confirm\n      </ActionButton>\n      <ActionButton\n        type=\"secondary\"\n        className=\"mb-2 w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          ignoreRequest({ senderDotYouId: senderDotYouId });\n          return false;\n        }}\n        state={ignoreRequestStatus}\n      >\n        Ignore\n      </ActionButton>\n    </PersonCard>\n  );\n};\n\nexport default PersonIncomingRequest;\n","import useConnection from '../../../hooks/connection/useConnection';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonOutgoingRequest = ({\n  recipientDotYouId,\n  className,\n}: {\n  recipientDotYouId: string;\n  className: string;\n}) => {\n  const { mutate: revokeRequest, status: revokeRequestStatus } = useConnection(\n    {}\n  ).revokeConnectionRequest;\n\n  return (\n    <PersonCard\n      className={className}\n      name={recipientDotYouId}\n      href={(recipientDotYouId && `/owner/connections/${recipientDotYouId}`) ?? undefined}\n    >\n      <ActionButton\n        type=\"secondary\"\n        className=\"mb-2 w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          revokeRequest({ targetDotYouId: recipientDotYouId });\n          return false;\n        }}\n        state={revokeRequestStatus}\n      >\n        Cancel\n      </ActionButton>\n    </PersonCard>\n  );\n};\n\nexport default PersonOutgoingRequest;\n","import { t } from '../../../helpers/i18n/dictionary';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport { DotYouProfile } from '../../../provider/connections/CirlceDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonActive = ({\n  dotYouProfile,\n  className,\n}: {\n  dotYouProfile: DotYouProfile;\n  className: string;\n}) => {\n  const { mutate: disconnect, status: disconnectStatus } = useConnection({}).disconnect;\n\n  return (\n    <PersonCard\n      className={className}\n      name={\n        dotYouProfile.givenName && dotYouProfile.surName\n          ? `${dotYouProfile.givenName} ${dotYouProfile.surName}`\n          : dotYouProfile.dotYouId\n      }\n      href={(dotYouProfile.dotYouId && `/owner/connections/${dotYouProfile.dotYouId}`) ?? undefined}\n    >\n      <ActionButton\n        type=\"secondary\"\n        className=\"w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          disconnect({ connectionDotYouId: dotYouProfile.dotYouId });\n        }}\n        state={disconnectStatus}\n        confirmOptions={{\n          title: `${t('Remove')} ${dotYouProfile.dotYouId}`,\n          buttonText: t('Remove'),\n          body: `${t('Are you sure you want to remove')} ${dotYouProfile.dotYouId} ${t(\n            'from your connections. They will lose all existing access.'\n          )}`,\n        }}\n      >\n        Remove\n      </ActionButton>\n    </PersonCard>\n  );\n};\n\nexport default PersonActive;\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Checkbox from '../../Form/Checkbox';\nimport Input from '../../Form/Input';\nimport Textarea from '../../Form/Textarea';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst ConnectionDialog = ({\n  title,\n  isOpen,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const {\n    mutate: sendConnectionRequest,\n    status: sendConnectionRequestStatus,\n    reset: resetConnectionRequest,\n  } = useConnection({}).sendConnectionRequest;\n  const { data: circles } = useCircles().fetch;\n\n  const [connectionTarget, setConnectionTarget] = useState('samwise.digital');\n  const [message, setMessage] = useState('');\n  const [name, setName] = useState('Frodo');\n  const [circleGrants, setCircleGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            sendConnectionRequest(\n              {\n                message: message,\n                name: name,\n                targetDotYouId: connectionTarget,\n                circleIds: circleGrants,\n              },\n              {\n                onSuccess: () => {\n                  resetConnectionRequest();\n                  setConnectionTarget('');\n                  setMessage('');\n                  setCircleGrants([]);\n\n                  onConfirm();\n                },\n              }\n            );\n          }}\n        >\n          <div className=\"mb-5\">\n            <label htmlFor=\"dotyouid\">Recipient (dot you id)</label>\n            <Input\n              id=\"dotyouid\"\n              name=\"dotyouid\"\n              onChange={(e) => {\n                setConnectionTarget(e.target.value);\n              }}\n              defaultValue={connectionTarget}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"dotyouid\">From:</label>\n            <Input\n              id=\"dotyouid\"\n              name=\"dotyouid\"\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n              defaultValue={name}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"message\">{t('Message')}</label>\n            <Textarea\n              id=\"message\"\n              name=\"message\"\n              onChange={(e) => {\n                setMessage(e.target.value);\n              }}\n              required\n            />\n          </div>\n\n          {circles.length ? (\n            <>\n              <h2 className=\"mb-2 text-lg\">Add as member to:</h2>\n\n              {circles.map((circle, index) => {\n                return (\n                  <div key={circle.id ?? index} className=\"mb-2\">\n                    <Checkbox\n                      value={circle.id}\n                      id={circle.id}\n                      onChange={(e) => {\n                        const newCircleGrants = [...circleGrants];\n                        if (e.target.checked) {\n                          newCircleGrants.push(e.target.value);\n                          setCircleGrants(newCircleGrants);\n                        } else {\n                          setCircleGrants(\n                            newCircleGrants.filter((circleId) => circleId !== e.target.value)\n                          );\n                        }\n                      }}\n                    />\n                    <label htmlFor={circle.id} className=\"ml-2 cursor-pointer\">\n                      {circle.name}\n                    </label>\n                  </div>\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-mx-2 py-3 sm:flex sm:flex-row-reverse\">\n            <ActionButton className=\"mx-2\" state={sendConnectionRequestStatus} icon={'send'}>\n              {t('Send')}\n            </ActionButton>\n            <ActionButton className=\"mx-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default ConnectionDialog;\n","import PageMeta from '../../Layout/PageMeta/PageMeta';\nimport useConnections from '../../../hooks/connections/useConnections';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonIncomingRequest from '../../Connection/PersonIncomingRequest/PersonIncomingRequest';\nimport PersonOutgoingRequest from '../../Connection/PersonOutgoingRequest/PersonOutgoingRequest';\nimport PersonActive from '../../Connection/PersonActive/PersonActive';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Section from '../../Sections/Section';\nimport CollapsableSection from '../../Sections/CollapsableSection';\nimport ConnectionDialog from '../../Dialog/ConnectionDialog/ConnectionDialog';\nimport { useState } from 'react';\nimport Persons from '../../Icons/Persons/Persons';\n\nconst Connections = () => {\n  const {\n    fetchPending: { data: pendingConnections, isLoading: pendingConnectionsLoading },\n    fetchActive: { data: activeConnections, isLoading: activeConnectionsLoading },\n    fetchSent: { data: sentRequests, isLoading: sentRequestsLoading },\n  } = useConnections();\n\n  const [isSentConnectionOpen, setIsSentConnectionOpen] = useState(false);\n\n  return (\n    <>\n      <section>\n        <PageMeta\n          icon={Persons}\n          title={'Connections'}\n          actions={\n            <>\n              <ActionButton onClick={() => setIsSentConnectionOpen(true)} icon={'plus'}>\n                {t('Send request')}\n              </ActionButton>\n            </>\n          }\n        />\n\n        {!pendingConnectionsLoading && pendingConnections?.length ? (\n          <Section isOpaqueBg={true} isBorderLess={true} title={t('Connection requests')}>\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {pendingConnections?.map((pendingConnection) => (\n                <PersonIncomingRequest\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  senderDotYouId={pendingConnection.senderDotYouId}\n                  key={pendingConnection.senderDotYouId}\n                >\n                  <div className=\"-mt-3\">\n                    <p>\n                      {t('From:')} {pendingConnection.name}\n                    </p>\n                    <p className=\"mb-3 text-sm\">{pendingConnection.message}</p>\n                  </div>\n                </PersonIncomingRequest>\n              ))}\n            </div>\n          </Section>\n        ) : null}\n\n        {!activeConnectionsLoading && activeConnections?.length ? (\n          <Section isOpaqueBg={true} isBorderLess={true} title={t('Your Connections')}>\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {activeConnections?.map((activeConnection) => (\n                <PersonActive\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  dotYouProfile={activeConnection}\n                  key={activeConnection.dotYouId}\n                />\n              ))}\n            </div>\n          </Section>\n        ) : null}\n\n        {!sentRequestsLoading && sentRequests?.length ? (\n          <CollapsableSection\n            isOpaqueBg={true}\n            isBorderLess={true}\n            isOpenByDefault={true}\n            title={t('Sent Connection Requests')}\n          >\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {sentRequests?.map((sentRequest) => (\n                <PersonOutgoingRequest\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  recipientDotYouId={sentRequest.recipient}\n                  key={sentRequest.recipient}\n                />\n              ))}\n            </div>\n          </CollapsableSection>\n        ) : null}\n      </section>\n      <ConnectionDialog\n        title={t('Send connection request')}\n        isOpen={isSentConnectionOpen}\n        onConfirm={() => setIsSentConnectionOpen(false)}\n        onCancel={() => setIsSentConnectionOpen(false)}\n      />\n    </>\n  );\n};\n\nexport default Connections;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useConnection = ({ dotYouId }: { dotYouId?: string }) => {\n  const queryClient = useQueryClient();\n\n  const { getSharedSecret } = useAuth();\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n\n  const fetchSingle = async ({ dotYouId }: { dotYouId: string }) => {\n    if (!dotYouId) {\n      return;\n    }\n\n    const connectionInfo = await circleNetworkProvider.getConnectionInfo(dotYouId);\n    if (connectionInfo && connectionInfo.status !== 'None') {\n      return connectionInfo;\n    }\n\n    const pendingRequest = await circleNetworkRequestProvider.getPendingRequest(dotYouId);\n    if (pendingRequest) {\n      return pendingRequest;\n    }\n\n    const sentRequest = await circleNetworkRequestProvider.getSentRequest(dotYouId);\n    return sentRequest ?? connectionInfo;\n  };\n\n  const disconnect = async ({ connectionDotYouId }: { connectionDotYouId?: string }) => {\n    return await circleNetworkProvider.disconnectFromContact(connectionDotYouId ?? dotYouId);\n  };\n\n  const sendConnectionRequest = async ({\n    targetDotYouId,\n    message,\n    name,\n    circleIds,\n  }: {\n    targetDotYouId: string;\n    message: string;\n    name: string;\n    circleIds: string[];\n  }) => {\n    return await circleNetworkRequestProvider.sendRequest(targetDotYouId, message, name, circleIds);\n  };\n\n  const revokeConnectionRequest = async ({ targetDotYouId }: { targetDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deleteSentRequest(targetDotYouId);\n  };\n\n  const acceptRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.acceptConnectionRequest(senderDotYouId);\n  };\n\n  const ignoreRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deletePendingRequest(senderDotYouId);\n  };\n\n  return {\n    fetch: useQuery(['connectionInfo', dotYouId], () => fetchSingle({ dotYouId }), {\n      refetchOnWindowFocus: false,\n    }),\n\n    disconnect: useMutation(disconnect, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    sendConnectionRequest: useMutation(sendConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    revokeConnectionRequest: useMutation(revokeConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    acceptRequest: useMutation(acceptRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    ignoreRequest: useMutation(ignoreRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useConnection;\n","import { useQuery } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useConnections = () => {\n  const { getSharedSecret } = useAuth();\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n\n  const fetchPendingConnections = async () => {\n    return await (\n      await circleNetworkRequestProvider.getPendingRequests({ pageNumber: 1, pageSize: 10 })\n    ).results;\n  };\n\n  const fetchSentRequests = async () => {\n    return await (\n      await circleNetworkRequestProvider.getSentRequests({ pageNumber: 1, pageSize: 10 })\n    ).results;\n  };\n\n  const fetchConnections = async () => {\n    return await (\n      await circleNetworkProvider.getConnections({ pageNumber: 1, pageSize: 10 })\n    ).results;\n  };\n\n  return {\n    fetchPending: useQuery(['pendingConnections'], () => fetchPendingConnections(), {\n      refetchOnWindowFocus: false,\n    }),\n    fetchSent: useQuery(['sentRequests'], () => fetchSentRequests(), {\n      refetchOnWindowFocus: false,\n    }),\n    fetchActive: useQuery(['activeConnections'], () => fetchConnections(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useConnections;\n"],"names":["name","href","className","children","onClick","Wrapper","to","src","isOpenByDefault","title","isOpaqueBg","isBorderLess","useState","isOpen","setIsOpen","sectionContainerRef","useRef","height","useEffect","current","clientHeight","style","maxHeight","ref","senderDotYouId","useConnection","acceptRequest","acceptPending","mutate","acceptPendingStatus","status","ignoreRequest","ignoreRequestStatus","PersonCard","undefined","ActionButton","type","e","preventDefault","state","recipientDotYouId","revokeConnectionRequest","revokeRequest","revokeRequestStatus","targetDotYouId","dotYouProfile","disconnect","disconnectStatus","givenName","surName","dotYouId","connectionDotYouId","confirmOptions","t","buttonText","body","onConfirm","onCancel","target","usePortal","sendConnectionRequest","sendConnectionRequestStatus","resetConnectionRequest","reset","circles","useCircles","fetch","data","connectionTarget","setConnectionTarget","message","setMessage","setName","circleGrants","setCircleGrants","dialog","DialogWrapper","onClose","onSubmit","circleIds","onSuccess","htmlFor","Input","id","onChange","value","defaultValue","required","Textarea","length","map","circle","index","Checkbox","newCircleGrants","checked","push","filter","circleId","icon","createPortal","useConnections","fetchPending","pendingConnections","pendingConnectionsLoading","isLoading","fetchActive","activeConnections","activeConnectionsLoading","fetchSent","sentRequests","sentRequestsLoading","isSentConnectionOpen","setIsSentConnectionOpen","PageMeta","Persons","actions","Section","pendingConnection","activeConnection","CollapsableSection","sentRequest","recipient","queryClient","useQueryClient","getSharedSecret","useAuth","circleNetworkProvider","CircleNetworkProvider","circleNetworkRequestProvider","CircleNetworkRequestProvider","fetchSingle","getConnectionInfo","connectionInfo","getPendingRequest","pendingRequest","getSentRequest","disconnectFromContact","sendRequest","deleteSentRequest","acceptConnectionRequest","deletePendingRequest","useQuery","refetchOnWindowFocus","useMutation","param","invalidateQueries","onError","ex","console","error","fetchPendingConnections","getPendingRequests","pageNumber","pageSize","results","fetchSentRequests","getSentRequests","fetchConnections","getConnections"],"sourceRoot":""}