{"version":3,"file":"static/js/178.0e5955e5.chunk.js","mappings":"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","sources":["components/Alerts/Alert/Alert.tsx","components/Buttons/SaveStatus.tsx","components/Layout/PageMeta/PageMeta.tsx","components/Templates/AppDetails/AppDetails.tsx"],"sourcesContent":["import { ReactNode } from 'react';\nimport Exclamation from '../../Icons/Exclamation/Exclamation';\n\ninterface AlertProps {\n  type: 'success' | 'warning' | 'critical';\n  title?: ReactNode;\n  children?: ReactNode;\n  className?: string;\n}\n\nconst Alert = ({ type, title, children, className }: AlertProps) => {\n  const bgClass =\n    type === 'critical'\n      ? 'bg-red-50 dark:bg-red-900 border-red-100 dark:border-red-800 dark:text-white'\n      : type === 'warning'\n      ? 'bg-orange-50 border-orange-100'\n      : '';\n\n  return (\n    <section className={`bg-red rounded-lg border-[1px] p-5 ${bgClass} ${className ?? ''}`}>\n      <div className=\"flex flex-row flex-wrap sm:flex-nowrap\">\n        {type === 'critical' ? (\n          <div className=\"flex h-8 w-8 flex-shrink-0 text-red-400 dark:text-red-300 sm:my-auto sm:mx-0 sm:h-10 sm:w-10\">\n            <Exclamation />\n          </div>\n        ) : type === 'warning' ? (\n          <div className=\"flex h-8 w-8 flex-shrink-0 text-red-400 sm:my-auto sm:mx-0 sm:h-10 sm:w-10\">\n            <Exclamation />\n          </div>\n        ) : (\n          <div className=\"flex h-8 w-8 flex-shrink-0 text-red-400 sm:my-auto sm:mx-0 sm:h-10 sm:w-10\">\n            <Exclamation />\n          </div>\n        )}\n        <div className=\"ml-5 contents sm:block\">\n          <p className=\"ml-3 mb-2 text-2xl sm:ml-0\">{title}</p>\n          {children}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Alert;\n","import { useEffect, useState } from 'react';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { FC, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n  breadCrumbs,\n  icon,\n}: {\n  title?: ReactNode;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n  breadCrumbs?: { title: string; href?: string }[];\n  icon?: FC;\n}) => {\n  return (\n    <section\n      className=\"-mx-5 -mt-4 mb-10 border-b-2 border-gray-100 bg-slate-50 py-4 pr-5 pl-10 dark:border-gray-700 dark:bg-slate-800 sm:-mx-10\n    sm:-mt-8 sm:py-8 sm:px-10\"\n    >\n      <div className=\"flex flex-col sm:flex-row\">\n        <div className=\"flex-col\">\n          {breadCrumbs && (\n            <ul className=\"mb-2 hidden flex-row sm:flex\">\n              {breadCrumbs.map((crumb, index) => {\n                return (\n                  <li key={index} className=\"mr-2\">\n                    {crumb.href ? (\n                      <Link to={crumb.href} className=\"\">\n                        {crumb.title}\n                        <span className=\"ml-2\">{'>'}</span>\n                      </Link>\n                    ) : (\n                      <span className=\"text-slate-500\">{crumb.title}</span>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {title && (\n            <h1 className=\"mb-5 flex flex-row text-4xl dark:text-white\">\n              {icon && icon({ className: 'h-8 w-8 my-auto mr-4' })} {title}\n            </h1>\n          )}\n        </div>\n        <div className=\"ml-auto\">\n          <div className=\"-m-2 flex flex-col flex-wrap justify-end sm:flex-row sm:items-center\">\n            {actions}\n          </div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","import { useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useApp from '../../../hooks/app/useApp';\nimport Alert from '../../Alerts/Alert/Alert';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Grid from '../../Icons/Grid/Grid';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport DrivePermissionView from '../../PermissionViews/DrivePermissionView/DrivePermissionView';\nimport PermissionView from '../../PermissionViews/PermissionView/PermissionView';\nimport Section from '../../Sections/Section';\n\nconst AppDetails = () => {\n  const { appKey } = useParams();\n  const decodedAppKey = decodeURIComponent(appKey);\n  const {\n    fetch: { data: app, isLoading: appLoading },\n    revokeApp: { mutate: revokeApp, status: revokeAppStatus },\n    allowApp: { mutate: allowApp, status: allowAppStatus },\n  } = useApp({ appId: decodedAppKey });\n\n  if (appLoading) {\n    <>Loading</>;\n  }\n\n  if (!app) {\n    return <>No matching app found</>;\n  }\n\n  return (\n    <>\n      <PageMeta\n        icon={Grid}\n        title={`${app.name}`}\n        breadCrumbs={[{ href: '/owner/apps', title: 'My apps' }, { title: app.name ?? '' }]}\n        actions={\n          <>\n            {app.isRevoked ? (\n              <ActionButton\n                type=\"primary\"\n                className=\"m-2 my-auto\"\n                onClick={() => allowApp({ appId: decodedAppKey })}\n                state={allowAppStatus}\n                confirmOptions={{\n                  title: t('Restore App'),\n                  buttonText: t('Restore'),\n                  body: `${t('Are you sure you want to restore')} ${app.name} ${t(\n                    'and allow access to your identity'\n                  )}`,\n                }}\n              >\n                Restore app\n              </ActionButton>\n            ) : (\n              <ActionButton\n                type=\"remove\"\n                className=\"m-2 my-auto\"\n                onClick={() => revokeApp({ appId: decodedAppKey })}\n                state={revokeAppStatus}\n                confirmOptions={{\n                  title: t('Revoke App'),\n                  buttonText: t('Revoke'),\n                  body: `${t('Are you sure you want to revoke')} ${app.name} ${t(\n                    'from all access to your identity'\n                  )}`,\n                }}\n              >\n                Revoke app\n              </ActionButton>\n            )}\n          </>\n        }\n      />\n\n      {app.isRevoked && (\n        <Alert type=\"critical\" title={t('App is revoked')} className=\"mb-5\">\n          {t('This app is revoked, it no longer has the access provided')}\n        </Alert>\n      )}\n\n      {app.grant.permissionSet?.keys ? (\n        <Section title={t('Access')} isOpaqueBg={true}>\n          <div className=\"-my-4\">\n            {app.grant.permissionSet.keys.map((permissionLevel) => {\n              return (\n                <PermissionView\n                  key={`${permissionLevel}`}\n                  permission={permissionLevel}\n                  className=\"my-4\"\n                />\n              );\n            })}\n          </div>\n        </Section>\n      ) : null}\n      <Section title={t('Access on the following drives')} isOpaqueBg={true}>\n        {app.grant?.driveGrants?.length ? (\n          <div className=\"-my-4\">\n            {app.grant?.driveGrants?.map((grant) => {\n              return (\n                <DrivePermissionView\n                  key={`${grant?.permissionedDrive?.drive?.alias}-${grant?.permissionedDrive?.drive?.type}`}\n                  driveGrant={grant}\n                  className=\"my-4\"\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"flex flex-row\">\n            <p className=\"my-auto\">{t(\"This app doesn't have any access\")}</p>\n          </div>\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default AppDetails;\n"],"names":["type","title","children","className","bgClass","state","useState","lastSave","setLastSave","Date","now","setNow","useEffect","timer","setTimeout","clearTimeout","diff","getTime","text","toLocaleString","actions","saveStatus","breadCrumbs","icon","map","crumb","index","href","to","appKey","useParams","decodedAppKey","decodeURIComponent","useApp","appId","fetch","app","data","appLoading","isLoading","revokeApp","mutate","revokeAppStatus","status","allowApp","allowAppStatus","Grid","name","isRevoked","onClick","confirmOptions","t","buttonText","body","grant","permissionSet","keys","isOpaqueBg","permissionLevel","permission","driveGrants","length","driveGrant","permissionedDrive","drive","alias"],"sourceRoot":""}