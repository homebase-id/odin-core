{"version":3,"file":"static/js/18.6b0e8b33.chunk.js","mappings":"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","sources":["components/SubMenu/SubMenu.tsx","hooks/blogs/useBlogs.ts","components/Channel/ChannelCreator/ChannelCreator.tsx","components/Blog/BlogTeaser/BlogTeaser.tsx","components/Channel/ChannelEditor/ChannelEditor.tsx","components/Channel/ChannelOverview/ChannelOverview.tsx","components/Templates/Blog/Blog.tsx","helpers/common.ts","hooks/blogs/useChannel.ts","hooks/blogs/useChannels.ts"],"sourcesContent":["import { FC, ReactNode } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport Select from '../Form/Select';\nimport LoadingParagraph from '../Loaders/LoadingParagraph/LoadingParagraph';\n\ninterface SubmenuProps {\n  className?: string;\n  items: { title: ReactNode; text?: string; key: string; path: string; className?: string }[];\n  isLoading?: boolean;\n}\n\nconst Submenu: FC<SubmenuProps> = ({ className, items, isLoading }) => {\n  const navigate = useNavigate();\n  const forceMobileView = items?.length >= 6;\n\n  if (isLoading === true) {\n    return <LoadingParagraph className=\"h-10\" />;\n  }\n\n  return (\n    <>\n      <div\n        className={`hidden flex-col flex-wrap ${!forceMobileView ? 'sm:flex' : ''} sm:flex-row ${\n          className ?? ''\n        }`}\n      >\n        {items.map((item) => {\n          return (\n            // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n            <NavLink\n              className={({ isActive }) =>\n                `flex-grow cursor-pointer border-b-2 py-2 px-1 text-lg ${\n                  isActive\n                    ? 'border-indigo-500 text-indigo-500 dark:text-indigo-400'\n                    : 'border-gray-300 transition-colors duration-300 hover:border-indigo-400 dark:border-gray-800 hover:dark:border-indigo-600'\n                } ${item.className ?? ''}`\n              }\n              to={item.path}\n              key={item.key}\n              end\n            >\n              {item.title}\n            </NavLink>\n          );\n        })}\n      </div>\n      <Select\n        className={`${!forceMobileView ? 'sm:hidden' : ''} py-4`}\n        onChange={(e) => navigate(e.target.value)}\n        value={window.location.pathname}\n      >\n        {items.map((item) => {\n          return (\n            <option key={item.key} value={item.path}>\n              {item.text || item.title}\n            </option>\n          );\n        })}\n      </Select>\n    </>\n  );\n};\n\nexport default Submenu;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, BlogContent, BlogPostFile, Client } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsProps = {\n  channelId?: string;\n  page: string | undefined;\n};\n\nexport interface BlogContentVm extends BlogContent {\n  itemKey?: string;\n}\n\nconst useBlogs = ({ channelId, page }: useBlogPostsProps = { page: undefined }) => {\n  const pageSize = 50;\n  const { getSharedSecret } = useAuth();\n\n  const fetchBlogData = async ({ channelId, page }: useBlogPostsProps = { page: undefined }) => {\n    const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n    const foundBlogPosts: BlogPostFile<BlogContentVm>[] =\n      await client.blogPostProvider.getMasterPosts(page, pageSize);\n\n    let filteredBlogPosts = foundBlogPosts.filter((post) => {\n      if (!channelId) {\n        return true;\n      }\n      return post.publishTargets.some((channel) => channel.channelId === channelId);\n    });\n\n    // Process blog posts (Only until fixed in data upload)\n    filteredBlogPosts = filteredBlogPosts.map((item) => {\n      return {\n        ...item,\n        content: {\n          ...item.content,\n          itemKey: `${item.content.channelId}_${item.content.id}`,\n          slug: item.content.caption ? convertTextToSlug(item.content.caption) : item.content.id,\n        },\n      };\n    });\n\n    return filteredBlogPosts;\n  };\n\n  return useQuery(['blogs', channelId, page], () => fetchBlogData({ channelId, page }), {\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport default useBlogs;\n","import { ChannelDefinition, SecurityGroupType } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { convertTextToSlug } from '../../../helpers/common';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useChannel from '../../../hooks/blogs/useChannel';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Section from '../../Sections/Section';\n\nconst ChannelCreator = () => {\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const { mutate: saveChannel, status: saveStatus } = useChannel().save;\n  const navigate = useNavigate();\n\n  const createChannel: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    const newChannelDef: ChannelDefinition = {\n      channelId: '',\n      name: name,\n      description: description,\n      templateId: undefined,\n      acl: { requiredSecurityGroup: SecurityGroupType.Owner },\n    };\n\n    saveChannel(newChannelDef, {\n      onSuccess: () => {\n        navigate(`/owner/blog/${convertTextToSlug(newChannelDef.name)}`);\n      },\n    });\n\n    return false;\n  };\n\n  return (\n    <Section title=\"New: channel\" isOpaqueBg={true}>\n      <form onSubmit={createChannel}>\n        <div className=\"mb-5\">\n          <label htmlFor=\"channelName\">{t('Name')}</label>\n          <Input\n            id=\"name\"\n            name=\"channelName\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            required\n          />\n        </div>\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Description')}</label>\n          <Input\n            id=\"name\"\n            name=\"channelDescription\"\n            onChange={(e) => {\n              setDescription(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"flex flex-row\">\n          <ActionButton className=\"ml-auto\" state={saveStatus}>\n            {t('Add channel')}\n          </ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nexport default ChannelCreator;\n","import {\n  BlogArticle,\n  BlogPostFile,\n  BlogTypeUnion,\n  PublishTarget,\n} from '@youfoundation/transit-lib';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport { BlogContentVm } from '../../../hooks/blogs/useBlogs';\nimport useChannels from '../../../hooks/blogs/useChannels';\n\nconst BlogTeaser = ({\n  className,\n  blog,\n  linkRoot,\n}: {\n  className?: string;\n  blog: BlogPostFile<BlogContentVm>;\n  linkRoot: string;\n}) => {\n  return (\n    <Link to={`${linkRoot}${blog.content.slug ?? '#'}`} className=\"contents\">\n      <div\n        className={`flex flex-nowrap px-5 py-8 transition-colors duration-200 hover:bg-slate-50 hover:dark:bg-slate-800 ${\n          className ?? ''\n        }`}\n      >\n        <div className=\"flex flex-col md:flex-grow md:flex-row\">\n          <div className=\"flex flex-shrink-0 md:order-3 md:mb-0 md:mt-3 md:w-32 md:flex-col md:text-right lg:w-64\">\n            <span className=\"title-font font-semibold text-gray-700 dark:text-white\">\n              {(blog.content as BlogTypeUnion).type.toUpperCase()}\n            </span>\n            <span className=\"pl-2 text-gray-500 md:mt-1 md:pl-0 md:text-sm\">\n              {new Date(blog.content.dateUnixTime).toLocaleDateString()}\n            </span>\n          </div>\n          <div className=\"md:order-2 md:flex-grow\">\n            <h2 className=\"title-font mb-2 flex flex-row text-2xl font-medium text-gray-900 dark:text-white\">\n              {blog.content.caption}\n              <BlogPublishTags publishTargets={blog.publishTargets} />\n            </h2>\n            {'abstract' in blog.content ? (\n              <p className=\"leading-relaxed\">{(blog.content as BlogArticle).abstract}</p>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nconst BlogPublishTags = ({ publishTargets }: { publishTargets?: PublishTarget[] }) => {\n  const { data: channels } = useChannels().fetch;\n  if (!publishTargets?.length) {\n    return;\n  }\n\n  return (\n    <span className=\"my-auto ml-2 flex flex-row flex-wrap\">\n      {publishTargets.map((target) => {\n        const publishedChannel = channels.find((channel) => channel.channelId === target.channelId);\n        if (!publishedChannel) {\n          return null;\n        }\n        return (\n          <span\n            key={publishedChannel.channelId}\n            className=\"mr-2 bg-green-300 px-2 py-1 text-xs\"\n            title={`${t('Published to')}: ${publishedChannel.name}`}\n          >\n            {publishedChannel.name}\n          </span>\n        );\n      })}\n    </span>\n  );\n};\n\nexport default BlogTeaser;\n","import { ChannelTemplate } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { convertTextToSlug } from '../../../helpers/common';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useChannel from '../../../hooks/blogs/useChannel';\nimport { ChannelDefinitionVm } from '../../../hooks/blogs/useChannels';\nimport AclEditor from '../../AclEditor/AclEditor';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Select from '../../Form/Select';\nimport Textarea from '../../Form/Textarea';\nimport Section from '../../Sections/Section';\n\nconst ChannelEditor = ({\n  channel,\n  onCancel,\n}: {\n  channel: ChannelDefinitionVm;\n  onCancel: () => void;\n}) => {\n  const [channelData, setChannelData] = useState({ ...channel });\n  const {\n    save: { mutate: saveChannel, status: saveStatus },\n    remove: { mutate: removeChannel, status: removeChannelStatus },\n  } = useChannel();\n  const navigate = useNavigate();\n\n  if (!channel) {\n    return;\n  }\n\n  const handleChange = (e: { target: { value: unknown; name: string } }) => {\n    const newChannelData = { ...channelData };\n    newChannelData[e.target.name] = e.target.value;\n\n    setChannelData(newChannelData);\n  };\n\n  const tmpKeys = Object.keys(ChannelTemplate).filter((f) => !isNaN(Number(f)));\n  const tmpVals = Object.keys(ChannelTemplate).filter((f) => isNaN(Number(f)));\n\n  return (\n    <Section\n      title={\n        <>\n          <AclEditor\n            key={channelData.channelId}\n            acl={channelData.acl}\n            onChange={(acl) => {\n              handleChange({ target: { name: 'acl', value: acl } });\n            }}\n          />{' '}\n          {`${t('Edit')}: ${channel.name}`}\n        </>\n      }\n      isOpaqueBg={true}\n    >\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          saveChannel(channelData, {\n            onSuccess: () => {\n              navigate(`/owner/blog/${convertTextToSlug(channelData.name)}`);\n            },\n          });\n        }}\n      >\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Name')}</label>\n          <Input id=\"name\" name=\"name\" defaultValue={channel.name} onChange={handleChange} />\n        </div>\n        <div className=\"mb-5\">\n          <label htmlFor=\"description\">{t('Description')}</label>\n          <Textarea\n            id=\"description\"\n            name=\"description\"\n            defaultValue={channel.description}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"mb-5\">\n          <label htmlFor=\"template\">{t('Template')}</label>\n          <Select\n            id=\"template\"\n            name=\"templateId\"\n            defaultValue={channel.templateId}\n            onChange={handleChange}\n          >\n            <option>{t('Make a selection')}</option>\n            {tmpKeys.map((tmpKey, index) => {\n              return (\n                <option value={tmpKey} key={tmpKey}>\n                  {t(tmpVals[index])}\n                </option>\n              );\n            })}\n          </Select>\n        </div>\n        <div className=\"-m-2 flex flex-row-reverse\">\n          <ActionButton\n            type=\"secondary\"\n            className=\"m-2\"\n            onClick={(e) => {\n              e.preventDefault();\n              onCancel();\n            }}\n          >\n            {t('Cancel')}\n          </ActionButton>\n          <ActionButton type=\"primary\" className=\"m-2\" state={saveStatus}>\n            {t('Save')}\n          </ActionButton>\n          <ActionButton\n            type=\"remove\"\n            icon={'trash'}\n            className=\"m-2 mr-auto\"\n            state={removeChannelStatus}\n            onClick={() => removeChannel(channel)}\n            confirmOptions={{\n              title: t('Remove channel'),\n              body: t(\n                'Are you sure you want to remove this channel, this action cannot be undone. All blogs published on this channel will also be unpublished.'\n              ),\n              buttonText: t('Remove'),\n            }}\n          >\n            {t('Remove')}\n          </ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nexport default ChannelEditor;\n","import { BlogPostFile, ChannelTemplate } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport { BlogContentVm } from '../../../hooks/blogs/useBlogs';\nimport { ChannelDefinitionVm } from '../../../hooks/blogs/useChannels';\nimport BlogTeaser from '../../Blog/BlogTeaser/BlogTeaser';\nimport ActionButton from '../../Buttons/ActionButton';\nimport LoadingParagraph from '../../Loaders/LoadingParagraph/LoadingParagraph';\nimport ChannelEditor from '../ChannelEditor/ChannelEditor';\n\nconst ChannelOverview = ({\n  channel,\n  blogs,\n  isParentLoading,\n}: {\n  channel: ChannelDefinitionVm | undefined;\n  blogs: BlogPostFile<BlogContentVm>[];\n  isParentLoading;\n}) => {\n  const linkRoot = `/owner/blog/${channel ? channel.slug : 'all'}/`;\n  const [isEditActive, setIsEditActive] = useState(false);\n\n  if (isParentLoading) {\n    return (\n      <div className=\"-m-5 pt-5\">\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n      </div>\n    );\n  }\n\n  if (!blogs) {\n    return <></>;\n  }\n\n  return (\n    <>\n      {channel ? (\n        isEditActive ? (\n          <ChannelEditor\n            key={channel.channelId}\n            channel={channel}\n            onCancel={() => setIsEditActive(false)}\n          />\n        ) : (\n          <section className=\"items-center bg-slate-50 p-3 dark:bg-slate-800 sm:flex sm:flex-row\">\n            <p className=\"sm:mr-2\">{channel.description ? channel.description : channel.name}</p>\n\n            <p className=\"ml-auto\">\n              {t('Template')}:{' '}\n              {parseInt(channel.templateId + '') === ChannelTemplate.LargeCards\n                ? t('LargeCards')\n                : parseInt(channel.templateId + '') === ChannelTemplate.ClassicBlog\n                ? t('ClassicBlog')\n                : t('MasonryLayout')}\n            </p>\n            <ActionButton\n              type=\"secondary\"\n              className=\"sm:ml-2\"\n              onClick={() => setIsEditActive(true)}\n            >\n              {t('Edit Channel')}\n            </ActionButton>\n          </section>\n        )\n      ) : null}\n\n      {blogs.length ? (\n        <div className=\"-mx-5 divide-y-2 divide-gray-100 dark:divide-gray-800\">\n          {blogs.map((blog) => {\n            return <BlogTeaser key={blog.content.itemKey} blog={blog} linkRoot={linkRoot} />;\n          })}\n        </div>\n      ) : (\n        <div className=\"mt-4\">{t('no-data-found')}</div>\n      )}\n    </>\n  );\n};\n\nexport default ChannelOverview;\n","import { Link, useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useBlogs from '../../../hooks/blogs/useBlogs';\nimport useChannels from '../../../hooks/blogs/useChannels';\nimport ActionButton from '../../Buttons/ActionButton';\nimport ChannelCreator from '../../Channel/ChannelCreator/ChannelCreator';\nimport ChannelOverview from '../../Channel/ChannelOverview/ChannelOverview';\nimport Plus from '../../Icons/Plus/Plus';\nimport Quote from '../../Icons/Quote/Quote';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport Submenu from '../../SubMenu/SubMenu';\n\nconst Blog = () => {\n  const { channelKey } = useParams();\n  const { data: channels, isLoading: isChannelsLoading } = useChannels().fetch;\n  const activeChannel = channels?.find((channel) => channel.slug === channelKey);\n  const { data: blogs, isLoading: isBlogsLoading } = useBlogs({\n    channelId: activeChannel?.channelId,\n    page: undefined,\n  });\n\n  return (\n    <section>\n      <PageMeta\n        icon={Quote}\n        title={t('Blog')}\n        actions={\n          <Link className=\"contents\" to={`/owner/blog/draft/new`}>\n            <ActionButton type=\"primary\" icon=\"plus\" className=\"m-2\">\n              {t('New')}\n            </ActionButton>\n          </Link>\n        }\n      />\n\n      <Submenu\n        items={[\n          {\n            title: t('Drafts'),\n            key: '',\n            path: `/owner/blog`,\n          },\n          ...(channels ?? []).map((channel) => {\n            return {\n              title: channel.name,\n              key: channel.channelId,\n              path: `/owner/blog/${channel.slug}`,\n            };\n          }),\n          {\n            title: <Plus className=\"h-5 w-5\" />,\n            text: `-- ${t('Create new channel')} --`,\n            key: 'new',\n            className: 'flex-grow-0',\n            path: `/owner/blog/new`,\n          },\n        ]}\n        isLoading={isChannelsLoading}\n      />\n\n      <div className=\"pt-5\">\n        {channelKey === 'new' ? (\n          <ChannelCreator />\n        ) : (\n          <ChannelOverview\n            channel={activeChannel}\n            blogs={blogs}\n            isParentLoading={isChannelsLoading || isBlogsLoading}\n          />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Blog;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, ChannelDefinition, Client } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\nimport useStaticFiles from '../staticFiles/useStaticFiles';\nimport { ChannelDefinitionVm } from './useChannels';\n\nconst useChannel = ({ channelId }: { channelId?: string } = {}) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const queryClient = useQueryClient();\n  const { mutate: publishStaticFiles } = useStaticFiles().publish;\n\n  const fetchData = async (channelId?: string) => {\n    if (!channelId) {\n      return;\n    }\n    const foundAttribute = await client.blogDefinitionProvider.getChannelDefinition(channelId);\n\n    return foundAttribute;\n  };\n\n  const saveData = async (channelDef: ChannelDefinition) => {\n    await client.blogDefinitionProvider.saveChannelDefinition(channelDef);\n  };\n\n  const removeChannel = async (channelDef: ChannelDefinition) => {\n    await client.blogDefinitionProvider.removeChannelDefinition(channelDef.channelId);\n  };\n\n  return {\n    fetch: useQuery(['channel', channelId], () => fetchData(channelId), {\n      refetchOnWindowFocus: false,\n    }),\n    save: useMutation(saveData, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.channelId) {\n          queryClient.removeQueries(['channel', variables.channelId]);\n        } else {\n          queryClient.removeQueries(['channel']);\n        }\n        queryClient.removeQueries(['channels']);\n\n        publishStaticFiles();\n      },\n    }),\n    remove: useMutation(removeChannel, {\n      onMutate: async (toRemoveChannel) => {\n        await queryClient.cancelQueries(['channels']);\n\n        const previousChannels: ChannelDefinitionVm[] = queryClient.getQueryData(['channels']);\n        const newChannels = previousChannels?.filter(\n          (channel) => channel.channelId !== toRemoveChannel.channelId\n        );\n\n        queryClient.setQueryData(['channels'], newChannels);\n\n        return { previousChannels, toRemoveChannel };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['channels'], context.previousChannels);\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['channels']);\n      },\n    }),\n  };\n};\n\nexport default useChannel;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, ChannelDefinition, Client } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\nexport interface ChannelDefinitionVm extends ChannelDefinition {\n  slug: string;\n}\n\nconst useChannels = () => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n  const fetchData = async () => {\n    const foundChannels = await client.blogDefinitionProvider.getChannelDefinitions();\n\n    return foundChannels.map((channel) => {\n      return {\n        ...channel,\n        slug: convertTextToSlug(channel.name),\n      } as ChannelDefinitionVm;\n    });\n  };\n\n  return {\n    fetch: useQuery(['channels'], () => fetchData(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useChannels;\n"],"names":["className","items","isLoading","navigate","useNavigate","forceMobileView","length","map","item","isActive","to","path","end","title","key","onChange","e","target","value","window","location","pathname","text","page","undefined","channelId","pageSize","useAuth","getSharedSecret","fetchBlogData","client","Client","api","ApiType","sharedSecret","blogPostProvider","getMasterPosts","foundBlogPosts","filteredBlogPosts","filter","post","publishTargets","some","channel","content","itemKey","id","slug","caption","convertTextToSlug","useQuery","refetchOnWindowFocus","useState","name","setName","description","setDescription","useChannel","save","saveChannel","mutate","saveStatus","status","Section","isOpaqueBg","onSubmit","preventDefault","newChannelDef","templateId","acl","requiredSecurityGroup","SecurityGroupType","onSuccess","htmlFor","t","Input","required","ActionButton","state","BlogPublishTags","channels","useChannels","fetch","data","publishedChannel","find","blog","linkRoot","type","toUpperCase","Date","dateUnixTime","toLocaleDateString","abstract","onCancel","channelData","setChannelData","remove","removeChannel","removeChannelStatus","handleChange","newChannelData","tmpKeys","Object","keys","ChannelTemplate","f","isNaN","Number","tmpVals","AclEditor","defaultValue","Textarea","Select","tmpKey","index","onClick","icon","confirmOptions","body","buttonText","blogs","isParentLoading","isEditActive","setIsEditActive","LoadingParagraph","parseInt","channelKey","useParams","isChannelsLoading","activeChannel","useBlogs","isBlogsLoading","PageMeta","Quote","actions","Plus","split","join","toLowerCase","stringify","obj","queryClient","useQueryClient","publishStaticFiles","useStaticFiles","publish","fetchData","blogDefinitionProvider","getChannelDefinition","foundAttribute","saveData","channelDef","saveChannelDefinition","removeChannelDefinition","useMutation","_data","variables","removeQueries","onMutate","toRemoveChannel","cancelQueries","previousChannels","getQueryData","newChannels","setQueryData","onError","err","newData","context","console","error","onSettled","invalidateQueries","getChannelDefinitions","foundChannels"],"sourceRoot":""}