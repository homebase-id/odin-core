{"version":3,"file":"static/js/620.511ec10b.chunk.js","mappings":"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","sources":["components/Form/Checkbox.tsx","components/Sections/Section.tsx","helpers/common.ts","hooks/circles/useCircles.ts","provider/connections/CircleMembershipProvider.ts","provider/connections/CircleNetworkProvider.ts","provider/connections/CircleNetworkRequestProvider.ts","provider/connections/CircleProvider.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["const Checkbox = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n) => {\n  return (\n    <input\n      {...props}\n      type=\"checkbox\"\n      className={`h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-blue-600 ${props.className}`}\n    />\n  );\n};\n\nexport default Checkbox;\n","import { ReactNode } from 'react';\n\nconst Section = ({\n  title,\n  className,\n  children,\n  isOpaqueBg = false,\n  isBorderLess = false,\n}: {\n  title?: ReactNode;\n  className?: string;\n  children: ReactNode;\n  isOpaqueBg?: boolean;\n  isBorderLess?: boolean;\n}) => {\n  return (\n    <section\n      className={`my-5 rounded-md ${\n        isOpaqueBg\n          ? isBorderLess\n            ? ''\n            : 'rounded-lg border-[1px] border-gray-200 border-opacity-80 px-5 dark:border-gray-700'\n          : 'bg-slate-50 px-5 dark:bg-slate-800'\n      } dark:text-slate-300 ${className ?? ''}`}\n    >\n      {title ? (\n        <div\n          className={`relative border-b-[1px] border-gray-200 border-opacity-80 py-5 transition-all duration-300 dark:border-gray-700`}\n        >\n          <h3 className=\"text-2xl dark:text-white\">{title}</h3>\n        </div>\n      ) : null}\n      <div className=\"py-5 \">{children}</div>\n    </section>\n  );\n};\n\nexport default Section;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { CircleMembershipProvider } from '../../provider/connections/CircleMembershipProvider';\nimport { CircleProvider } from '../../provider/connections/CircleProvider';\nimport { CircleDefinition } from '../../provider/connections/CirlceDataTypes';\nimport useAuth from '../auth/useAuth';\n\nconst useCircles = () => {\n  const queryClient = useQueryClient();\n\n  const { getSharedSecret } = useAuth();\n  const circleProvider = CircleProvider.getInstance(getSharedSecret());\n  const circleMembershipProvider = CircleMembershipProvider.getInstance(getSharedSecret());\n\n  const fetchAll = async () => {\n    return await circleProvider.getCircles();\n  };\n\n  const createOrUpdate = async ({ circleDefinition }: { circleDefinition: CircleDefinition }) => {\n    if (circleDefinition.id) {\n      return await circleProvider.updateDefinition(circleDefinition);\n    } else {\n      return await circleProvider.createDefinition(circleDefinition);\n    }\n  };\n\n  const provideGrant = async ({ circleId, dotYouId }: { circleId: string; dotYouId: string }) => {\n    return await circleMembershipProvider.add({ circleId: circleId, dotYouId: dotYouId });\n  };\n\n  const revokeGrant = async ({ circleId, dotYouId }: { circleId: string; dotYouId: string }) => {\n    return await circleMembershipProvider.remove({ circleId: circleId, dotYouId: dotYouId });\n  };\n\n  return {\n    fetch: useQuery(['circles'], () => fetchAll(), {\n      refetchOnWindowFocus: false,\n    }),\n\n    createOrUpdate: useMutation(createOrUpdate, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['circles']);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    provideGrant: useMutation(provideGrant, {\n      onSuccess: async (data, param) => {\n        queryClient.invalidateQueries(['circles']);\n        queryClient.invalidateQueries(['connectionInfo', param.dotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    revokeGrant: useMutation(revokeGrant, {\n      onSuccess: async (data, param) => {\n        queryClient.invalidateQueries(['circles']);\n        queryClient.invalidateQueries(['connectionInfo', param.dotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useCircles;\n","import { OwnerProviderBase } from '../OwnerProviderBase';\n\n//Handles management of Circles\nexport class CircleMembershipProvider extends OwnerProviderBase {\n  private static instance: CircleMembershipProvider;\n  private root = '/circles/connections/circles';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async add(membershipGrant: { dotYouId: string; circleId: string }) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/add';\n\n    return client\n      .post(url, membershipGrant)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async remove(membershipGrant: { dotYouId: string; circleId: string }) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/revoke';\n\n    return client\n      .post(url, membershipGrant)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async fetchMembers(circleId: string): Promise<string[]> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/list';\n\n    return client\n      .post(url, { circleId: circleId })\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  public static getInstance(sharedSecret): CircleMembershipProvider {\n    if (!CircleMembershipProvider.instance) {\n      CircleMembershipProvider.instance = new CircleMembershipProvider(sharedSecret);\n    }\n\n    return CircleMembershipProvider.instance;\n  }\n}\n","import { ConnectionInfo, DotYouIdRequest, DotYouProfile } from './CirlceDataTypes';\nimport { PagedResult, PagingOptions } from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport { stringify } from '../../helpers/common';\n\n//Handles management of established connections\nexport class CircleNetworkProvider extends OwnerProviderBase {\n  private static instance: CircleNetworkProvider;\n  private root = '/circles/connections';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async blockDotYouId(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/block';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async disconnectFromContact(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/disconnect';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getConnections(data: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/connected?' + stringify(data);\n    return client.post(url, data).then((response) => {\n      return response.data;\n    });\n  }\n\n  async getBlockedConnections(params: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/blocked?' + stringify(params);\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  getConnectionInfo(dotYouId: string): Promise<ConnectionInfo> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/status';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n  public static getInstance(sharedSecret): CircleNetworkProvider {\n    if (!CircleNetworkProvider.instance) {\n      CircleNetworkProvider.instance = new CircleNetworkProvider(sharedSecret);\n    }\n\n    return CircleNetworkProvider.instance;\n  }\n}\n","import {\n  AcceptRequestHeader,\n  ConnectionRequest,\n  ConnectionRequestHeader,\n  DotYouIdRequest,\n} from './CirlceDataTypes';\nimport { PagedResult, PagingOptions } from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport { stringify } from '../../helpers/common';\n\n//Handles making and reading requests to connect with others\nexport class CircleNetworkRequestProvider extends OwnerProviderBase {\n  private static instance: CircleNetworkRequestProvider;\n\n  private Root = '/circles/requests';\n  private SentPathRoot: string = this.Root + '/sent';\n  private PendingPathRoot: string = this.Root + '/pending';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async getPendingRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getPendingRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/single';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: 'Pending' };\n      })\n      .catch(() => {\n        return undefined;\n      });\n  }\n\n  async getSentRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getSentRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/single';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: 'Sent' };\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          return null;\n        }\n        super.handleErrorResponse(err);\n      });\n  }\n\n  async acceptConnectionRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/accept/';\n\n    //todo: build from drives a UI selection of drives\n    // let drive: DriveGrantRequest = {\n    //     drive: {\n    //         alias: \"\",\n    //         type: \"\"\n    //     },\n    //     permission: DrivePermissions.None\n    // }\n\n    const header: AcceptRequestHeader = {\n      sender: dotYouId,\n      drives: [],\n      permissions: null,\n    };\n\n    return client\n      .post(url, header)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deletePendingRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/delete';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deleteSentRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/delete';\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async sendRequest(\n    dotYouId: string,\n    message: string,\n    name: string,\n    circleIds: string[]\n  ): Promise<boolean> {\n    const url = this.Root + '/sendrequest';\n    const data: ConnectionRequestHeader = {\n      recipient: dotYouId,\n      message: message,\n      name: name,\n      circleIds: circleIds,\n    };\n\n    const client = super.createAxiosClient();\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  public static getInstance(sharedSecret): CircleNetworkRequestProvider {\n    if (!CircleNetworkRequestProvider.instance) {\n      CircleNetworkRequestProvider.instance = new CircleNetworkRequestProvider(sharedSecret);\n    }\n\n    return CircleNetworkRequestProvider.instance;\n  }\n}\n","import { CircleDefinition } from './CirlceDataTypes';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\n//Handles management of Circles\nexport class CircleProvider extends OwnerProviderBase {\n  private static instance: CircleProvider;\n  private root = '/circles/definitions';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async updateDefinition(circleDefinition: CircleDefinition) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/update';\n\n    const data = { ...circleDefinition };\n    data.drivesGrants = data.drivesGrants || data.drives;\n    data.drives = undefined;\n    console.log('actual update data:', data);\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async createDefinition(circleDefinition: CircleDefinition) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/create';\n\n    return client\n      .post(url, circleDefinition)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getCircles(): Promise<CircleDefinition[]> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/list';\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data.map((circleDef) => {\n          circleDef.drivesGrants = circleDef.drivesGrants?.map((grant) => {\n            return {\n              ...grant,\n              permission:\n                grant.permission === 'Read'\n                  ? 2\n                  : grant.permission === 'Write'\n                  ? 4\n                  : grant.permission === 'ReadWrite'\n                  ? 5\n                  : grant.permission,\n            };\n          });\n\n          return circleDef;\n        });\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getCircle(circleId: string): Promise<CircleDefinition> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/circle';\n\n    return client\n      .post(url, circleId)\n      .then((response) => {\n        return response.data;\n      })\n      .then((circleDef) => {\n        // Parse string permissionflags to number representations\n        circleDef.drivesGrants = circleDef.drivesGrants?.map((grant) => {\n          return {\n            ...grant,\n            permission:\n              grant.permission === 'Read'\n                ? 2\n                : grant.permission === 'Write'\n                ? 4\n                : grant.permission === 'ReadWrite'\n                ? 5\n                : grant.permission,\n          };\n        });\n\n        // const globalPermission = circleDef.permissions.permissions;\n        // circleDef.permissions.permissions =\n        //   globalPermission === 'ApproveConnection'\n        //     ? 1\n        //     : globalPermission === 'ReadConnections'\n        //     ? 2\n        //     : globalPermission === 'ApproveConnection, ReadConnections'\n        //     ? 3\n        //     : globalPermission === 'ApproveConnection, ReadConnections, UpdateConnections'\n        //     ? 7\n        //     : globalPermission ===\n        //       'ApproveConnection, ReadConnections, UpdateConnections, DeleteConnections'\n        //     ? 15\n        //     : globalPermission;\n        return circleDef;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async removeCircle(circleId: string) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/delete';\n\n    return client\n      .post(url, circleId)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  public static getInstance(sharedSecret): CircleProvider {\n    if (!CircleProvider.instance) {\n      CircleProvider.instance = new CircleProvider(sharedSecret);\n    }\n\n    return CircleProvider.instance;\n  }\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["props","type","className","title","children","isOpaqueBg","isBorderLess","convertTextToSlug","text","split","join","toLowerCase","stringify","obj","Object","keys","map","key","queryClient","useQueryClient","getSharedSecret","useAuth","circleProvider","CircleProvider","circleMembershipProvider","CircleMembershipProvider","fetchAll","getCircles","createOrUpdate","circleDefinition","id","updateDefinition","createDefinition","provideGrant","circleId","dotYouId","add","revokeGrant","remove","fetch","useQuery","refetchOnWindowFocus","useMutation","onSuccess","data","param","invalidateQueries","onError","ex","console","error","sharedSecret","root","membershipGrant","client","url","this","post","then","response","catch","instance","OwnerProviderBase","CircleNetworkProvider","params","get","CircleNetworkRequestProvider","Root","SentPathRoot","PendingPathRoot","status","err","header","sender","drives","permissions","message","name","circleIds","recipient","drivesGrants","undefined","log","circleDef","grant","permission","_defineProperty","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}