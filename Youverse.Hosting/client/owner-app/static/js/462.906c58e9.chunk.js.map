{"version":3,"file":"static/js/462.906c58e9.chunk.js","mappings":"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","sources":["components/Dialog/ProfileDialog/ProfileDialog.tsx","components/Templates/Profile/Profile.tsx","helpers/common.ts","hooks/profiles/useProfiles.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { ProfileDefinition } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport useProfiles from '../../../hooks/profiles/useProfiles';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Textarea from '../../Form/Textarea';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst ProfileDialog = ({\n  title,\n  confirmText,\n  isOpen,\n  defaultValue,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n  defaultValue?: ProfileDefinition;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const { mutate: saveProfileDefinition, status: saveProfileDefinitionStatus } =\n    useProfiles().saveProfile;\n\n  const [newProfileDef, setNewProfileDef] = useState<ProfileDefinition>({\n    ...defaultValue,\n  });\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n\n            console.log('shall edit/create', newProfileDef);\n            saveProfileDefinition({ profileDef: newProfileDef }, { onSuccess: () => onConfirm() });\n\n            return false;\n          }}\n        >\n          <div className=\"mb-5\">\n            <label htmlFor=\"name\">{t('Name')}</label>\n            <Input\n              id=\"name\"\n              name=\"profileName\"\n              defaultValue={newProfileDef.name}\n              onChange={(e) => {\n                setNewProfileDef({ ...newProfileDef, name: e.target.value });\n              }}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"name\">{t('Description')}</label>\n            <Textarea\n              id=\"description\"\n              name=\"profileDescription\"\n              defaultValue={newProfileDef.description}\n              onChange={(e) => {\n                setNewProfileDef({ ...newProfileDef, description: e.target.value });\n              }}\n              required\n            />\n          </div>\n\n          <div className=\"-mx-2 py-3 sm:flex sm:flex-row-reverse\">\n            <ActionButton className=\"mx-2\" state={saveProfileDefinitionStatus} icon={'send'}>\n              {confirmText || t('Add Profile')}\n            </ActionButton>\n            <ActionButton className=\"mx-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default ProfileDialog;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useProfiles, { ProfileDefinitionVm } from '../../../hooks/profiles/useProfiles';\nimport ActionButton from '../../Buttons/ActionButton';\nimport ProfileDialog from '../../Dialog/ProfileDialog/ProfileDialog';\nimport Heart from '../../Icons/Heart/Heart';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\n\nconst Profile = () => {\n  const { data, isLoading } = useProfiles().fetchProfiles;\n  const [isOpenCreate, setIsOpenCreate] = useState(false);\n\n  if (isLoading) {\n    return <>Loading</>;\n  }\n\n  return (\n    <>\n      <section>\n        <PageMeta\n          icon={Heart}\n          title={t('My Profiles')}\n          actions={\n            <>\n              <ActionButton icon=\"plus\" onClick={() => setIsOpenCreate(true)}>\n                {t('Add Profile')}\n              </ActionButton>\n            </>\n          }\n        />\n        <div className=\"-m-2 flex flex-row items-stretch\">\n          {data?.definitions.map((definition) => {\n            return (\n              <div className=\"w-1/4 p-2\" key={definition.name}>\n                <ProfileDefinitionCard profileDef={definition} />\n              </div>\n            );\n          })}\n        </div>\n      </section>\n      <ProfileDialog\n        isOpen={isOpenCreate}\n        title={t('New Profile')}\n        onCancel={() => {\n          setIsOpenCreate(false);\n        }}\n        onConfirm={() => {\n          setIsOpenCreate(false);\n        }}\n      />\n    </>\n  );\n};\n\nconst ProfileDefinitionCard = ({ profileDef }: { profileDef: ProfileDefinitionVm }) => {\n  return (\n    <Link to={profileDef.slug} className=\"contents\">\n      <div className=\"h-full rounded-md border-[1px] border-gray-200 border-opacity-60 bg-white transition-colors hover:bg-slate-100 dark:border-gray-800 dark:bg-gray-800 dark:hover:bg-slate-700\">\n        <h2 className=\"bg-slate-100 p-4 text-xl dark:bg-slate-700 dark:text-slate-200\">\n          {profileDef.name}\n        </h2>\n        <div className=\"p-4\">\n          <p>{profileDef.description}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Profile;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, Client, ProfileDefinition } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\nexport interface ProfileDefinitionVm extends ProfileDefinition {\n  slug: string;\n}\n\nconst useProfiles = () => {\n  const queryClient = useQueryClient();\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchProfiles = async () => {\n    const definitions = await (\n      await client.profileDefinitionProvider.getProfileDefinitions()\n    ).map((def) => {\n      return {\n        ...def,\n        slug: convertTextToSlug(def.name),\n      } as ProfileDefinitionVm;\n    });\n\n    return { definitions };\n  };\n\n  const saveProfile = async ({ profileDef }: { profileDef: ProfileDefinition }) => {\n    return await client.profileDefinitionProvider.saveProfileDefinition(profileDef);\n  };\n\n  return {\n    fetchProfiles: useQuery(['profiles'], () => fetchProfiles(), {\n      refetchOnWindowFocus: false,\n    }),\n    saveProfile: useMutation(saveProfile, {\n      onSuccess: () => {\n        queryClient.invalidateQueries(['profiles']);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useProfiles;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["title","confirmText","isOpen","defaultValue","onConfirm","onCancel","target","usePortal","useProfiles","saveProfile","saveProfileDefinition","mutate","saveProfileDefinitionStatus","status","useState","newProfileDef","setNewProfileDef","dialog","onClose","onSubmit","e","preventDefault","console","log","profileDef","onSuccess","className","htmlFor","t","id","name","onChange","value","required","description","state","icon","type","onClick","createPortal","ProfileDefinitionCard","to","slug","fetchProfiles","data","isLoading","isOpenCreate","setIsOpenCreate","Heart","actions","definitions","map","definition","convertTextToSlug","text","split","join","toLowerCase","stringify","obj","Object","keys","key","queryClient","useQueryClient","getSharedSecret","useAuth","client","Client","api","ApiType","sharedSecret","profileDefinitionProvider","getProfileDefinitions","def","useQuery","refetchOnWindowFocus","useMutation","invalidateQueries","onError","ex","error","_defineProperty","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}