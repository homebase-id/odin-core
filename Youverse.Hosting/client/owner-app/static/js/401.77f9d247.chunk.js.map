{"version":3,"file":"static/js/401.77f9d247.chunk.js","mappings":"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","sources":["components/Connection/PersonActive/PersonActive.tsx","components/Connection/PersonCard/PersonCard.tsx","components/Connection/PersonIncomingRequest/PersonIncomingRequest.tsx","components/Form/Input.tsx","components/Form/Textarea.tsx","components/Sections/CollapsableSection.tsx","components/Connection/PersonOutgoingRequest/PersonOutgoingRequest.tsx","components/Dialog/ConnectionDialogs/OutgoingConnectionDialog.tsx","components/Templates/Connections/Connections.tsx","hooks/connections/useConnections.ts"],"sourcesContent":["import { t } from '../../../helpers/i18n/dictionary';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport { DotYouProfile } from '../../../provider/connections/CircleDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonActive = ({\n  dotYouProfile,\n\n  className,\n}: {\n  dotYouProfile: DotYouProfile;\n  className: string;\n}) => {\n  const { mutate: disconnect, status: disconnectStatus } = useConnection({}).disconnect;\n\n  return (\n    <PersonCard\n      className={className}\n      dotYouId={dotYouProfile.dotYouId}\n      href={(dotYouProfile.dotYouId && `/owner/connections/${dotYouProfile.dotYouId}`) ?? undefined}\n    >\n      <ActionButton\n        type=\"secondary\"\n        className=\"w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          disconnect({ connectionDotYouId: dotYouProfile.dotYouId });\n        }}\n        state={disconnectStatus}\n        confirmOptions={{\n          title: `${t('Remove')} ${dotYouProfile.dotYouId}`,\n          buttonText: t('Remove'),\n          body: `${t('Are you sure you want to remove')} ${dotYouProfile.dotYouId} ${t(\n            'from your connections. They will lose all existing access.'\n          )}`,\n        }}\n      >\n        Remove\n      </ActionButton>\n    </PersonCard>\n  );\n};\n\nexport default PersonActive;\n","import { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport useContact from '../../../hooks/contact/useContact';\nimport useImage from '../../../hooks/media/useImage';\nimport { ContactConfig } from '../../../provider/contact/ContactTypes';\nimport FallbackImg from '../../FallbackImg/FallbackImg';\nimport LoadingParagraph from '../../Loaders/LoadingParagraph/LoadingParagraph';\n\nconst PersonCard = ({\n  dotYouId,\n  href,\n  isChecked,\n  className,\n  children,\n  onClick,\n}: {\n  dotYouId: string;\n  href?: string;\n  isChecked?: boolean;\n  className: string;\n  children?: ReactNode;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n}) => {\n  const Wrapper = ({ children }) => (href ? <Link to={href}>{children}</Link> : <>{children}</>);\n  const { data: contactData, isLoading } = useContact({\n    dotYouId: dotYouId,\n  }).fetch;\n  const { data: imageUrl } = useImage(\n    contactData?.imageFileId || undefined,\n    ContactConfig.ContactTargetDrive\n  ).fetch;\n\n  if (isLoading) {\n    return <LoadingParagraph className={`aspect-[3/5] ${className}`} />;\n  }\n\n  const nameData = contactData?.name;\n  const fullName = nameData ? `${nameData.givenName ?? ''} ${nameData.surname ?? ''}` : dotYouId;\n  const getInitials = () => {\n    if (nameData) {\n      return nameData.givenName?.[0] + nameData.surname?.[0] + '';\n    }\n\n    const splittedDomain = dotYouId?.split('.');\n    if (splittedDomain?.length >= 2) {\n      return splittedDomain[0][0] + splittedDomain[1][0] + '';\n    }\n\n    return '--';\n  };\n\n  return (\n    <div className={className}>\n      <Wrapper>\n        <div\n          className={`h-full rounded-md border bg-white transition-colors  ${\n            isChecked\n              ? 'border-4 border-indigo-500 dark:border-indigo-700'\n              : isChecked === false\n              ? 'border-4'\n              : 'border-gray-200 border-opacity-60 dark:border-gray-800 dark:bg-gray-800'\n          }`}\n          onClick={onClick}\n        >\n          <div className=\"aspect-square\">\n            {'image' in contactData && contactData.image ? (\n              <figure className={'relative overflow-hidden'}>\n                <img\n                  src={contactData.image.url}\n                  width={contactData.image.pixelWidth}\n                  height={contactData.image.pixelHeight}\n                  className=\"aspect-square w-full object-cover\"\n                />\n              </figure>\n            ) : contactData.imageFileId ? (\n              <figure className={'relative overflow-hidden'}>\n                <img src={imageUrl} className=\"aspect-square object-cover \" />\n              </figure>\n            ) : (\n              <FallbackImg initials={getInitials()} />\n            )}\n          </div>\n          <div className=\"p-2\">\n            <h2 className=\"font-thiner mb-6 dark:text-white\">{fullName ?? dotYouId}</h2>\n            {children}\n          </div>\n        </div>\n      </Wrapper>\n    </div>\n  );\n};\n\nexport default PersonCard;\n","import { ReactNode, useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport ActionButton from '../../Buttons/ActionButton';\nimport IncomingConnectionDialog from '../../Dialog/ConnectionDialogs/IncomingConnectionDialog';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonIncomingRequest = ({\n  senderDotYouId,\n  children,\n  className,\n}: {\n  senderDotYouId: string;\n  children?: ReactNode;\n  className: string;\n}) => {\n  const {\n    ignoreRequest: { mutateAsync: ignoreRequest, status: ignoreRequestStatus },\n  } = useConnection({});\n\n  const [isAcceptDialogOpen, setIsAcceptDialogOpen] = useState(false);\n\n  return (\n    <>\n      <PersonCard\n        className={className}\n        dotYouId={senderDotYouId}\n        href={(senderDotYouId && `/owner/connections/${senderDotYouId}`) ?? undefined}\n      >\n        {children}\n        <ActionButton\n          type=\"primary\"\n          className=\"mb-2 w-full\"\n          onClick={(e) => {\n            e.preventDefault();\n            setIsAcceptDialogOpen(true);\n            return false;\n          }}\n        >\n          {t('Confirm')}...\n        </ActionButton>\n        <ActionButton\n          type=\"secondary\"\n          className=\"mb-2 w-full\"\n          onClick={async (e) => {\n            e.preventDefault();\n            await ignoreRequest({ senderDotYouId: senderDotYouId });\n\n            return false;\n          }}\n          state={ignoreRequestStatus}\n        >\n          {t('Ignore')}\n        </ActionButton>\n      </PersonCard>\n      <IncomingConnectionDialog\n        isOpen={isAcceptDialogOpen}\n        senderDotYouId={senderDotYouId}\n        title={t('Accept connection request')}\n        confirmText={t('Accept and give access')}\n        onConfirm={async () => {\n          setIsAcceptDialogOpen(false);\n        }}\n        onCancel={() => {\n          setIsAcceptDialogOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default PersonIncomingRequest;\n","const Input = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n) => {\n  return (\n    <input\n      {...props}\n      type={props.type ?? 'input'}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-300 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    />\n  );\n};\n\nexport default Input;\n","const Textarea = (\n  props: React.DetailedHTMLProps<\n    React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >\n) => {\n  return (\n    <textarea\n      {...props}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    />\n  );\n};\n\nexport default Textarea;\n","import { ReactNode, useEffect, useRef, useState } from 'react';\nimport Arrow from '../Icons/Arrow/Arrow';\n\nconst CollapsableSection = ({\n  isOpenByDefault = true,\n  title,\n  className,\n  children,\n  isOpaqueBg = false,\n  isBorderLess = false,\n}: {\n  isOpenByDefault?: boolean;\n  title: ReactNode;\n  className?: string;\n  children: ReactNode;\n  isOpaqueBg?: boolean;\n  isBorderLess?: boolean;\n}) => {\n  const [isOpen, setIsOpen] = useState(isOpenByDefault);\n  const sectionContainerRef = useRef<HTMLDivElement>(null);\n  const height = useRef(0);\n\n  useEffect(() => {\n    if (isOpenByDefault && sectionContainerRef.current) {\n      height.current = sectionContainerRef.current.clientHeight;\n    }\n    // Todo apply FLIP approach (when not open by default) to calculate the to-be height when we can't use the height of the open state\n  }, [isOpen]);\n\n  return (\n    <section\n      className={`my-5 rounded-md ${\n        isOpaqueBg\n          ? isBorderLess\n            ? ''\n            : 'rounded-lg border-[1px] border-gray-200 border-opacity-80 px-5 dark:border-gray-700'\n          : 'bg-slate-50 px-5 dark:bg-slate-800 dark:text-slate-300'\n      } ${className}`}\n    >\n      <div\n        className={`relative cursor-pointer border-b-[1px] border-slate-200 py-5 transition-all duration-300 ${\n          isOpen ? 'border-opacity-100' : 'border-opacity-0'\n        }`}\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <h3 className=\"text-2xl dark:text-white\">{title}</h3>\n        <button className=\"absolute top-0 right-0 bottom-0\">\n          <Arrow\n            className={`h-4 w-4 transition-transform duration-300 ${\n              isOpen ? 'rotate-90' : '-rotate-90'\n            }`}\n          />\n        </button>\n      </div>\n      <div\n        className={`overflow-hidden transition-all duration-300 `}\n        style={{ maxHeight: `${isOpen ? (height.current ? height.current : 2000) : 0}px` }}\n        ref={sectionContainerRef}\n      >\n        <div className=\"py-5 \">{children}</div>\n      </div>\n    </section>\n  );\n};\n\nexport default CollapsableSection;\n","import useConnection from '../../../hooks/connection/useConnection';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonOutgoingRequest = ({\n  recipientDotYouId,\n  className,\n}: {\n  recipientDotYouId: string;\n  className: string;\n}) => {\n  const { mutate: revokeRequest, status: revokeRequestStatus } = useConnection(\n    {}\n  ).revokeConnectionRequest;\n\n  return (\n    <PersonCard\n      className={className}\n      dotYouId={recipientDotYouId}\n      href={(recipientDotYouId && `/owner/connections/${recipientDotYouId}`) ?? undefined}\n    >\n      <ActionButton\n        type=\"secondary\"\n        className=\"mb-2 w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          revokeRequest({ targetDotYouId: recipientDotYouId });\n          return false;\n        }}\n        state={revokeRequestStatus}\n      >\n        Cancel\n      </ActionButton>\n    </PersonCard>\n  );\n};\n\nexport default PersonOutgoingRequest;\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport useFocusedEditing from '../../../hooks/focusedEditing/useFocusedEditing';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport NameSelector from '../../Form/NameSelector';\nimport PhotoSelector from '../../Form/PhotoSelector';\nimport Textarea from '../../Form/Textarea';\nimport CirclePermissionView from '../../PermissionViews/CirclePermissionView/CirclePermissionView';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst OutgoingConnectionDialog = ({\n  title,\n  isOpen,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const {\n    mutate: sendConnectionRequest,\n    status: sendConnectionRequestStatus,\n    reset: resetConnectionRequest,\n  } = useConnection({}).sendConnectionRequest;\n  const { data: circles } = useCircles().fetch;\n  const checkReturnTo = useFocusedEditing();\n\n  const [connectionTarget, setConnectionTarget] = useState('samwise.digital');\n  const [message, setMessage] = useState('Hi, I would like to connect with you');\n  const [name, setName] = useState<{ givenName: string; surname: string }>({\n    givenName: 'Frodo',\n    surname: 'Underhill',\n  });\n  const [photoFileId, setPhotoFileId] = useState<string>(null);\n  const [circleGrants, setCircleGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel} size=\"2xlarge\">\n      <>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            sendConnectionRequest(\n              {\n                message: message,\n                name: name,\n                photoFileId: photoFileId,\n                targetDotYouId: connectionTarget,\n                circleIds: circleGrants,\n              },\n              {\n                onSuccess: () => {\n                  checkReturnTo();\n\n                  resetConnectionRequest();\n                  setConnectionTarget('');\n                  setMessage('');\n                  setCircleGrants([]);\n\n                  onConfirm();\n                },\n              }\n            );\n          }}\n        >\n          <div className=\"mb-5\">\n            <label htmlFor=\"dotyouid\">Recipient (dot you id)</label>\n            <Input\n              id=\"dotyouid\"\n              name=\"dotyouid\"\n              onChange={(e) => {\n                setConnectionTarget(e.target.value);\n              }}\n              defaultValue={connectionTarget}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"message\">{t('Message')}</label>\n            <Textarea\n              id=\"message\"\n              name=\"message\"\n              defaultValue={message}\n              onChange={(e) => {\n                setMessage(e.target.value);\n              }}\n              required\n            />\n          </div>\n\n          <h2 className=\"mb-2 text-lg\">{t('Your contact info')}:</h2>\n          <div className=\"mb-5\">\n            <label htmlFor=\"dotyouid\">{t('Name')}:</label>\n            <NameSelector\n              id=\"name\"\n              name=\"name\"\n              defaultValue={`${name.givenName}+${name.surname}`}\n              required\n              onChange={(e) => {\n                const split = e.target.value.split('+');\n                setName({ givenName: split[0], surname: split[1] });\n              }}\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"name\">{t('Photo')}:</label>\n            <PhotoSelector\n              id=\"name\"\n              defaultValue={photoFileId}\n              onChange={(e) => {\n                setPhotoFileId(e.target.value || undefined);\n              }}\n              fallbackInitials={`${name?.givenName?.[0] ?? ''}${name?.surname?.[0] ?? ''}`}\n            />\n          </div>\n\n          {circles.length ? (\n            <>\n              <h2 className=\"mb-2 text-lg\">{t('Add as member to one or more circles')}:</h2>\n\n              {circles.map((circle, index) => {\n                const checked = circleGrants.some((circleGrant) => circleGrant === circle.id);\n                return (\n                  <CirclePermissionView\n                    circleDef={circle}\n                    key={circle.id ?? index}\n                    className={`my-4 w-full select-none rounded-lg border-2 p-4`}\n                    isChecked={checked}\n                    onClick={() => {\n                      const newCircleGrants = [...circleGrants];\n                      if (!newCircleGrants.some((circleGrant) => circleGrant === circle.id)) {\n                        newCircleGrants.push(circle.id);\n                        setCircleGrants(newCircleGrants);\n                      } else {\n                        setCircleGrants(\n                          newCircleGrants.filter((circleId) => circleId !== circle.id)\n                        );\n                      }\n                    }}\n                  />\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-m-2 flex flex-row-reverse py-3\">\n            <ActionButton className=\"m-2\" state={sendConnectionRequestStatus} icon={'send'}>\n              {t('Send')}\n            </ActionButton>\n            <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default OutgoingConnectionDialog;\n","import PageMeta from '../../Layout/PageMeta/PageMeta';\nimport useConnections from '../../../hooks/connections/useConnections';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonIncomingRequest from '../../Connection/PersonIncomingRequest/PersonIncomingRequest';\nimport PersonOutgoingRequest from '../../Connection/PersonOutgoingRequest/PersonOutgoingRequest';\nimport PersonActive from '../../Connection/PersonActive/PersonActive';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Section from '../../Sections/Section';\nimport CollapsableSection from '../../Sections/CollapsableSection';\nimport OutgoingConnectionDialog from '../../Dialog/ConnectionDialogs/OutgoingConnectionDialog';\nimport { useState } from 'react';\nimport Persons from '../../Icons/Persons/Persons';\nimport LoadingParagraph from '../../Loaders/LoadingParagraph/LoadingParagraph';\n\nconst Connections = () => {\n  const {\n    fetchPending: { data: pendingConnections, isLoading: pendingConnectionsLoading },\n    fetchActive: { data: activeConnections, isLoading: activeConnectionsLoading },\n    fetchSent: { data: sentRequests, isLoading: sentRequestsLoading },\n  } = useConnections();\n\n  const [isSentConnectionOpen, setIsSentConnectionOpen] = useState(false);\n\n  return (\n    <>\n      <section>\n        <PageMeta\n          icon={Persons}\n          title={'Connections'}\n          actions={\n            <>\n              <ActionButton\n                onClick={() => setIsSentConnectionOpen(true)}\n                icon={'plus'}\n                className=\"m-2\"\n              >\n                {t('Send request')}\n              </ActionButton>\n            </>\n          }\n        />\n\n        {!pendingConnections?.length &&\n        !activeConnections?.length &&\n        !sentRequests?.length &&\n        !pendingConnectionsLoading &&\n        !activeConnectionsLoading &&\n        !sentRequestsLoading ? (\n          <div className=\"flex flex-row\">\n            <p className=\"my-auto\">\n              {t('Mmh, this looks empty... Time to add some connections?')}{' '}\n            </p>\n            <ActionButton\n              onClick={(e) => {\n                e.preventDefault();\n                setIsSentConnectionOpen(true);\n\n                return false;\n              }}\n              type=\"secondary\"\n              className=\"ml-2\"\n            >\n              {t('Add')}\n            </ActionButton>\n          </div>\n        ) : null}\n\n        {!pendingConnectionsLoading && pendingConnections?.length ? (\n          <Section isOpaqueBg={true} isBorderLess={true} title={t('Connection requests')}>\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {pendingConnections?.map((pendingConnection) => (\n                <PersonIncomingRequest\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  senderDotYouId={pendingConnection.senderDotYouId}\n                  key={pendingConnection.senderDotYouId}\n                >\n                  <div className=\"-mt-3\">\n                    <p className=\"mb-3 text-sm\">{pendingConnection.message}</p>\n                  </div>\n                </PersonIncomingRequest>\n              ))}\n            </div>\n          </Section>\n        ) : null}\n\n        {activeConnections?.length || activeConnectionsLoading ? (\n          <Section isOpaqueBg={true} isBorderLess={true} title={t('Your Connections')}>\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {activeConnectionsLoading && (\n                <>\n                  <LoadingParagraph className=\"m-1 aspect-square w-1/2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n                  <LoadingParagraph className=\"m-1 aspect-square w-1/2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n                </>\n              )}\n\n              {activeConnections?.map((activeConnection) => (\n                <PersonActive\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  dotYouProfile={activeConnection}\n                  key={activeConnection.dotYouId}\n                />\n              ))}\n            </div>\n          </Section>\n        ) : null}\n\n        {!sentRequestsLoading && sentRequests?.length ? (\n          <CollapsableSection\n            isOpaqueBg={true}\n            isBorderLess={true}\n            isOpenByDefault={true}\n            title={t('Sent Connection Requests')}\n          >\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {sentRequests?.map((sentRequest) => (\n                <PersonOutgoingRequest\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  recipientDotYouId={sentRequest.recipient}\n                  key={sentRequest.recipient}\n                />\n              ))}\n            </div>\n          </CollapsableSection>\n        ) : null}\n      </section>\n      <OutgoingConnectionDialog\n        title={t('Send connection request')}\n        isOpen={isSentConnectionOpen}\n        onConfirm={() => setIsSentConnectionOpen(false)}\n        onCancel={() => setIsSentConnectionOpen(false)}\n      />\n    </>\n  );\n};\n\nexport default Connections;\n","import { useQuery } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useConnections = ({ pageSize }: { pageSize: number } = { pageSize: 10 }) => {\n  const { getSharedSecret } = useAuth();\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n\n  const fetchPendingConnections = async ({ pageSize }: { pageSize: number }) => {\n    return await (\n      await circleNetworkRequestProvider.getPendingRequests({ pageNumber: 1, pageSize: pageSize })\n    ).results;\n  };\n\n  const fetchSentRequests = async ({ pageSize }: { pageSize: number }) => {\n    return await (\n      await circleNetworkRequestProvider.getSentRequests({ pageNumber: 1, pageSize: pageSize })\n    ).results;\n  };\n\n  const fetchConnections = async ({ pageSize }: { pageSize: number }) => {\n    return await (\n      await circleNetworkProvider.getConnections({ pageNumber: 1, pageSize: pageSize })\n    ).results;\n  };\n\n  return {\n    fetchPending: useQuery(\n      ['pendingConnections', pageSize],\n      () => fetchPendingConnections({ pageSize }),\n      {\n        refetchOnWindowFocus: false,\n        onError: (err) => console.error(err),\n      }\n    ),\n    fetchSent: useQuery(['sentRequests', pageSize], () => fetchSentRequests({ pageSize }), {\n      refetchOnWindowFocus: false,\n      onError: (err) => console.error(err),\n    }),\n    fetchActive: useQuery(['activeConnections', pageSize], () => fetchConnections({ pageSize }), {\n      refetchOnWindowFocus: false,\n      onError: (err) => console.error(err),\n    }),\n  };\n};\n\nexport default useConnections;\n"],"names":["dotYouProfile","className","useConnection","disconnect","mutate","disconnectStatus","status","dotYouId","href","undefined","type","onClick","e","preventDefault","connectionDotYouId","state","confirmOptions","title","t","buttonText","body","isChecked","children","Wrapper","to","useContact","fetch","contactData","data","isLoading","imageUrl","useImage","imageFileId","ContactConfig","nameData","name","fullName","givenName","surname","image","src","url","width","pixelWidth","height","pixelHeight","initials","splittedDomain","split","length","getInitials","senderDotYouId","ignoreRequest","mutateAsync","ignoreRequestStatus","useState","isAcceptDialogOpen","setIsAcceptDialogOpen","isOpen","confirmText","onConfirm","onCancel","props","isOpenByDefault","isOpaqueBg","isBorderLess","setIsOpen","sectionContainerRef","useRef","useEffect","current","clientHeight","style","maxHeight","ref","recipientDotYouId","revokeConnectionRequest","revokeRequest","revokeRequestStatus","PersonCard","ActionButton","targetDotYouId","target","usePortal","sendConnectionRequest","sendConnectionRequestStatus","resetConnectionRequest","reset","circles","useCircles","checkReturnTo","useFocusedEditing","connectionTarget","setConnectionTarget","message","setMessage","setName","photoFileId","setPhotoFileId","circleGrants","setCircleGrants","dialog","DialogWrapper","onClose","size","onSubmit","circleIds","onSuccess","htmlFor","Input","id","onChange","value","defaultValue","required","Textarea","NameSelector","PhotoSelector","fallbackInitials","map","circle","index","checked","some","circleGrant","CirclePermissionView","circleDef","newCircleGrants","filter","circleId","push","icon","createPortal","useConnections","fetchPending","pendingConnections","pendingConnectionsLoading","fetchActive","activeConnections","activeConnectionsLoading","fetchSent","sentRequests","sentRequestsLoading","isSentConnectionOpen","setIsSentConnectionOpen","PageMeta","Persons","actions","Section","pendingConnection","PersonIncomingRequest","LoadingParagraph","activeConnection","PersonActive","CollapsableSection","sentRequest","recipient","pageSize","useAuth","getSharedSecret","circleNetworkRequestProvider","CircleNetworkRequestProvider","circleNetworkProvider","CircleNetworkProvider","fetchPendingConnections","getPendingRequests","pageNumber","results","fetchSentRequests","getSentRequests","fetchConnections","getConnections","useQuery","refetchOnWindowFocus","onError","err","console","error"],"sourceRoot":""}