{"version":3,"file":"static/js/255.d41475de.chunk.js","mappings":"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","sources":["components/Dialog/ConnectionDialogs/IncomingConnectionDialog.tsx","components/Form/Checkbox.tsx","components/Sections/Section.tsx","helpers/common.ts","hooks/circles/useCircles.ts","hooks/connection/useConnection.ts","provider/connections/CircleNetworkProvider.ts","provider/connections/CircleNetworkRequestProvider.ts"],"sourcesContent":["import { ReactNode, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Checkbox from '../../Form/Checkbox';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst IncomingConnectionDialog = ({\n  title,\n  confirmText,\n\n  children,\n\n  isOpen,\n\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  children: ReactNode;\n\n  isOpen: boolean;\n\n  onConfirm: (circleGrants: string[]) => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  const { data: circles } = useCircles().fetch;\n\n  const [circleGrants, setCircleGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            onConfirm(circleGrants);\n          }}\n        >\n          {children && <div className=\"mt-2\">{children}</div>}\n          {circles.length ? (\n            <>\n              <h2 className=\"my-4 text-lg\">{t('Add as member to')}:</h2>\n\n              {circles.map((circle, index) => {\n                return (\n                  <div key={circle.id ?? index} className=\"mb-2\">\n                    <Checkbox\n                      value={circle.id}\n                      id={circle.id}\n                      onChange={(e) => {\n                        const newCircleGrants = [...circleGrants];\n                        if (e.target.checked) {\n                          newCircleGrants.push(e.target.value);\n                          setCircleGrants(newCircleGrants);\n                        } else {\n                          setCircleGrants(\n                            newCircleGrants.filter((circleId) => circleId !== e.target.value)\n                          );\n                        }\n                      }}\n                    />\n                    <label htmlFor={circle.id} className=\"ml-2 cursor-pointer\">\n                      {circle.name}\n                    </label>\n                  </div>\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-m-2 flex flex-row-reverse py-3\">\n            <ActionButton className=\"m-2\" icon={'send'}>\n              {confirmText ?? t('Accept')}\n            </ActionButton>\n            <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default IncomingConnectionDialog;\n","const Checkbox = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n) => {\n  return (\n    <input\n      {...props}\n      type=\"checkbox\"\n      className={`h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-blue-600 ${props.className}`}\n    />\n  );\n};\n\nexport default Checkbox;\n","import { ReactNode } from 'react';\n\nconst Section = ({\n  title,\n  className,\n  children,\n  isOpaqueBg = false,\n  isBorderLess = false,\n}: {\n  title?: ReactNode;\n  className?: string;\n  children: ReactNode;\n  isOpaqueBg?: boolean;\n  isBorderLess?: boolean;\n}) => {\n  return (\n    <section\n      className={`my-5 rounded-md ${\n        isOpaqueBg\n          ? isBorderLess\n            ? ''\n            : 'rounded-lg border-[1px] border-gray-200 border-opacity-80 px-5 dark:border-gray-700'\n          : 'bg-slate-50 px-5 dark:bg-slate-800'\n      } dark:text-slate-300 ${className ?? ''}`}\n    >\n      {title ? (\n        <div\n          className={`relative border-b-[1px] border-gray-200 border-opacity-80 py-5 transition-all duration-300 dark:border-gray-700`}\n        >\n          <h3 className=\"text-2xl dark:text-white\">{title}</h3>\n        </div>\n      ) : null}\n      <div className=\"py-5 \">{children}</div>\n    </section>\n  );\n};\n\nexport default Section;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { CircleProvider } from '../../provider/connections/CircleProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useCircles = () => {\n  const { getSharedSecret } = useAuth();\n  const circleProvider = CircleProvider.getInstance(getSharedSecret());\n\n  const fetchAll = async () => {\n    return await circleProvider.getCircles();\n  };\n\n  return {\n    fetch: useQuery(['circles'], () => fetchAll(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useCircles;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport {ConnectionRequest} from \"../../provider/connections/CircleDataTypes\";\nimport useAuth from '../auth/useAuth';\n\nconst useConnection = ({ dotYouId }: { dotYouId?: string }) => {\n  const queryClient = useQueryClient();\n\n  const { getSharedSecret } = useAuth();\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n\n  const fetchSingle = async ({ dotYouId }: { dotYouId: string }) => {\n    if (!dotYouId) {\n      return;\n    }\n\n    const connectionInfo = await circleNetworkProvider.getConnectionInfo(dotYouId);\n    if (connectionInfo && connectionInfo.status !== 'None') {\n      return connectionInfo;\n    }\n\n    const pendingRequest = await circleNetworkRequestProvider.getPendingRequest(dotYouId);\n    if (pendingRequest) {\n      return pendingRequest;\n    }\n\n    const sentRequest = await circleNetworkRequestProvider.getSentRequest(dotYouId);\n    return sentRequest ?? connectionInfo;\n  };\n\n  const disconnect = async ({ connectionDotYouId }: { connectionDotYouId?: string }) => {\n    return await circleNetworkProvider.disconnectFromContact(connectionDotYouId ?? dotYouId);\n  };\n\n  const sendConnectionRequest = async ({\n    targetDotYouId,\n    message,\n    name,\n    circleIds,\n  }: {\n    targetDotYouId: string;\n    message: string;\n    name: string;\n    circleIds: string[];\n  }) => {\n    await circleNetworkRequestProvider.sendRequest(targetDotYouId, message, name, circleIds);\n    return { targetDotYouId };\n  };\n\n  const revokeConnectionRequest = async ({ targetDotYouId }: { targetDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deleteSentRequest(targetDotYouId);\n  };\n\n  const acceptRequest = async ({\n    senderDotYouId,\n    circleIds,\n  }: {\n    senderDotYouId: string;\n    circleIds: string[];\n  }) => {\n    await circleNetworkRequestProvider.acceptConnectionRequest(senderDotYouId, circleIds);\n    return { senderDotYouId };\n  };\n\n  const ignoreRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deletePendingRequest(senderDotYouId);\n  };\n\n  return {\n    fetch: useQuery(['connectionInfo', dotYouId], () => fetchSingle({ dotYouId }), {\n      refetchOnWindowFocus: false,\n    }),\n\n    disconnect: useMutation(disconnect, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    sendConnectionRequest: useMutation(sendConnectionRequest, {\n      onMutate: async (newRequest) => {\n        await queryClient.cancelQueries(['sentRequests']);\n\n        const previousRequests: ConnectionRequest[] = queryClient.getQueryData(['sentRequests']);\n        const newRequests = [\n          {\n            status: 'sent',\n            recipient: newRequest.targetDotYouId,\n          },\n          ...previousRequests,\n        ];\n\n        queryClient.setQueryData(['sentRequests'], newRequests);\n\n        return { previousRequests, newRequest };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['sentRequests'], context.previousRequests);\n      },\n      onSettled: (data) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', data.targetDotYouId]);\n      },\n    }),\n    revokeConnectionRequest: useMutation(revokeConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    acceptRequest: useMutation(acceptRequest, {\n      onMutate: async (newRequest) => {\n        await queryClient.cancelQueries(['activeConnections']);\n\n        const previousConnections: ConnectionRequest[] = queryClient.getQueryData([\n          'activeConnections',\n        ]);\n        const newConnections = [\n          {\n            status: 'pending', // Set to pending to not update the connetion details page yet, as we don't have the data for that\n            dotYouId: newRequest.senderDotYouId,\n          },\n          ...previousConnections,\n        ];\n\n        queryClient.setQueryData(['activeConnections'], newConnections);\n\n        return { previousConnections, newRequest };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['activeConnections'], context.previousConnections);\n      },\n      onSettled: (data) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', data.senderDotYouId]);\n      },\n    }),\n    ignoreRequest: useMutation(ignoreRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useConnection;\n","import { ConnectionInfo, DotYouIdRequest, DotYouProfile } from './CircleDataTypes';\nimport { PagedResult, PagingOptions } from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport { stringify } from '../../helpers/common';\n\n//Handles management of established connections\nexport class CircleNetworkProvider extends OwnerProviderBase {\n  private static instance: CircleNetworkProvider;\n  private root = '/circles/connections';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async blockDotYouId(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/block';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async disconnectFromContact(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/disconnect';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getConnections(data: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/connected?' + stringify(data);\n    return client.post(url, data).then((response) => {\n      return response.data;\n    });\n  }\n\n  async getBlockedConnections(params: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/blocked?' + stringify(params);\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  getConnectionInfo(dotYouId: string): Promise<ConnectionInfo> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/status';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n  public static getInstance(sharedSecret): CircleNetworkProvider {\n    if (!CircleNetworkProvider.instance) {\n      CircleNetworkProvider.instance = new CircleNetworkProvider(sharedSecret);\n    }\n\n    return CircleNetworkProvider.instance;\n  }\n}\n","import {\n  AcceptRequestHeader,\n  ConnectionRequest,\n  ConnectionRequestHeader,\n  DotYouIdRequest,\n} from './CircleDataTypes';\nimport { PagedResult, PagingOptions } from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport { stringify } from '../../helpers/common';\n\n//Handles making and reading requests to connect with others\nexport class CircleNetworkRequestProvider extends OwnerProviderBase {\n  private static instance: CircleNetworkRequestProvider;\n\n  private Root = '/circles/requests';\n  private SentPathRoot: string = this.Root + '/sent';\n  private PendingPathRoot: string = this.Root + '/pending';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async getPendingRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getPendingRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/single';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: 'Pending' };\n      })\n      .catch(() => {\n        return undefined;\n      });\n  }\n\n  async getSentRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getSentRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/single';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: 'Sent' };\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          return null;\n        }\n        super.handleErrorResponse(err);\n      });\n  }\n\n  async acceptConnectionRequest(dotYouId: string, circleIds?: string[]): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/accept/';\n\n    const header: AcceptRequestHeader = {\n      sender: dotYouId,\n      circleIds: circleIds,\n      permissions: null,\n    };\n\n    return client\n      .post(url, header)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deletePendingRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/delete';\n\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deleteSentRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/delete';\n    //TODO: encrypt payload with shared secret when server requires it\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async sendRequest(\n    dotYouId: string,\n    message: string,\n    name: string,\n    circleIds: string[]\n  ): Promise<boolean> {\n    const url = this.Root + '/sendrequest';\n    const data: ConnectionRequestHeader = {\n      recipient: dotYouId,\n      message: message,\n      name: name,\n      circleIds: circleIds,\n    };\n\n    const client = super.createAxiosClient();\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  public static getInstance(sharedSecret): CircleNetworkRequestProvider {\n    if (!CircleNetworkRequestProvider.instance) {\n      CircleNetworkRequestProvider.instance = new CircleNetworkRequestProvider(sharedSecret);\n    }\n\n    return CircleNetworkRequestProvider.instance;\n  }\n}\n"],"names":["title","confirmText","children","isOpen","onConfirm","onCancel","target","usePortal","circles","useCircles","fetch","data","useState","circleGrants","setCircleGrants","dialog","onClose","onSubmit","e","preventDefault","className","length","t","map","circle","index","value","id","onChange","newCircleGrants","checked","push","filter","circleId","htmlFor","name","icon","type","onClick","createPortal","props","isOpaqueBg","isBorderLess","convertTextToSlug","text","split","join","toLowerCase","stringify","obj","Object","keys","key","getSharedSecret","useAuth","circleProvider","CircleProvider","fetchAll","getCircles","useQuery","refetchOnWindowFocus","dotYouId","queryClient","useQueryClient","circleNetworkProvider","CircleNetworkProvider","circleNetworkRequestProvider","CircleNetworkRequestProvider","fetchSingle","getConnectionInfo","connectionInfo","status","getPendingRequest","pendingRequest","getSentRequest","sentRequest","disconnect","connectionDotYouId","disconnectFromContact","sendConnectionRequest","targetDotYouId","message","circleIds","sendRequest","revokeConnectionRequest","deleteSentRequest","acceptRequest","senderDotYouId","acceptConnectionRequest","ignoreRequest","deletePendingRequest","useMutation","onSuccess","param","invalidateQueries","onError","ex","console","error","onMutate","newRequest","cancelQueries","previousRequests","getQueryData","newRequests","recipient","setQueryData","err","newData","context","onSettled","previousConnections","newConnections","sharedSecret","root","client","url","this","post","then","response","catch","params","get","instance","OwnerProviderBase","Root","SentPathRoot","PendingPathRoot","header","sender","permissions"],"sourceRoot":""}