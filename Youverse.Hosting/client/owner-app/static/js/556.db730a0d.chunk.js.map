{"version":3,"file":"static/js/556.db730a0d.chunk.js","mappings":"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","sources":["components/PermissionViews/DrivePermissionRequestView/DrivePermissionRequestView.tsx","components/Templates/RegisterAppClient/RegisterAppClient.tsx"],"sourcesContent":["import { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useDrive from '../../../hooks/drive/useDrive';\nimport { DriveGrantRequest } from '../../../provider/app/AppManagementProviderTypes';\nimport { drivePermissionLevels } from '../../../provider/permission/permissionLevels';\nimport HardDrive from '../../Icons/HardDrive/HardDrive';\nimport { getAccessFromPermissionNumber } from '../../Templates/DemoData/helpers';\n\nconst DrivePermissionRequestView = ({\n  driveGrant,\n  permissionTree,\n  className,\n}: {\n  driveGrant: DriveGrantRequest;\n  permissionTree?: string;\n  className?: string;\n}) => {\n  const { data: drive } = useDrive({ targetDrive: driveGrant.permissionedDrive.drive }).fetch;\n\n  const WrapperLink = ({ children }: { children: ReactNode }) => {\n    return drive ? (\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"contents\"\n      >\n        {children}\n      </Link>\n    ) : (\n      <>{children}</>\n    );\n  };\n\n  return (\n    <div\n      key={`${driveGrant.permissionedDrive.drive.alias}-${driveGrant.permissionedDrive.drive.type}`}\n      className={`flex flex-row ${className}`}\n      title={permissionTree}\n    >\n      <WrapperLink>\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"flex flex-col\">\n          <p className={`leading-none ${!permissionTree ? 'my-auto' : ''}`}>\n            {drive?.name ?? `${t('New')} ${driveGrant.driveMeta?.name}`}:{' '}\n            {getAccessFromPermissionNumber(driveGrant.permissionedDrive.permission, drivePermissionLevels).name}\n          </p>\n          {permissionTree && <small className=\"ml-1\">{permissionTree}</small>}\n        </div>\n      </WrapperLink>\n    </div>\n  );\n};\n\nexport default DrivePermissionRequestView;\n","import {DriveGrantRequest, PermissionSet} from '../../../provider/app/AppManagementProviderTypes';\nimport useApp from '../../../hooks/app/useApp';\nimport ActionButton, {mergeStates} from '../../Buttons/ActionButton';\nimport Section from '../../Sections/Section';\n\nimport PermissionView from '../../PermissionViews/PermissionView/PermissionView';\nimport DrivePermissionView from '../../PermissionViews/DrivePermissionView/DrivePermissionView';\nimport DrivePermissionRequestView from '../../PermissionViews/DrivePermissionRequestView/DrivePermissionRequestView';\nimport {useState} from 'react';\nimport {useSearchParams} from 'react-router-dom';\n\n// https://frodo.digital/owner/appreg?n=Chatr&appId=0babb1e6-7604-4bcd-b1fb-87e959226492&fn=My%20Phone&p=10,30&d=%5B%7B%22a%22%3A%22ZmFhYWFhYWEtMmQ2OC00ZGQyLTgxOTYtNjY5YzIxZTkyN2Vh%22%2C%22t%22%3A%22ZmFiYmJiYmItMmQ2OC00ZGQyLTgxOTYtNjY5YzIxZTkyN2Vh%22%2C%22n%22%3A%22Chat%20Drive%22%2C%22d%22%3A%22Chat%20Drive%22%2C%22p%22%3A5%7D%5D&ui=minimal&return=odin-chat://&pk=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtP9KKODoOZpNGXQy4IdyyBJJO3HJPkbg%2FLXwR5SQGxWWuLpv2THnZoSHqaDl6YWQ3OWCndY22Q0RJZkDBuqqJyn%2B8ErpMdgtJuMhFOpEU2h9nLGeI7BIWENkuqlqBh56YC8qdfYhfpdcv53p106o%2Bi93%2Bzeb0GvfLN6fk1y8o4Rd56DBHXn9zjjDaLWa8m8EDXgZKs7waziPFArIphh0W06Wnb4wCa%2F%2B1HEULhH%2BsIY7bGpoQvgP7xucHZGrqkRmg5X2XhleBIXWYCD7QUM6PvKHdqUSrFkl9Z2UU1SkVAhUUH4UxfwyLQKHXxC7IhKu2VSOXK4%2FkjGua6iW%2BXUQtwIDAQAB\n\n// encodeURIComponent(JSON.stringify([{\n//   a: 'ZmFhYWFhYWEtMmQ2OC00ZGQyLTgxOTYtNjY5YzIxZTkyN2Vh',\n//   t: 'ZmFiYmJiYmItMmQ2OC00ZGQyLTgxOTYtNjY5YzIxZTkyN2Vh',\n//   n: 'Chat Drive',\n//   d: 'Chat Drive',\n//   p: 5,\n// }]));\n\n/*\n * incoming parameters:\n *   values on AppClientRegistrationRequest\n *\n *   Required Drive Creation Specs\n *     Alias\n *     Type\n *     Name\n *\n *   Required Permissions\n *     i.e. can create circles, etc.\n */\n\n/*\n * screen shows app reg details\n *   if registered, allow to register the client\n *   if not registered, give option to register app\n *\n *   selection of permissions and drives\n *\n * Save Registration Process\n * 1. Save registration for appid + device friendly name\n *  + Create drives that are needed (and approved)\n * 2. After registration is complete:\n *   - RSA encrypt CAT using public key\n * 3. 302 redirect to return url + RSA_encrypte\n */\n\nconst RegisterAppClient = () => {\n  const [searchParams] = useSearchParams();\n\n  const appId = searchParams.get('appId');\n  const name = searchParams.get('n');\n  const permissionKeys = searchParams.get('p');\n  const publicKey64 = searchParams.get('pk');\n  const friendlyName = searchParams.get('fn');\n  const returnUrl = searchParams.get('return');\n\n  const drivesParam = searchParams.get('d');\n  let driveGrants: DriveGrantRequest[];\n\n  try {\n    const drivesParamObject = drivesParam && JSON.parse(drivesParam);\n    driveGrants = (Array.isArray(drivesParamObject) ? drivesParamObject : [drivesParamObject]).map(\n      (d) => {\n        return {\n          permissionedDrive: {\n            drive: {\n              alias: d.a,\n              type: d.t,\n            },\n            permission: parseInt(d.p),\n          },\n          driveMeta: {\n            name: d.n,\n            description: d.d,\n          }\n        };\n      }\n    );\n  } catch (ex) {\n    return <div>Bad request</div>;\n  }\n\n  // for (let i = 0; i < 10; i++) {\n  //   const driveGrantRequest = {\n  //     drive: {\n  //       alias: searchParams.get(`drive[${i}].a`),\n  //       type: searchParams.get(`drive[${i}].t`),\n  //     },\n  //     driveMeta: {\n  //       name: searchParams.get(`drive[${i}].n`) ?? 'unknown',\n  //       description: searchParams.get(`drive[${i}].d`) ?? '',\n  //     },\n  //     permission: parseInt(searchParams.get(`drive[${i}].p`)) ?? 0,\n  //   };\n\n  //   if (driveGrantRequest.drive.alias && driveGrantRequest.drive.type) {\n  //     driveGrants.push(driveGrantRequest);\n  //   } else {\n  //     break;\n  //   }\n  // }\n\n  if (!appId || !name || !publicKey64 || !friendlyName || !returnUrl) {\n    return <div>Bad request</div>;\n  }\n\n  const {\n    fetch: {data: appRegistration, isLoading: appRegIsLoading},\n    registerNewApp: {mutateAsync: registerApp, status: registerAppState},\n    registerNewAppClient: {mutateAsync: registerAppClient, status: registerAppClientState},\n  } = useApp({appId});\n\n  const [finalUrl, setFinalUrl] = useState<string | null>();\n\n  const chatPermissionSet: PermissionSet = {\n    keys: permissionKeys?.split(',').map((str) => parseInt(str)) ?? [],\n  };\n\n  const doRegisterApp = async () => {\n    await registerApp({\n      appId: appId,\n      name: name,\n      permissionSet: chatPermissionSet,\n      driveGrants: driveGrants,\n    });\n\n    await doRegisterClient();\n  };\n\n  const doRegisterClient = async () => {\n    const clientRegistrationResponse = await registerAppClient({\n      appId: appId,\n      clientPublicKey64: publicKey64,\n      clientFriendlyName: friendlyName,\n    });\n\n    const encodedData = encodeURI(clientRegistrationResponse.data);\n    const url = `${returnUrl}d=${encodedData}&v=${clientRegistrationResponse.encryptionVersion}`;\n\n    console.log(url);\n    setFinalUrl(url);\n  };\n\n  if (appRegIsLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <section className=\"my-20\">\n      <div className=\"container mx-auto\">\n        <div className=\"max-w-[35rem]\">\n          {!appRegistration ? (\n            <>\n              <h1 className=\"mb-5 text-4xl dark:text-white\">\n                Registering app: {name} <small className=\"block\">client: {friendlyName}</small>\n              </h1>\n              <p>The app {name} is not registered on your identity.</p>\n              <p className=\"mt-2\">\n                By registering this app, \"{name}\" will have the following access on your identity\n                and the following drives:\n              </p>\n              <Section isOpaqueBg={true}>\n                <div className=\"-my-4\">\n                  {chatPermissionSet.keys.map((permissionLevel) => {\n                    return (\n                      <PermissionView\n                        key={`${permissionLevel}`}\n                        permission={permissionLevel}\n                        className=\"my-4\"\n                      />\n                    );\n                  })}\n                </div>\n              </Section>\n              <Section isOpaqueBg={true}>\n                <div className=\"-my-4\">\n                  {driveGrants.map((grant) => {\n                    return (\n                      <DrivePermissionRequestView\n                        key={`${grant.permissionedDrive.drive.alias}-${grant.permissionedDrive.drive.type}`}\n                        driveGrant={grant}\n                        className=\"my-4\"\n                      />\n                    );\n                  })}\n                </div>\n              </Section>\n\n              <div className=\"-sm:mx-2 mt-10 sm:flex sm:flex-row-reverse\">\n                <ActionButton\n                  onClick={doRegisterApp}\n                  className=\"my-3 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none sm:mx-2 sm:my-auto\"\n                  state={mergeStates(registerAppState, registerAppClientState)}\n                >\n                  Allow access and Register {name}\n                </ActionButton>\n                <ActionButton className=\"my-3 sm:mx-2 sm:my-auto\" type=\"secondary\">\n                  Cancel\n                </ActionButton>\n              </div>\n            </>\n          ) : (\n            <>\n              {!finalUrl ? (\n                <>\n                  <h1 className=\"mb-5 text-4xl dark:text-white\">Register client: {friendlyName}</h1>\n                  <p>The app {name} is registered on your identity.</p>\n                  <p className=\"mt-2\">\n                    It has the following access on your identity and the following drives:\n                  </p>\n                </>\n              ) : (\n                <>\n                  <h1 className=\"mb-5 text-4xl dark:text-white\">\n                    Scucessfully registered client: {friendlyName} on app: {name}\n                  </h1>\n                </>\n              )}\n              {appRegistration.grant.permissionSet?.keys ? (\n                <Section isOpaqueBg={true}>\n                  <div className=\"-my-4\">\n                    {appRegistration.grant.permissionSet.keys.map((permissionLevel) => {\n                      return (\n                        <PermissionView\n                          key={`${permissionLevel}`}\n                          permission={permissionLevel}\n                          className=\"my-4\"\n                        />\n                      );\n                    })}\n                  </div>\n                </Section>\n              ) : null}\n              {appRegistration.grant?.driveGrants ? (\n                <Section isOpaqueBg={true}>\n                  <div className=\"-my-4\">\n                    {appRegistration.grant.driveGrants.map((grant) => {\n                      return (\n                        <DrivePermissionView\n                          key={`${grant.permissionedDrive.drive.alias}-${grant.permissionedDrive.drive.type}`}\n                          driveGrant={grant}\n                          className=\"my-4\"\n                        />\n                      );\n                    })}\n                  </div>\n                </Section>\n              ) : null}\n\n              {!finalUrl ? (\n                <div className=\"flex flex-row justify-end\">\n                  <ActionButton\n                    onClick={doRegisterClient}\n                    className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\"\n                    state={registerAppClientState}\n                  >\n                    Register {friendlyName}\n                  </ActionButton>\n                </div>\n              ) : (\n                <>\n                  Url:\n                  <div className=\"overflow-x-scroll whitespace-nowrap\">{finalUrl}</div>\n                  <div className=\"flex flex-row justify-end\">\n                    <ActionButton\n                      onClick={() => {\n                        window.location.href = finalUrl;\n                      }}\n                      className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\"\n                      state={registerAppClientState}\n                    >\n                      Back to {name}\n                    </ActionButton>\n                  </div>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default RegisterAppClient;\n"],"names":["driveGrant","permissionTree","className","drive","useDrive","targetDrive","permissionedDrive","fetch","data","WrapperLink","children","to","targetDriveInfo","alias","type","title","HardDrive","name","t","driveMeta","getAccessFromPermissionNumber","permission","drivePermissionLevels","driveGrants","useSearchParams","searchParams","appId","get","permissionKeys","publicKey64","friendlyName","returnUrl","drivesParam","drivesParamObject","JSON","parse","Array","isArray","map","d","a","parseInt","p","n","description","ex","useApp","appRegistration","appRegIsLoading","isLoading","registerNewApp","registerApp","mutateAsync","registerAppState","status","registerNewAppClient","registerAppClient","registerAppClientState","useState","finalUrl","setFinalUrl","chatPermissionSet","keys","split","str","doRegisterApp","permissionSet","doRegisterClient","clientPublicKey64","clientFriendlyName","clientRegistrationResponse","encodedData","encodeURI","url","encryptionVersion","console","log","grant","Section","isOpaqueBg","permissionLevel","PermissionView","DrivePermissionView","ActionButton","onClick","window","location","href","state","mergeStates"],"sourceRoot":""}