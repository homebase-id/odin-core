{"version":3,"file":"static/js/738.190b8b83.chunk.js","mappings":"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","sources":["components/Dialog/ProfileDialog/ProfileDialog.tsx","components/SubMenu/SubMenu.tsx","components/Attribute/AttributeCreator/AttributeCreator.tsx","hooks/profiles/useProfileSections.ts","components/SectionEditor/SectionEditor.tsx","components/Templates/ProfileDetails/ProfileDetails.tsx","helpers/common.ts","hooks/profiles/useProfiles.ts"],"sourcesContent":["import { ProfileDefinition } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport useProfiles from '../../../hooks/profiles/useProfiles';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Textarea from '../../Form/Textarea';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst ProfileDialog = ({\n  title,\n  confirmText,\n  isOpen,\n  defaultValue,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n  defaultValue?: ProfileDefinition;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const { mutateAsync: saveProfileDefinition, status: saveProfileDefinitionStatus } =\n    useProfiles().saveProfile;\n\n  const [newProfileDef, setNewProfileDef] = useState<ProfileDefinition>({\n    ...defaultValue,\n  });\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            await saveProfileDefinition(newProfileDef);\n            onConfirm();\n\n            return false;\n          }}\n        >\n          <div className=\"mb-5\">\n            <label htmlFor=\"name\">{t('Name')}</label>\n            <Input\n              id=\"name\"\n              name=\"profileName\"\n              defaultValue={newProfileDef.name}\n              onChange={(e) => {\n                setNewProfileDef({ ...newProfileDef, name: e.target.value });\n              }}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"name\">{t('Description')}</label>\n            <Textarea\n              id=\"description\"\n              name=\"profileDescription\"\n              defaultValue={newProfileDef.description}\n              onChange={(e) => {\n                setNewProfileDef({ ...newProfileDef, description: e.target.value });\n              }}\n              required\n            />\n          </div>\n\n          <div className=\"-m-2 flex flex-row-reverse py-3\">\n            <ActionButton className=\"m-2\" state={saveProfileDefinitionStatus} icon={'send'}>\n              {confirmText || t('Add Profile')}\n            </ActionButton>\n            <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default ProfileDialog;\n","import { FC, ReactNode } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport Select from '../Form/Select';\nimport LoadingParagraph from '../Loaders/LoadingParagraph/LoadingParagraph';\n\ninterface SubmenuProps {\n  className?: string;\n  items: { title: ReactNode; text?: string; key: string; path: string; className?: string }[];\n  isLoading?: boolean;\n}\n\nconst Submenu: FC<SubmenuProps> = ({ className, items, isLoading }) => {\n  const navigate = useNavigate();\n  const forceMobileView = items?.length >= 6;\n\n  if (isLoading === true) {\n    return <LoadingParagraph className=\"h-10\" />;\n  }\n\n  return (\n    <>\n      <div\n        className={`hidden flex-col flex-wrap ${!forceMobileView ? 'sm:flex' : ''} sm:flex-row ${\n          className ?? ''\n        }`}\n      >\n        {items.map((item) => {\n          return (\n            // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n            <NavLink\n              className={({ isActive }) =>\n                `flex-grow cursor-pointer border-b-2 py-2 px-1 text-lg ${\n                  isActive\n                    ? 'border-indigo-500 text-indigo-500 dark:text-indigo-400'\n                    : 'border-gray-300 transition-colors duration-300 hover:border-indigo-400 dark:border-gray-800 hover:dark:border-indigo-600'\n                } ${item.className ?? ''}`\n              }\n              to={item.path}\n              key={item.key}\n              end\n            >\n              {item.title}\n            </NavLink>\n          );\n        })}\n      </div>\n      <Select\n        className={`${!forceMobileView ? 'sm:hidden' : ''} py-4`}\n        onChange={(e) => navigate(e.target.value)}\n        value={window.location.pathname}\n      >\n        {items.map((item) => {\n          return (\n            <option key={item.key} value={item.path}>\n              {item.text || item.title}\n            </option>\n          );\n        })}\n      </Select>\n    </>\n  );\n};\n\nexport default Submenu;\n","import {\n  AttributeDefinition,\n  AttributeDefinitions,\n  AttributeFile,\n  SecurityGroupType,\n} from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useAttribute from '../../../hooks/profiles/useAttribute';\nimport { AttributeVm } from '../../../hooks/profiles/useAttributes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Select from '../../Form/Select';\nimport Section from '../../Sections/Section';\nimport AttributeFields from '../AttributeFields/AttributeFields';\n\nconst AttributeCreator = ({\n  profileId,\n  sectionId,\n  newPriority,\n}: {\n  profileId: string;\n  sectionId: string;\n  newPriority: number;\n}) => {\n  const [isActive, setIsActive] = useState(false);\n  const [attribute, setAttribute] = useState<AttributeVm>();\n  const { mutate: saveAttribute, isLoading, isError, isSuccess } = useAttribute({}).save;\n\n  const setType = (typeId: string) => {\n    const targetObj = Object.values(AttributeDefinitions).find(\n      (curr) => curr.type.toString() === typeId\n    ) as AttributeDefinition;\n\n    setAttribute({\n      id: '',\n      type: typeId,\n      sectionId: sectionId,\n      priority: newPriority,\n      data: {},\n      typeDefinition: targetObj,\n      profileId: profileId,\n      acl: { requiredSecurityGroup: SecurityGroupType.Owner },\n    });\n  };\n\n  const changeHandler: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement> = (e) => {\n    if (!attribute) {\n      // attribute selection failed on type selection...\n      return;\n    }\n\n    const newAttr: AttributeVm = { ...attribute };\n    newAttr.data[e.target.name] = e.target.value;\n\n    setAttribute(newAttr);\n  };\n\n  const saveNewData = () => {\n    saveAttribute(attribute as AttributeFile, {\n      onSuccess: () => {\n        discard();\n      },\n    });\n  };\n\n  const discard = () => {\n    setIsActive(false);\n    setAttribute(undefined);\n  };\n\n  return (\n    <>\n      {isActive ? (\n        <Section\n          title={`New${attribute ? ':' : ''} ${attribute?.typeDefinition.name ?? ''}`}\n          isOpaqueBg={true}\n        >\n          {attribute === undefined ? (\n            <div className=\"mb-5\">\n              <label htmlFor=\"type\">{t('Attribute Type')}</label>\n              <Select\n                id=\"type\"\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option>{t('Make a selection')}</option>\n                {Object.values(AttributeDefinitions).map((def) => {\n                  return (\n                    <option value={def.type.toString()} key={def.type.toString()}>\n                      {def.name}\n                    </option>\n                  );\n                })}\n              </Select>\n            </div>\n          ) : (\n            <AttributeFields attribute={attribute} onChange={changeHandler} />\n          )}\n          <div className=\"flex flex-row\">\n            <ActionButton type=\"secondary\" className=\"ml-auto\" onClick={discard}>\n              {t('Cancel')}\n            </ActionButton>\n            <ActionButton\n              type=\"primary\"\n              className=\"ml-2\"\n              onClick={saveNewData}\n              state={isLoading ? 'loading' : isSuccess ? 'success' : isError ? 'error' : undefined}\n            >\n              {t('Save')}\n            </ActionButton>\n          </div>\n        </Section>\n      ) : (\n        <div className=\"flex flex-row\">\n          <ActionButton\n            type=\"primary\"\n            className=\"mx-auto min-w-[9rem]\"\n            onClick={(type) => {\n              type && setType(type);\n              setIsActive(true);\n            }}\n            options={Object.values(AttributeDefinitions).map((def) => {\n              return {\n                value: def.type.toString(),\n                name: def.name,\n              };\n            })}\n          >\n            {t('Add Attribute')}\n          </ActionButton>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AttributeCreator;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, Client, ProfileSection } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\nimport useAttributes from './useAttributes';\n\nconst useProfileSections = ({ profileId }: { profileId?: string }) => {\n  const queryClient = useQueryClient();\n  const { getSharedSecret } = useAuth();\n  const { mutateAsync: removeAttributes } = useAttributes({}).removeAttributes;\n\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchSections = async ({ profileId }: { profileId: string }) => {\n    if (!profileId) {\n      return [];\n    }\n    const definitions = await client.profileDefinitionProvider.getProfileSections(profileId);\n\n    return definitions;\n  };\n\n  const saveSection = async ({\n    profileId,\n    profileSection,\n  }: {\n    profileId: string;\n    profileSection: ProfileSection;\n  }) => {\n    await client.profileDefinitionProvider.saveProfileSection(profileId, profileSection);\n    return { profileId, profileSection };\n  };\n\n  const removeSection = async ({\n    profileId,\n    profileSection,\n  }: {\n    profileId: string;\n    profileSection: ProfileSection;\n  }) => {\n    await removeAttributes({ profileId: profileId, sectionId: profileSection.sectionId });\n\n    return await client.profileDefinitionProvider.removeProfileSection(\n      profileId,\n      profileSection.sectionId\n    );\n  };\n\n  return {\n    fetchAll: useQuery(['profileSections', profileId], () => fetchSections({ profileId }), {\n      refetchOnWindowFocus: false,\n    }),\n    save: useMutation(saveSection, {\n      onMutate: async ({ profileId, profileSection: newSection }) => {\n        await queryClient.cancelQueries(['profileSections', profileId]);\n\n        const previousSections: ProfileSection[] = queryClient.getQueryData([\n          'profileSections',\n          profileId,\n        ]);\n        const newSections = previousSections.map((section) =>\n          section.sectionId === newSection.sectionId ? newSection : section\n        );\n\n        queryClient.setQueryData(['profileSections', profileId], newSections);\n\n        return { previousSections, newSection };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['profileSections', newData.profileId], context.previousSections);\n      },\n      onSettled: (data) => {\n        queryClient.invalidateQueries(['profileSections', data.profileId]);\n      },\n    }),\n    remove: useMutation(removeSection, {\n      onMutate: async ({ profileId, profileSection: toRemoveSection }) => {\n        await queryClient.cancelQueries(['profileSections', profileId]);\n\n        const previousSections: ProfileSection[] = queryClient.getQueryData([\n          'profileSections',\n          profileId,\n        ]);\n        const newSections = previousSections.filter(\n          (section) => section.sectionId !== toRemoveSection.sectionId\n        );\n\n        queryClient.setQueryData(['profileSections', profileId], newSections);\n\n        return { previousSections, toRemoveSection };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['profileSections', newData.profileId], context.previousSections);\n      },\n      onSettled: (data, err, variables) => {\n        queryClient.invalidateQueries(['profileSections', variables.profileId]);\n      },\n    }),\n  };\n};\n\nexport default useProfileSections;\n","import { ProfileSection } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { t } from '../../helpers/i18n/dictionary';\nimport useProfileSections from '../../hooks/profiles/useProfileSections';\nimport ActionButton from '../Buttons/ActionButton';\nimport Input from '../Form/Input';\nimport Section from '../Sections/Section';\n\nconst SectionEditor = ({\n  section,\n  profileId,\n\n  onClose,\n}: {\n  section: ProfileSection;\n  profileId: string;\n  onClose: () => void;\n}) => {\n  const [sectionData, setSectionData] = useState({ ...section });\n  const {\n    save: { mutateAsync: saveSection, status: saveSectionStatus },\n    remove: { mutateAsync: removeSection, status: removeSectionState },\n  } = useProfileSections({});\n\n  const handleChange = (e: { target: { value: unknown; name: string } }) => {\n    const newSectionData = { ...sectionData };\n    newSectionData[e.target.name] = e.target.value;\n\n    setSectionData(newSectionData);\n  };\n\n  return (\n    <Section title={`${t('Edit')}: ${section.name}`} isOpaqueBg={true}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n\n          saveSection(\n            { profileId: profileId, profileSection: sectionData },\n            {\n              onSuccess: () => {\n                onClose();\n              },\n            }\n          );\n        }}\n      >\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Name')}</label>\n          <Input id=\"name\" name=\"name\" defaultValue={section.name} onChange={handleChange} />\n        </div>\n\n        <div className=\"-m-2 flex flex-row-reverse\">\n          <ActionButton type=\"primary\" className=\"m-2\" state={saveSectionStatus}>\n            {t('Save')}\n          </ActionButton>\n          <ActionButton\n            type=\"secondary\"\n            className=\"m-2\"\n            onClick={(e) => {\n              e.preventDefault();\n              onClose();\n            }}\n          >\n            {t('Cancel')}\n          </ActionButton>\n          <ActionButton\n            type=\"remove\"\n            icon={'trash'}\n            className=\"m-2 mr-auto\"\n            state={removeSectionState}\n            onClick={() => removeSection({ profileId, profileSection: section })}\n            confirmOptions={{\n              title: t('Remove Section'),\n              body: t(\n                'Are you sure you want to remove this section, this action cannot be undone. All attributes within this section will also be removed.'\n              ),\n              buttonText: t('Remove'),\n            }}\n          >\n            {t('Remove')}\n          </ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nexport default SectionEditor;\n","import { DataUtil, ProfileSection } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport useAttributes from '../../../hooks/profiles/useAttributes';\nimport useProfiles from '../../../hooks/profiles/useProfiles';\n\nimport AttributeCreator from '../../Attribute/AttributeCreator/AttributeCreator';\nimport Section from '../../Sections/Section';\nimport Input from '../../Form/Input';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Add from '../../Icons/Plus/Plus';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport AttributeGroup from '../../Attribute/AttributeGroup/AttributeGroup';\nimport ProfileDialog from '../../Dialog/ProfileDialog/ProfileDialog';\nimport Heart from '../../Icons/Heart/Heart';\nimport SectionEditor from '../../SectionEditor/SectionEditor';\nimport useProfileSections from '../../../hooks/profiles/useProfileSections';\nimport Submenu from '../../SubMenu/SubMenu';\nimport LoadingParagraph from '../../Loaders/LoadingParagraph/LoadingParagraph';\nimport LoadingDetailPage from '../../Loaders/LoadingDetailPage/LoadingDetailPage';\n\nconst ProfileDetails = () => {\n  const { data: profiles, isLoading: profilesLoading } = useProfiles().fetchProfiles;\n  const { profileKey, sectionKey } = useParams();\n  const navigate = useNavigate();\n  const [isOpenEdit, setIsOpenEdit] = useState(false);\n\n  const profileDef = profiles?.find((curr) => {\n    return curr.slug === profileKey;\n  });\n  const { data: sections, isLoading: sectionsLoading } = useProfileSections({\n    profileId: profileDef?.profileId,\n  }).fetchAll;\n\n  const activeSectionKey =\n    decodeURIComponent(sectionKey) || (sections?.length ? sections[0].sectionId : '');\n\n  if (profilesLoading) {\n    return <LoadingDetailPage />;\n  }\n\n  if (!profiles) {\n    return <>{t('no-data-found')}</>;\n  }\n\n  if (!profileDef) {\n    return <>Incorrect profile path</>;\n  }\n\n  const isCreateSection = activeSectionKey === 'new' || (!sections?.length && !sectionsLoading);\n\n  const activeSection = isCreateSection\n    ? undefined\n    : sections?.find((sect) => {\n        return sect.sectionId === activeSectionKey;\n      }) || sections?.[0];\n\n  const tabItems = sections?.length\n    ? sections.map((sect, index) => {\n        return {\n          title: sect.name,\n          key: sect.sectionId,\n          path:\n            index === 0\n              ? `/owner/profile/${profileKey}`\n              : `/owner/profile/${profileKey}/${encodeURIComponent(sect.sectionId)}`,\n        };\n      })\n    : [];\n\n  return (\n    <>\n      <PageMeta\n        icon={Heart}\n        title={profileDef.name}\n        actions={\n          <>\n            <ActionButton onClick={() => setIsOpenEdit(true)} className=\"m-2\">\n              {t('Edit Profile')}\n            </ActionButton>\n          </>\n        }\n        breadCrumbs={[{ href: '/owner/profile', title: 'My Profiles' }, { title: profileKey }]}\n      />\n\n      <Submenu\n        className=\"mt-5\"\n        items={[\n          ...tabItems,\n          {\n            title: <Add className=\"h-5 w-5\" />,\n            text: `-- ${t('Create new section')} --`,\n            key: 'new',\n            path: `/owner/profile/${profileKey}/new`,\n            className: 'flex-grow-0',\n          },\n        ]}\n        isLoading={sectionsLoading}\n      />\n\n      {isCreateSection ? (\n        <ProfileSectionCreator\n          profileId={profileDef.profileId}\n          onCreate={(sectionId) => navigate(`/owner/profile/${profileKey}/${sectionId}`)}\n        />\n      ) : (\n        <ProfileSectionEditor\n          section={activeSection}\n          profileId={profileDef?.profileId}\n          key={activeSection?.sectionId}\n          isParentLoading={sectionsLoading}\n        />\n      )}\n      <ProfileDialog\n        isOpen={isOpenEdit}\n        title={t('Edit Profile: ') + profileDef.name}\n        confirmText={t('Save')}\n        defaultValue={profileDef}\n        onCancel={() => {\n          setIsOpenEdit(false);\n        }}\n        onConfirm={() => {\n          setIsOpenEdit(false);\n        }}\n      />\n    </>\n  );\n};\n\nconst ProfileSectionCreator = ({\n  profileId,\n  onCreate,\n}: {\n  profileId: string;\n  onCreate: (sectionId: string) => void;\n}) => {\n  const {\n    fetchAll: { data: profileSections },\n    save: { mutateAsync: saveProfileSection, status: saveProfileSectionStatus },\n  } = useProfileSections({ profileId: profileId });\n  const [name, setName] = useState('');\n\n  const createSection: React.FormEventHandler<HTMLFormElement> = async (e) => {\n    e.preventDefault();\n\n    const sectionId = DataUtil.getNewId();\n\n    const newProfileSection = {\n      sectionId: sectionId,\n      attributes: [],\n      priority: profileSections?.length\n        ? Math.max(...profileSections.map((sect) => sect.priority)) + 1000\n        : 1000,\n      isSystemSection: false,\n      name: name,\n    };\n\n    await saveProfileSection({\n      profileId: profileId,\n      profileSection: newProfileSection,\n    });\n    onCreate(sectionId);\n  };\n\n  return (\n    <Section title=\"New: section\" isOpaqueBg={true}>\n      <form onSubmit={createSection}>\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Name')}</label>\n          <Input\n            id=\"name\"\n            name=\"sectionName\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            required\n          />\n        </div>\n        <div className=\"flex flex-row\">\n          <ActionButton className=\"ml-auto\" state={saveProfileSectionStatus}>\n            {t('Add section')}\n          </ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nconst ProfileSectionEditor = ({\n  section,\n  profileId,\n  isParentLoading,\n}: {\n  section: ProfileSection;\n  profileId: string;\n  isParentLoading: boolean;\n}) => {\n  const { data: attributes, isLoading } = useAttributes({\n    profileId: profileId,\n    sectionId: section?.sectionId,\n  }).fetch;\n  const [isEditActive, setIsEditActive] = useState(false);\n\n  if (!attributes || isLoading || isParentLoading) {\n    return (\n      <div className=\"-m-5 pt-5\">\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n      </div>\n    );\n  }\n\n  // Find unique types\n  const types: string[] = attributes.reduce((prevVal, curVal) => {\n    if (prevVal.indexOf(curVal.type) !== -1) {\n      return prevVal;\n    }\n    return [...prevVal, curVal.type];\n  }, [] as string[]);\n\n  // Find matching attributes for those types\n  const groupedAttributes = types.map((currType) => {\n    const matchingAttributes = attributes.filter((attr) => attr.type === currType);\n    const lowestPrio = Math.min(...matchingAttributes.map((attr) => attr.priority));\n\n    return {\n      name: matchingAttributes[0].typeDefinition.name,\n      attributes: matchingAttributes,\n      priority: lowestPrio,\n    };\n  });\n  groupedAttributes.sort((a, b) => a.priority - b.priority);\n\n  const highestPriority = attributes.reduce((prevValue, currValue) => {\n    if (prevValue > currValue.priority) {\n      return prevValue;\n    } else {\n      return currValue.priority;\n    }\n  }, 0);\n\n  return (\n    <div className=\"pt-5\">\n      {section ? (\n        isEditActive ? (\n          <SectionEditor\n            key={section.sectionId}\n            section={section}\n            profileId={profileId}\n            onClose={() => setIsEditActive(false)}\n          />\n        ) : (\n          <section className=\"items-center bg-slate-50 p-3 dark:bg-slate-800 sm:flex sm:flex-row\">\n            <p className=\"sm:mr-2\">{section.name}</p>\n            <ActionButton\n              type=\"secondary\"\n              className=\"ml-auto\"\n              onClick={() => setIsEditActive(true)}\n            >\n              {t('Edit Section')}\n            </ActionButton>\n          </section>\n        )\n      ) : null}\n      {attributes.length ? (\n        groupedAttributes.map((attrGroup) => {\n          return (\n            <AttributeGroup\n              groupTitle={attrGroup.name}\n              attributes={attrGroup.attributes}\n              key={attrGroup.name}\n              groupedAttributes={groupedAttributes}\n            />\n          );\n        })\n      ) : (\n        <div className=\"py-5\">{t('section-empty-attributes')}</div>\n      )}\n      <AttributeCreator\n        profileId={profileId}\n        sectionId={section.sectionId}\n        newPriority={highestPriority + 1000}\n      />\n    </div>\n  );\n};\n\nexport default ProfileDetails;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, Client, ProfileDefinition } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\nexport interface ProfileDefinitionVm extends ProfileDefinition {\n  slug: string;\n}\n\nconst useProfiles = () => {\n  const queryClient = useQueryClient();\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchAll = async () => {\n    const definitions = await (\n      await client.profileDefinitionProvider.getProfileDefinitions()\n    ).map((def) => {\n      return {\n        ...def,\n        slug: convertTextToSlug(def.name),\n      } as ProfileDefinitionVm;\n    });\n\n    return definitions;\n  };\n\n  const saveProfile = async (profileDef: ProfileDefinition) => {\n    return await client.profileDefinitionProvider.saveProfileDefinition(profileDef);\n  };\n\n  return {\n    fetchProfiles: useQuery(['profiles'], () => fetchAll(), {\n      refetchOnWindowFocus: false,\n    }),\n    saveProfile: useMutation(saveProfile, {\n      onMutate: async (newProfile) => {\n        await queryClient.cancelQueries(['profiles']);\n\n        const previousProfiles: ProfileDefinitionVm[] = queryClient.getQueryData(['profiles']);\n        const newProfiles = previousProfiles.map((profile) =>\n          profile.profileId === newProfile.profileId\n            ? ({ ...newProfile, slug: convertTextToSlug(newProfile.name) } as ProfileDefinitionVm)\n            : profile\n        );\n\n        queryClient.setQueryData(['profiles'], newProfiles);\n\n        return { previousProfiles, newProfile };\n      },\n      onError: (err, newProfile, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['profiles'], context.previousProfiles);\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['profiles']);\n      },\n    }),\n  };\n};\n\nexport default useProfiles;\n"],"names":["title","confirmText","isOpen","defaultValue","onConfirm","onCancel","target","usePortal","useProfiles","saveProfile","saveProfileDefinition","mutateAsync","saveProfileDefinitionStatus","status","useState","newProfileDef","setNewProfileDef","dialog","onClose","onSubmit","e","preventDefault","className","htmlFor","t","id","name","onChange","value","required","description","state","icon","type","onClick","createPortal","items","isLoading","navigate","useNavigate","forceMobileView","length","map","item","isActive","to","path","end","key","window","location","pathname","text","profileId","sectionId","newPriority","setIsActive","attribute","setAttribute","useAttribute","save","saveAttribute","mutate","isError","isSuccess","setType","typeId","targetObj","Object","values","AttributeDefinitions","find","curr","toString","priority","data","typeDefinition","acl","requiredSecurityGroup","SecurityGroupType","discard","undefined","Section","isOpaqueBg","Select","def","AttributeFields","newAttr","ActionButton","onSuccess","options","queryClient","useQueryClient","getSharedSecret","useAuth","removeAttributes","useAttributes","client","Client","api","ApiType","sharedSecret","fetchSections","profileDefinitionProvider","getProfileSections","definitions","saveSection","profileSection","saveProfileSection","removeSection","removeProfileSection","fetchAll","useQuery","refetchOnWindowFocus","useMutation","onMutate","newSection","cancelQueries","previousSections","getQueryData","newSections","section","setQueryData","onError","err","newData","context","console","error","onSettled","invalidateQueries","remove","toRemoveSection","filter","variables","sectionData","setSectionData","useProfileSections","saveSectionStatus","removeSectionState","Input","newSectionData","confirmOptions","body","buttonText","ProfileSectionCreator","onCreate","profileSections","saveProfileSectionStatus","setName","createSection","DataUtil","newProfileSection","attributes","Math","max","sect","isSystemSection","ProfileSectionEditor","isParentLoading","fetch","isEditActive","setIsEditActive","LoadingParagraph","groupedAttributes","reduce","prevVal","curVal","indexOf","currType","matchingAttributes","attr","lowestPrio","min","sort","a","b","highestPriority","prevValue","currValue","attrGroup","AttributeGroup","groupTitle","fetchProfiles","profiles","profilesLoading","useParams","profileKey","sectionKey","isOpenEdit","setIsOpenEdit","profileDef","slug","sections","sectionsLoading","activeSectionKey","decodeURIComponent","LoadingDetailPage","isCreateSection","activeSection","tabItems","index","encodeURIComponent","PageMeta","Heart","actions","breadCrumbs","href","ProfileDialog","convertTextToSlug","split","join","toLowerCase","stringify","obj","keys","getProfileDefinitions","newProfile","previousProfiles","newProfiles","profile"],"sourceRoot":""}