{"version":3,"file":"static/js/1.151837ea.chunk.js","mappings":"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","sources":["components/Dialog/ImageDialog/ImageDialog.tsx","components/Form/ImageSelector.tsx","components/Form/Input.tsx","components/Form/Textarea.tsx","hooks/media/useImage.ts","hooks/profiles/useAttributes.ts","hooks/profiles/useHomeAttributes.ts","provider/file/FileProvider.ts","hooks/staticFiles/useStaticFiles.ts"],"sourcesContent":["import { AccessControlList, TargetDrive } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useImage from '../../../hooks/media/useImage';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport ActionButton from '../../Buttons/ActionButton';\n\nconst ImageDialog = ({\n  title,\n  confirmText,\n  isOpen,\n  acl,\n  targetDrive,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n\n  acl: AccessControlList;\n  targetDrive: TargetDrive;\n\n  onConfirm: (imageFileId: string) => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const { mutate: saveImage, status } = useImage().save;\n  const [file, setFile] = useState<File>();\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const uploadImage = async () => {\n    const bytes = new Uint8Array(await file.arrayBuffer());\n    saveImage(\n      {\n        acl: acl,\n        bytes: bytes,\n        fileId: undefined,\n        targetDrive: targetDrive,\n      },\n      {\n        onSuccess: onConfirm,\n      }\n    );\n  };\n\n  const dialog = (\n    <div className=\"relative z-50\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\n      <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"></div>\n      <div className=\"fixed inset-0 z-10 overflow-y-auto\">\n        <div className=\"flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0\">\n          <div className=\"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all dark:bg-black sm:my-8 sm:w-full sm:max-w-lg\">\n            <div className=\"bg-white px-4 pt-5 pb-4 dark:bg-black sm:p-6 sm:pb-4\">\n              <div className=\"sm:flex sm:items-start\">\n                <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                  <h3\n                    className=\"mb-3 text-lg font-medium leading-6 text-gray-900 dark:text-slate-50\"\n                    id=\"modal-title\"\n                  >\n                    {title}\n                  </h3>\n\n                  <input\n                    onChange={(e) => {\n                      const file = e.target.files[0];\n                      if (file) {\n                        setFile(file);\n                      }\n                    }}\n                    type=\"file\"\n                    accept=\"image/png, image/jpeg, image/tiff, image/webp\"\n                    className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100`}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"-m-2 flex flex-row-reverse px-4 py-3\">\n              <ActionButton className=\"m-2\" onClick={uploadImage} state={status}>\n                {confirmText ?? 'Add'}\n              </ActionButton>\n              <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n                {t('Cancel')}\n              </ActionButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default ImageDialog;\n","import { AccessControlList, TargetDrive } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { t } from '../../helpers/i18n/dictionary';\nimport useImage from '../../hooks/media/useImage';\nimport ConfirmDialog from '../Dialog/ConfirmDialog/ConfirmDialog';\nimport Exclamation from '../Icons/Exclamation/Exclamation';\nimport Pencil from '../Icons/Pencil/Pencil';\nimport Trash from '../Icons/Trash/Trash';\nimport ImageDialog from '../Dialog/ImageDialog/ImageDialog';\n\ninterface ImageSelectorProps\n  extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n  targetDrive?: TargetDrive;\n  acl: AccessControlList;\n  onChange: (event: { target: { name: string; value: string } }) => void;\n}\n\nconst ImageSelector = ({ targetDrive, acl, onChange, defaultValue, name }: ImageSelectorProps) => {\n  const {\n    fetch: { data: imageUrl, isLoading },\n    remove: { mutate: removeImage },\n  } = useImage(typeof defaultValue === 'string' ? defaultValue : undefined, targetDrive);\n  const [isEdit, setIsEdit] = useState(false);\n  const [needsConfirmation, setNeedsConfirmation] = useState(false);\n\n  const removeData = () => {\n    removeImage(\n      {\n        fileId: typeof defaultValue === 'string' ? defaultValue : undefined,\n        targetDrive: targetDrive,\n      },\n      {\n        onSuccess: () => {\n          onChange({ target: { name: name, value: '' } });\n        },\n      }\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"aspect-square max-w-[20rem] animate-pulse bg-slate-100 dark:bg-slate-700\"></div>\n    );\n  }\n\n  return (\n    <>\n      {imageUrl ? (\n        <div className=\"flex\">\n          <div className=\"relative mr-auto\">\n            <button\n              className=\"absolute top-2 right-2 rounded-full bg-white p-2\"\n              onClick={(e) => {\n                e.preventDefault();\n                setIsEdit(true);\n                return false;\n              }}\n            >\n              <Pencil className=\"h-4 w-4 text-black\" />\n            </button>\n            <button\n              className=\"absolute bottom-2 right-2 rounded-full bg-red-200 p-2\"\n              onClick={() => {\n                setNeedsConfirmation(true);\n                return false;\n              }}\n            >\n              <Trash className=\"h-4 w-4 text-black\" />\n            </button>\n            <img\n              src={imageUrl}\n              alt={imageUrl}\n              className=\"max-h-[20rem]\"\n              onClick={() => {\n                setIsEdit(true);\n              }}\n            />\n          </div>\n        </div>\n      ) : (\n        <div\n          className=\"relative flex aspect-video max-w-[20rem] cursor-pointer bg-slate-100 dark:bg-slate-700\"\n          onClick={(e) => {\n            e.preventDefault();\n            setIsEdit(true);\n          }}\n        >\n          <Exclamation className=\"m-auto h-8 w-8\" />\n          <p className=\"absolute inset-0 top-auto pb-5 text-center text-slate-400\">\n            {t('No image selected')}\n          </p>\n        </div>\n      )}\n\n      <ImageDialog\n        acl={acl}\n        isOpen={isEdit}\n        targetDrive={targetDrive}\n        title={t('Insert image')}\n        confirmText={t('Add')}\n        onCancel={() => setIsEdit(false)}\n        onConfirm={(imageFileId) => {\n          onChange({ target: { name: name, value: imageFileId } });\n          setIsEdit(false);\n        }}\n      />\n      <ConfirmDialog\n        title=\"Remove Current Image\"\n        confirmText=\"Permanently remove\"\n        needConfirmation={needsConfirmation}\n        onConfirm={removeData}\n        onCancel={() => {\n          setNeedsConfirmation(false);\n        }}\n      >\n        <p className=\"text-sm text-gray-500\">\n          {t('Are you sure you want to remove the current file? This action cannot be undone.')}\n        </p>\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default ImageSelector;\n","const Input = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n) => {\n  return (\n    <input\n      {...props}\n      type={props.type ?? 'input'}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    />\n  );\n};\n\nexport default Input;\n","const Textarea = (\n  props: React.DetailedHTMLProps<\n    React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >\n) => {\n  return (\n    <textarea\n      {...props}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    />\n  );\n};\n\nexport default Textarea;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  AccessControlList,\n  ApiType,\n  BlogConfig,\n  Client,\n  HomePageConfig,\n  SecurityGroupType,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useImage = (imageFileId?: string, imageDrive?: TargetDrive) => {\n  const { getSharedSecret } = useAuth();\n  const queryClient = useQueryClient();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchImageData = async (imageFileId?: string, imageDrive?: TargetDrive) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    return await client.mediaProvider.getDecryptedImageUrl(imageDrive ?? defaultDrive, imageFileId);\n  };\n\n  const saveImage = async ({\n    bytes,\n    targetDrive = defaultDrive,\n    acl = { requiredSecurityGroup: SecurityGroupType.Anonymous },\n    fileId = undefined,\n  }: {\n    bytes: Uint8Array;\n    targetDrive: TargetDrive;\n    acl?: AccessControlList;\n    fileId?: string;\n  }) => {\n    return await client.mediaProvider.uploadImage(targetDrive, undefined, acl, bytes, fileId);\n  };\n\n  const removeImage = async ({\n    targetDrive = defaultDrive,\n    fileId,\n  }: {\n    targetDrive: TargetDrive;\n    fileId: string;\n  }) => {\n    return await client.mediaProvider.removeImage(fileId, targetDrive);\n  };\n\n  return {\n    fetch: useQuery(\n      ['image', imageFileId, imageDrive],\n      () => fetchImageData(imageFileId, imageDrive),\n      {\n        refetchOnMount: false,\n        refetchOnWindowFocus: false,\n        staleTime: Infinity,\n      }\n    ),\n    save: useMutation(saveImage, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.fileId) {\n          queryClient.removeQueries([\n            'image',\n            variables.fileId,\n            variables.targetDrive ?? defaultDrive,\n          ]);\n        } else {\n          queryClient.removeQueries(['image']);\n        }\n      },\n    }),\n    remove: useMutation(removeImage, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.fileId) {\n          queryClient.removeQueries([\n            'image',\n            variables.fileId,\n            variables.targetDrive ?? defaultDrive,\n          ]);\n        } else {\n          queryClient.removeQueries(['image']);\n        }\n      },\n    }),\n  };\n};\n\nexport default useImage;\n","import { QueryClient, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  ApiType,\n  AttributeDefinition,\n  AttributeDefinitions,\n  AttributeFile,\n  Client,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nexport interface AttributeVm extends AttributeFile {\n  typeDefinition: AttributeDefinition;\n}\n\nconst useAttributes = ({ profileId, sectionId }: { profileId?: string; sectionId?: string }) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const queryClient = useQueryClient();\n\n  const fetchData = async (profileId: string, sectionId: string) => {\n    if (!profileId || !sectionId) {\n      return;\n    }\n\n    const foundAttributes = await client.profileDataProvider.getProfileAttributes(\n      profileId,\n      sectionId,\n      100\n    );\n\n    return foundAttributes.map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: Object.values(AttributeDefinitions).find((def) => {\n          return def.type.toString() === attr.type;\n        }),\n      } as AttributeVm;\n    });\n  };\n\n  const removeAttributes = async ({\n    profileId,\n    sectionId,\n  }: {\n    profileId: string;\n    sectionId: string;\n  }) => {\n    if (!profileId || !sectionId) {\n      return;\n    }\n\n    const foundAttributes = await client.profileDataProvider.getProfileAttributes(\n      profileId,\n      sectionId,\n      100\n    );\n\n    return await Promise.all(\n      foundAttributes.map(async (attr) =>\n        client.profileDataProvider.removeAttribute(profileId, attr.fileId)\n      )\n    );\n  };\n\n  return {\n    fetch: useQuery(['attributes', profileId, sectionId], () => fetchData(profileId, sectionId), {\n      refetchOnWindowFocus: false,\n    }),\n    removeAttributes: useMutation(removeAttributes, {\n      onError: (err) => {\n        console.error(err);\n      },\n      onSettled: (data, err, variables) => {\n        queryClient.invalidateQueries(['attributes', variables.profileId, variables.sectionId]);\n      },\n    }),\n  };\n};\n\nexport default useAttributes;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, Client, HomePageAttributes } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useHomeAttributes = () => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n  const fetchData = async () => {\n    const foundHomettributes = (\n      await client.homePageProvider.getAttributes(HomePageAttributes.HomePage.toString())\n    ).map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: {\n          type: HomePageAttributes.HomePage.toString(),\n          name: 'Home Page',\n          description: '',\n        },\n      };\n    });\n\n    const foundThemeAttributes = (\n      await client.homePageProvider.getAttributes(HomePageAttributes.Theme.toString())\n    ).map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: {\n          type: HomePageAttributes.Theme.toString(),\n          name: 'Theme',\n          description: '',\n        },\n      };\n    });\n\n    return { home: foundHomettributes, theme: foundThemeAttributes };\n  };\n\n  return {\n    fetch: useQuery(['homeAtrributes'], () => fetchData(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useHomeAttributes;\n","import { ApiType, DataUtil, FileQueryParams, ProviderBase } from '@youfoundation/transit-lib';\n\nexport class FileProvider extends ProviderBase {\n  private static instance: FileProvider;\n\n  constructor(sharedSecret: Uint8Array) {\n    super({ api: ApiType.Owner, sharedSecret: sharedSecret });\n  }\n\n  publishFile = async (fileName: string, sections: QueryParamsSection[]) => {\n    const httpClient = this.createAxiosClient();\n\n    const fileRequest: PublishStaticFileRequest = {\n      filename: fileName,\n      config: {\n        crossOriginalBehavior: 'AllowAllOrigins',\n        contentType: 'string',\n      },\n      sections: sections.map((section) => {\n        return {\n          ...section,\n          queryParams: fixQueryParams(section.queryParams),\n        };\n      }),\n    };\n\n    return await httpClient.post('/optimization/cdn/publish', fileRequest);\n  };\n\n  public static getInstance(sharedSecret): FileProvider {\n    if (!FileProvider.instance) {\n      FileProvider.instance = new FileProvider(sharedSecret);\n    }\n\n    return FileProvider.instance;\n  }\n}\n\nconst fixQueryParams = (params: FileQueryParams): FileQueryParams => {\n  params = { ...params };\n  //HACK; convert all strings to byte arrays as base64 values; this is for a test\n\n  //HACK: until we decide where to handle byte arrays\n  if (params.tagsMatchAtLeastOne)\n    params.tagsMatchAtLeastOne = params.tagsMatchAtLeastOne.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n  if (params.tagsMatchAll)\n    params.tagsMatchAll = params.tagsMatchAll.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n  if (params.sender)\n    params.sender = params.sender.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n\n  return params;\n};\n\ntype QueryParamsSection = {\n  name: string;\n  queryParams: FileQueryParams;\n  resultOptions: {\n    includeAdditionalThumbnails: boolean;\n    includeJsonContent: boolean;\n    includePayload: boolean;\n    excludePreviewThumbnail: boolean;\n  };\n};\n\ntype PublishStaticFileRequest = {\n  filename: string;\n  config: { crossOriginalBehavior: 'Default' | 'AllowAllOrigins'; contentType: string };\n  sections: QueryParamsSection[];\n};\n","import { useMutation } from '@tanstack/react-query';\nimport {\n  ApiType,\n  AttributeConfig,\n  AttributeDefinitions,\n  BlogConfig,\n  BuiltInProfiles,\n  Client,\n  FileQueryParams,\n  getBlogMasterContentTargetDrive,\n  getTargetDriveFromProfileId,\n  HomePageAttributes,\n  HomePageConfig,\n  ProfileConfig,\n  SecurityGroupType,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport { FileProvider } from '../../provider/file/FileProvider';\nimport useAuth from '../auth/useAuth';\nimport useAttributes from '../profiles/useAttributes';\nimport useHomeAttributes from '../profiles/useHomeAttributes';\n\nconst useStaticFiles = () => {\n  const { getSharedSecret } = useAuth();\n  const { data: homeAtrributes } = useHomeAttributes().fetch;\n  const { data: profileAttributes } = useAttributes({\n    profileId: BuiltInProfiles.StandardProfileId.toString(),\n    sectionId: BuiltInProfiles.PersonalInfoSectionId.toString(),\n  }).fetch;\n\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const publishData = async () => {\n    const fileProvider = FileProvider.getInstance(getSharedSecret());\n\n    const publishProfile = async () => {\n      const homepageDrive: TargetDrive = {\n        alias: HomePageConfig.DefaultDriveId.toString(),\n        type: ProfileConfig.ProfileDriveType.toString(),\n      };\n\n      const profileDrive: TargetDrive = {\n        alias: BuiltInProfiles.StandardProfileId.toString(),\n        type: ProfileConfig.ProfileDriveType.toString(),\n      };\n\n      const personalInfoNameQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAll: [\n          BuiltInProfiles.PersonalInfoSectionId.toString(),\n          AttributeDefinitions.Name.type.toString(),\n        ],\n      };\n\n      const personalInfoPhotoQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAll: [\n          BuiltInProfiles.PersonalInfoSectionId.toString(),\n          AttributeDefinitions.Photo.type.toString(),\n        ],\n      };\n\n      const SocialQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [BuiltInProfiles.ExternalLinksSectionId.toString()],\n      };\n\n      const themeFileQueryParam: FileQueryParams = {\n        targetDrive: homepageDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [HomePageAttributes.Theme.toString()],\n      };\n\n      const bioFileQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [AttributeDefinitions.FullBio.type.toString()],\n      };\n\n      const linkFileQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [AttributeDefinitions.Link.type.toString()],\n      };\n\n      const homeFileQueryParam: FileQueryParams = {\n        targetDrive: homepageDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [HomePageAttributes.HomePage.toString()],\n      };\n\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const sections = [\n        {\n          name: 'socials',\n          queryParams: SocialQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'name',\n          queryParams: personalInfoNameQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'photo',\n          queryParams: personalInfoPhotoQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'bio',\n          queryParams: bioFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'link',\n          queryParams: linkFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'theme',\n          queryParams: themeFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'home',\n          queryParams: homeFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n      ];\n\n      const publicSections = [\n        {\n          name: 'name',\n          queryParams: personalInfoNameQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'photo',\n          queryParams: personalInfoPhotoQueryParam,\n          resultOptions: baseResultOptions,\n        },\n      ];\n\n      // Image fileId's discovery:\n      const homeFileId = homeAtrributes.home[0]?.data['headerImageUrl'];\n      const homeTargetDrive = getTargetDriveFromProfileId(HomePageConfig.DefaultDriveId.toString());\n      const headerImageQueryParam: FileQueryParams = {\n        targetDrive: homeTargetDrive,\n        fileType: [0],\n        tagsMatchAtLeastOne: [homeFileId],\n      };\n\n      if (homeFileId) {\n        sections.push({\n          name: homeFileId,\n          queryParams: headerImageQueryParam,\n          resultOptions: baseResultOptions,\n        });\n      }\n\n      const profilePhotoFileId = profileAttributes?.find(\n        (attr) =>\n          attr.acl.requiredSecurityGroup === SecurityGroupType.Anonymous &&\n          attr.type === AttributeDefinitions.Photo.type.toString()\n      )?.data?.['profileImageId'];\n      const profileTargetDrive = getTargetDriveFromProfileId(\n        BuiltInProfiles.StandardProfileId.toString()\n      );\n      const profilePhotoQueryParams: FileQueryParams = {\n        targetDrive: profileTargetDrive,\n        fileType: [0],\n        tagsMatchAtLeastOne: [profilePhotoFileId],\n      };\n\n      if (profilePhotoFileId) {\n        sections.push({\n          name: profilePhotoFileId,\n          queryParams: profilePhotoQueryParams,\n          resultOptions: baseResultOptions,\n        });\n\n        publicSections.push({\n          name: profilePhotoFileId,\n          queryParams: profilePhotoQueryParams,\n          resultOptions: {\n            ...baseResultOptions,\n            includeAdditionalThumbnails: true,\n          },\n        });\n      }\n\n      return await Promise.all([\n        await fileProvider.publishFile('profile.json', sections),\n        await fileProvider.publishFile('public.json', publicSections),\n      ]);\n    };\n\n    const publishChannels = async () => {\n      const blogMasterDrive = getBlogMasterContentTargetDrive();\n\n      const channelQueryParams: FileQueryParams = {\n        targetDrive: blogMasterDrive,\n        fileType: [BlogConfig.BlogChannelDefinitionFileType],\n      };\n\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const sections = [\n        {\n          name: 'channels',\n          queryParams: channelQueryParams,\n          resultOptions: baseResultOptions,\n        },\n      ];\n\n      return await fileProvider.publishFile('channels.json', sections);\n    };\n\n    const publishBlog = async () => {\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const channels = await client.blogDefinitionProvider.getChannelDefinitions();\n      const sections = channels.map((channel) => {\n        const channelDrive: TargetDrive = {\n          alias: channel.channelId,\n          type: BlogConfig.ChannelDriveType.toString(),\n        };\n\n        const blogOnChannelQuery: FileQueryParams = {\n          targetDrive: channelDrive,\n          fileType: [BlogConfig.BlogPostFileType],\n        };\n\n        return {\n          name: channel.channelId,\n          queryParams: blogOnChannelQuery,\n          resultOptions: baseResultOptions,\n        };\n      });\n\n      const imageSections = (\n        await client.blogPostReadonlyProvider.getRecentPosts('Article', channels.length * 6)\n      ).map((blog) => {\n        const params: FileQueryParams = {\n          targetDrive: client.blogDefinitionProvider.getPublishChannelDrive(blog.channelId),\n          fileType: [0],\n          tagsMatchAtLeastOne: [blog.primaryImageFileId],\n        };\n\n        return {\n          name: blog.primaryImageFileId,\n          queryParams: params,\n          resultOptions: baseResultOptions,\n        };\n      });\n\n      return await fileProvider.publishFile('blogs.json', [...sections, ...imageSections]);\n    };\n\n    await publishProfile();\n    await publishChannels();\n    await publishBlog();\n  };\n\n  return {\n    publish: useMutation(publishData, {\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useStaticFiles;\n"],"names":["title","confirmText","isOpen","acl","targetDrive","onConfirm","onCancel","target","usePortal","useImage","save","saveImage","mutate","status","useState","file","setFile","uploadImage","Uint8Array","arrayBuffer","bytes","fileId","undefined","onSuccess","dialog","className","role","id","onChange","e","files","type","accept","onClick","state","t","createPortal","defaultValue","name","fetch","imageUrl","data","isLoading","removeImage","remove","isEdit","setIsEdit","needsConfirmation","setNeedsConfirmation","preventDefault","src","alt","imageFileId","value","needConfirmation","props","defaultDrive","alias","HomePageConfig","BlogConfig","imageDrive","getSharedSecret","useAuth","queryClient","useQueryClient","client","Client","api","ApiType","sharedSecret","fetchImageData","mediaProvider","getDecryptedImageUrl","requiredSecurityGroup","SecurityGroupType","useQuery","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","useMutation","_data","variables","removeQueries","profileId","sectionId","fetchData","profileDataProvider","getProfileAttributes","foundAttributes","map","attr","typeDefinition","Object","values","AttributeDefinitions","find","def","toString","removeAttributes","Promise","all","removeAttribute","onError","err","console","error","onSettled","invalidateQueries","homePageProvider","getAttributes","HomePageAttributes","foundHomettributes","description","foundThemeAttributes","home","theme","FileProvider","publishFile","fileName","sections","httpClient","createAxiosClient","fileRequest","filename","config","crossOriginalBehavior","contentType","section","queryParams","fixQueryParams","post","instance","ProviderBase","params","tagsMatchAtLeastOne","v","DataUtil","tagsMatchAll","sender","homeAtrributes","useHomeAttributes","profileAttributes","useAttributes","BuiltInProfiles","publishData","fileProvider","getInstance","publishProfile","homepageDrive","ProfileConfig","profileDrive","personalInfoNameQueryParam","fileType","AttributeConfig","personalInfoPhotoQueryParam","SocialQueryParam","themeFileQueryParam","bioFileQueryParam","linkFileQueryParam","homeFileQueryParam","resultOptions","baseResultOptions","includeAdditionalThumbnails","includeJsonContent","includePayload","excludePreviewThumbnail","publicSections","homeFileId","homeTargetDrive","getTargetDriveFromProfileId","headerImageQueryParam","push","profilePhotoFileId","profileTargetDrive","profilePhotoQueryParams","publishChannels","blogMasterDrive","getBlogMasterContentTargetDrive","channelQueryParams","publishBlog","blogDefinitionProvider","getChannelDefinitions","channels","channel","blogOnChannelQuery","channelId","blogPostReadonlyProvider","getRecentPosts","length","imageSections","blog","getPublishChannelDrive","primaryImageFileId","publish","ex"],"sourceRoot":""}