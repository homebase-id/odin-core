{"version":3,"file":"static/js/524.962f1dfb.chunk.js","mappings":"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","sources":["components/Templates/RegisterChatClient/RegisterChatClient.tsx","provider/temp/app/AppManagementProvider.ts","provider/temp/app/AppManagementProviderTypes.ts"],"sourcesContent":["import useAuth from '../../../hooks/auth/useAuth';\nimport {\n  AppClientRegistrationRequest,\n  AppRegistrationRequest,\n  AppRegistrationResponse,\n  DriveGrantRequest,\n  DrivePermission,\n  PermissionFlags,\n  PermissionSet\n} from \"../../../provider/temp/app/AppManagementProviderTypes\";\nimport {useEffect, useState} from \"react\";\nimport {useSearchParams} from \"react-router-dom\";\nimport AppManagementProvider from \"../../../provider/temp/app/AppManagementProvider\";\nimport {ApiType, DataUtil, DriveProvider} from \"@youfoundation/transit-lib\";\n\n// https://frodo.digital/owner/registerchat?fn=todds%20android&rs=odinchat\n\nconst RegisterAppClient = () => {\n  const {getSharedSecret} = useAuth();\n  const [searchParams] = useSearchParams();\n  const [isLoaded, setIsLoaded] = useState<boolean>();\n  const [finalUrl, setFinalUrl] = useState<string | null>();\n  const [appRegistrationRequest, setAppRegistrationRequest] = useState<AppRegistrationRequest | null>(null);\n  const [clientRegistrationRequest, setClientRegistrationRequest] = useState<AppClientRegistrationRequest | null>(null);\n  const [appRegistration, setAppRegistration] = useState<AppRegistrationResponse | null>(null);\n  const [returnScheme, setReturnScheme] = useState<string>();\n  \n  const tempProvider = new AppManagementProvider(getSharedSecret());\n  const driveProvider = new DriveProvider({api: ApiType.Owner, sharedSecret: getSharedSecret()});\n  \n  const chatAppId = \"217d3338-afee-4529-aa7f-d8442bc11f25\";\n  const chatAppName = \"Chatrbox\";\n  \n  const chatDriveGrantRequest: DriveGrantRequest = {\n    drive: {\n      alias: \"faaaaaaa-2d68-4dd2-8196-669c21e927ea\",\n      type: \"fabbbbbb-2d68-4dd2-8196-669c21e927ea\"\n    },\n    permission: DrivePermission.Read | DrivePermission.Write\n  }\n  \n  const chatPermissionSet: PermissionSet = {\n    permissions: PermissionFlags.ReadConnectionRequests | PermissionFlags.ReadConnections\n  }\n  \n  useEffect(() => {\n    const init = async () => {\n      const appRegRequest: AppRegistrationRequest = {\n        appId: chatAppId,\n        name: chatAppName,\n        permissionSet: chatPermissionSet, //TODO - read from parameter\n        drives: [chatDriveGrantRequest] //TODO - this should be parameter a list of drives for which this app requests access (along with permissions)\n      }\n      \n      const clientRegRequest: AppClientRegistrationRequest =\n        {\n          appId: appRegRequest.appId,\n          clientPublicKey64: searchParams.get('pk'),\n          clientFriendlyName: searchParams.get('fn')\n        }\n      \n      const appReg = await tempProvider.GetAppRegistration({\n        appId: appRegRequest.appId\n      });\n      \n      setAppRegistration(appReg);\n      setAppRegistrationRequest(appRegRequest);\n      setClientRegistrationRequest(clientRegRequest);\n      setReturnScheme(searchParams.get('rs'));\n      setIsLoaded(true);\n    }\n    \n    init();\n    \n  }, [searchParams])\n  \n  const registerApp = async () => {\n    \n    await driveProvider.EnsureDrive(chatDriveGrantRequest.drive, \"Chat Drive\", \"Chatr drive\", false);\n    \n    //drive = await _driveService.CreateDrive(\"Chat drive hack\", req.Drive, \"\", false);\n    await tempProvider.RegisterApp(appRegistrationRequest);\n    await registerClient();\n  };\n  \n  const registerClient = async () => {\n    const clientRegistrationResponse = await tempProvider.RegisterChatAppClient_temp(clientRegistrationRequest);\n    const encodedData = encodeURI(clientRegistrationResponse.data);\n    \n    const bytes = DataUtil.base64ToUint8Array(encodedData);\n    console.log('bytes', bytes);\n    const url = `${returnScheme}d=${encodedData}&v=${clientRegistrationResponse.encryptionVersion}`;\n    window.location.href = url;\n  };\n  \n  if (!isLoaded) {\n    return (<div>Loading...</div>);\n  }\n  \n  \n  if (finalUrl) {\n    return (<div className=\"container mx-auto\">\n      browser will be redirected to <br/>\n      <span>{finalUrl}</span>\n    </div>)\n  }\n  \n  return (\n    <section className=\"mt-20\">\n      <div className=\"container mx-auto\">\n        <div className=\"-m-5 flex flex-wrap\">\n          \n          {isLoaded && appRegistration == null &&\n              <>\n                  <div className=\"px-5\">\n                      App with id {appRegistrationRequest.appId} is not registered.\n                      <br/>\n                      Clicking OK will approve the app for use and register this client\n                  </div>\n                  <div className=\"px-5\">\n                      <a\n                          onClick={registerApp}\n                          className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\">\n                          Register Now\n                      </a>\n                  </div>\n              </>\n          }\n          \n          {isLoaded && appRegistration != null &&\n              <>\n                  <div className=\"px-5\">\n                      App with id {appRegistration?.appId} is registered at {appRegistration?.created}\n                  </div>\n                  <div className=\"px-5\">\n                      <a\n                          onClick={registerClient}\n                          className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\">\n                          Register this Client\n                      </a>\n                  </div>\n              </>}\n        \n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default RegisterAppClient;\n","import {\n  AppClientRegistrationRequest,\n  AppClientRegistrationResponse,\n  AppRegistrationRequest,\n  AppRegistrationResponse,\n  GetAppRequest,\n} from './AppManagementProviderTypes';\nimport { OwnerProviderBase } from '../../OwnerProviderBase';\n\nexport default class AppManagementProvider extends OwnerProviderBase {\n  constructor(sharedSecret: Uint8Array | undefined) {\n    super(sharedSecret);\n  }\n\n  //adds the specified client to the list of allowed clients for a given app; returns a CAT\n  async RegisterAppClient(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/client',\n      request\n    );\n    return response.data;\n  }\n  \n  async RegisterChatAppClient_temp(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/chatclient_temp',\n      request\n    );\n    console.log('RegisterChatAppClient_temp returning response');\n    console.log(response);\n    \n    return response.data;\n  }\n  \n  async RegisterApp(request: AppRegistrationRequest): Promise<AppRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppRegistrationResponse>(\n      'appmanagement/register/app',\n      request\n    );\n  \n    console.log('RegisterApp returning response');\n    console.log(response);\n    \n    return response.data;\n  }\n\n  async GetAppRegistration(request: GetAppRequest): Promise<AppRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppRegistrationResponse>('appmanagement/app', request);\n    return response.data;\n  }\n}\n","export interface AppClientRegistrationRequest {\n    appId: string;\n    clientFriendlyName: string;\n    clientPublicKey64: string\n}\n\nexport interface AppClientRegistrationResponse\n{\n    /** Version number for how the data field is encrypted */\n    encryptionVersion:number,\n    \n    /** RSA encrypted response.  When encryption version == 1, the  first 16 bytes is token id, second 16 bytes is AccessTokenHalfKey, and last 16 bytes is SharedSecret */\n    data:string,\n    \n    /** A Guid representing the Id of the access registration */\n    token:string\n}\n\nexport interface GetAppRequest {\n    /** @format uuid */\n    appId: string;\n}\n\nexport interface AppRegistrationRequest {\n    /** @format uuid */\n    appId: string;\n    name: string | null;\n    permissionSet?: PermissionSet;\n\n    /** The list of drives of which this app should receive access */\n    drives?: DriveGrantRequest[] | null;\n}\n\nexport interface DriveGrantRequest {\n    drive: TargetDrive;\n    permission: DrivePermission;\n}\n\nexport interface TargetDrive {\n    /** @format uuid */\n    alias: string;\n\n    /** @format uuid */\n    type: string;\n}\n\nexport interface AppRegistrationResponse {\n    appId: string;\n    name:string;\n    created:number;\n    isRevoked:boolean;\n}\n\nexport enum DrivePermission {\n    None = 0,\n    Read =  1 << 0,\n    Write =  1 << 2\n}\n\nexport interface PermissionSet {\n    permissions: PermissionFlags\n}\n\nexport enum PermissionFlags {\n    None = 0,\n\n    ApproveConnection = 1 << 0,\n\n    ReadConnections = 1 << 1,\n\n    UpdateConnections = 1 << 2,\n\n    DeleteConnections = 1 << 3,\n    \n    CreateOrSendConnectionRequests = 1 << 4,\n\n    ReadConnectionRequests = 1 << 5,\n\n    DeleteConnectionRequests = 1 << 6,\n\n}\n"],"names":["getSharedSecret","useAuth","useSearchParams","searchParams","useState","isLoaded","setIsLoaded","finalUrl","appRegistrationRequest","setAppRegistrationRequest","clientRegistrationRequest","setClientRegistrationRequest","appRegistration","setAppRegistration","returnScheme","setReturnScheme","tempProvider","AppManagementProvider","driveProvider","DriveProvider","api","ApiType","sharedSecret","chatDriveGrantRequest","drive","alias","type","permission","DrivePermission","chatPermissionSet","permissions","PermissionFlags","useEffect","init","clientRegRequest","appId","appRegRequest","name","permissionSet","drives","clientPublicKey64","get","clientFriendlyName","GetAppRegistration","appReg","registerApp","EnsureDrive","RegisterApp","registerClient","RegisterChatAppClient_temp","clientRegistrationResponse","encodedData","encodeURI","data","bytes","DataUtil","console","log","url","encryptionVersion","window","location","href","className","onClick","created","request","client","this","createAxiosClient","post","response","OwnerProviderBase"],"sourceRoot":""}