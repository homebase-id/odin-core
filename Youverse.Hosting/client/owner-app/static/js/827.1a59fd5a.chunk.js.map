{"version":3,"file":"static/js/827.1a59fd5a.chunk.js","mappings":"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","sources":["components/Dialog/ImportDialog/ImportDialog.tsx","components/ui/Buttons/SaveStatus.tsx","components/ui/Layout/PageMeta/PageMeta.tsx","hooks/drives/useDrives.ts","hooks/drives/useExport.ts","templates/Drives/Drives/Drives.tsx"],"sourcesContent":["import { DataUtil, TargetDrive } from '@youfoundation/dotyoucore-js';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useExport, { importable, isImportable } from '../../../hooks/drives/useExport';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport Alert from '../../ui/Alerts/Alert/Alert';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport DialogWrapper from '../../ui/Dialog/DialogWrapper';\n\nconst ImportDialog = ({\n  title,\n  confirmText,\n  isOpen,\n  targetDrive,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n\n  targetDrive?: TargetDrive;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const {\n    mutateAsync: importUnencrypted,\n    status: importStatus,\n    error: importError,\n  } = useExport().importUnencrypted;\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [dataObject, setDataObject] = useState<importable>();\n  const [importDataStatus, setImportDataStatus] = useState<{ fileId: string; status: boolean }[]>();\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const importData = async (formatDrive?: boolean) => {\n    if (!dataObject) {\n      return;\n    }\n\n    setImportDataStatus(\n      await importUnencrypted({\n        drive: targetDrive,\n        formatDrive: formatDrive,\n        data: dataObject,\n      })\n    );\n\n    // onConfirm();\n  };\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel} size=\"2xlarge\">\n      <>\n        <ErrorNotification error={importError} />\n        {errorMessage && (\n          <Alert type=\"critical\" className=\"mb-8\">\n            {errorMessage}\n          </Alert>\n        )}\n\n        <input\n          onChange={async (e) => {\n            const file = e.target.files[0];\n            if (file) {\n              const arrayBuffer = await file.arrayBuffer();\n              const contents = DataUtil.byteArrayToString(new Uint8Array(arrayBuffer));\n              const dataObject = JSON.parse(contents);\n\n              if (!isImportable(dataObject)) {\n                setErrorMessage(t('The file provided is not in the right JSON format'));\n                return;\n              } else {\n                setErrorMessage(undefined);\n              }\n\n              setDataObject(dataObject);\n            }\n          }}\n          type=\"file\"\n          accept=\"application/json\"\n          className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100`}\n        />\n\n        {dataObject && (\n          <div className=\"my-8\">\n            {!targetDrive ? (\n              <p className=\"pb-2\">\n                {t('A new drive will be created:')} {dataObject.metadata.drive.name}\n              </p>\n            ) : (\n              (dataObject.metadata.drive.targetDriveInfo.alias !== targetDrive.alias ||\n                dataObject.metadata.drive.targetDriveInfo.type !== targetDrive.type) && (\n                <p className=\"pb-2 text-orange-600\">\n                  {t('Warning')}: {t('the export originates from a different drive')}\n                </p>\n              )\n            )}\n\n            <p className=\"mb-6 text-xl\">\n              {t('Found the following')} {dataObject.files.length} {t('files')}.{' '}\n              <small className=\"block text-sm\">\n                {t('Exported on')}:{' '}\n                {new Date(dataObject.metadata.date).toLocaleDateString(undefined, {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric',\n                  hour: 'numeric',\n                  minute: 'numeric',\n                })}\n              </small>\n            </p>\n\n            <ul className=\"-my-1 max-h-[25vh] overflow-auto\">\n              {dataObject.files.map((file) => (\n                <li\n                  key={file.fileId}\n                  className={`my-1 flex flex-row rounded-lg border border-slate-200 px-2 py-1 dark:border-slate-700 ${\n                    importDataStatus &&\n                    (importDataStatus?.find((status) => status.fileId === file.fileId)?.status ===\n                    true\n                      ? 'bg-green-200 dark:bg-green-900'\n                      : 'bg-red-200 dark:bg-red-900')\n                  }`}\n                >\n                  {file.fileId} <span className=\"ml-auto\">{file.fileMetadata.contentType}</span>\n                </li>\n              ))}\n            </ul>\n            {targetDrive ? (\n              <small className=\"mt-6 block text-sm\">\n                {t('Data on the drive will be overwritten when importing')}\n              </small>\n            ) : null}\n          </div>\n        )}\n\n        <div className=\"-m-2 flex flex-row-reverse pt-10 \">\n          <ActionButton className=\"m-2\" onClick={() => importData()} state={importStatus}>\n            {confirmText ?? t('Import')}\n          </ActionButton>\n          <ActionButton\n            className=\"m-2\"\n            onClick={() => importData(true)}\n            state={importStatus}\n            type=\"secondary\"\n          >\n            {t('Clean drive & import')}\n          </ActionButton>\n          <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n            {t('Close')}\n          </ActionButton>\n        </div>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default ImportDialog;\n","import { useEffect, useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Alert from '../Alerts/Alert/Alert';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n  error,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n  error?: unknown;\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (state === 'loading') {\n    return <p className={`${className} text-sm`}>Saving...</p>;\n  }\n\n  if (state === 'error') {\n    return (\n      <Alert type=\"critical\" className={className}>\n        {error instanceof Error ? error.message : t('Something went wrong')}\n      </Alert>\n    );\n  }\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { FC, ReactNode } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n  breadCrumbs,\n  icon,\n}: {\n  title?: ReactNode | string;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n  breadCrumbs?: { title: string; href?: string }[];\n  icon?: FC;\n}) => {\n  return (\n    <section\n      className=\"-mx-5 -mt-4 mb-10 border-b-2 border-gray-100 bg-slate-50 py-4 pr-5 pl-10 dark:border-gray-700 dark:bg-slate-800 sm:-mx-10\n    sm:-mt-8 sm:py-8 sm:px-10\"\n    >\n      <div className=\"flex flex-col sm:flex-row\">\n        <div className=\"flex-col\">\n          {breadCrumbs && (\n            <ul className=\"mb-2 hidden flex-row sm:flex\">\n              {breadCrumbs.map((crumb, index) => {\n                return (\n                  <li key={index} className=\"mr-2\">\n                    {crumb.href ? (\n                      <Link to={crumb.href} className=\"\">\n                        {crumb.title}\n                        <span className=\"ml-2\">{'>'}</span>\n                      </Link>\n                    ) : (\n                      <span className=\"text-slate-500\">{crumb.title}</span>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {title && (\n            <>\n              <h1 className=\"mb-5 flex flex-row text-4xl dark:text-white\">\n                {icon && icon({ className: 'h-8 w-8 my-auto mr-4' })} {title}\n              </h1>\n              <Helmet>\n                <title>\n                  {(typeof title !== 'object' && `${title}`) ||\n                    window.location.pathname.split('/').pop()}{' '}\n                  | Owner console\n                </title>\n              </Helmet>\n            </>\n          )}\n        </div>\n        <div className=\"ml-auto\">\n          <div className=\"-m-2 flex flex-col flex-wrap justify-end sm:flex-row sm:items-center\">\n            {actions}\n          </div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, CoreClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\nconst useDrives = () => {\n  const { getSharedSecret } = useAuth();\n  const client = new CoreClient({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchAll = async () => {\n    return await (\n      await client.driveProvider.GetDrives({ pageNumber: 1, pageSize: 100 })\n    ).results;\n  };\n\n  return {\n    fetch: useQuery(['drives'], () => fetchAll(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useDrives;\n","import { useMutation } from '@tanstack/react-query';\nimport { AccessControlList, DriveDefinition } from '@youfoundation/dotyoucore-js';\nimport { UploadInstructionSet } from '@youfoundation/dotyoucore-js';\nimport { UploadFileMetadata } from '@youfoundation/dotyoucore-js';\nimport { AppFileMetaData } from '@youfoundation/dotyoucore-js';\nimport { DataUtil } from '@youfoundation/dotyoucore-js';\nimport { ApiType, CoreClient, DriveSearchResult, TargetDrive } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\nconst includeMetadataHeader = true;\nconst pageSize = 10;\nconst maxPages = 10;\n\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\nexport interface importable {\n  metadata: {\n    drive: DriveDefinition;\n    date: string;\n  };\n  files: importableFile[];\n}\nexport interface importableFile {\n  fileId: string;\n  fileMetadata: {\n    contentType: string;\n    senderDotYouId: string;\n    payloadIsEncrypted: boolean;\n    accessControlList: AccessControlList;\n    appData: AppFileMetaData;\n  };\n  payload: string | Record<string, unknown>;\n}\n\nexport const isImportable = (obj: unknown): obj is importable => {\n  if (typeof obj !== 'object' || !('metadata' in obj) || !('files' in obj)) {\n    return false;\n  }\n\n  if (\n    !('files' in obj) ||\n    !Array.isArray(obj['files']) ||\n    obj['files'] === null ||\n    obj['files'].length === 0\n  ) {\n    return false;\n  }\n\n  if (\n    obj['files'].some((entry) => {\n      return (\n        !('payload' in entry) ||\n        !('fileId' in entry) ||\n        !('fileMetadata' in entry) ||\n        !('contentType' in entry.fileMetadata) ||\n        !(typeof entry.payload === 'string' || typeof entry.payload === 'object')\n      );\n    })\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nconst useExport = () => {\n  const { getSharedSecret } = useAuth();\n  const coreClient = new CoreClient({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const getAllFilesOnDrive = async (drive: TargetDrive) => {\n    const queryBatch = async (cursorState: string) => {\n      return await coreClient.driveProvider.QueryBatch(\n        { targetDrive: drive },\n        {\n          maxRecords: pageSize,\n          includeMetadataHeader: includeMetadataHeader,\n          cursorState: cursorState,\n        }\n      );\n    };\n\n    const searchResults: DriveSearchResult[] = [];\n    let cursorState: string | undefined = undefined;\n\n    for (let i = 0; i < maxPages; i++) {\n      const response = await queryBatch(cursorState);\n      searchResults.push(...response.searchResults);\n      cursorState = response.cursorState;\n\n      if (response.searchResults.length < pageSize) {\n        break;\n      }\n    }\n\n    return searchResults;\n  };\n\n  const exportUnencrypted = async (drive: DriveDefinition) => {\n    const targetDrive = drive.targetDriveInfo;\n    const searchResults = await getAllFilesOnDrive(targetDrive);\n\n    const getPayload = async (result: DriveSearchResult) => {\n      if (result.fileMetadata.contentType === 'application/json') {\n        return await coreClient.driveProvider.GetPayload(\n          targetDrive,\n          result.fileId,\n          result.fileMetadata,\n          result.sharedSecretEncryptedKeyHeader,\n          includeMetadataHeader\n        );\n      } else {\n        const keyheader = result.fileMetadata.payloadIsEncrypted\n          ? await coreClient.driveProvider.DecryptKeyHeader(result.sharedSecretEncryptedKeyHeader)\n          : undefined;\n\n        return await coreClient.driveProvider.GetPayloadBytes(\n          targetDrive,\n          result.fileId,\n          keyheader\n        );\n      }\n    };\n\n    const getFile = async (result) => {\n      return {\n        fileId: result.fileId,\n        fileMetadata: {\n          contentType: result.fileMetadata.contentType,\n          senderDotYouId: result.fileMetadata.senderDotYouId,\n          payloadIsEncrypted: result.fileMetadata.payloadIsEncrypted,\n          accessControlList: result.serverMetadata.accessControlList,\n          appData: {\n            ...result.fileMetadata.appData,\n            jsonContent: undefined,\n            previewThumbnail: undefined,\n            additionalThumbnails: undefined,\n            contentIsComplete: undefined,\n          },\n        },\n        payload: await getPayload(result),\n      };\n    };\n\n    //TODO Remove this debug code\n    let resultsWithPayload: unknown[];\n    if (localStorage.getItem('export-timeout')) {\n      const timeout = parseInt(localStorage.getItem('export-timeout'));\n      console.log('exporting with', timeout);\n      resultsWithPayload = [];\n\n      for (let i = 0; i < searchResults.length; i++) {\n        await delay(timeout);\n\n        resultsWithPayload.push(await getFile(searchResults[i]));\n      }\n    } else {\n      resultsWithPayload = await Promise.all(\n        searchResults.map(async (result) => await getFile(result))\n      );\n    }\n\n    const exportable = {\n      metadata: { drive: { ...drive }, date: new Date().toString() },\n      files: resultsWithPayload,\n    };\n\n    const stringified = DataUtil.JsonStringify64(exportable);\n    const url = window.URL.createObjectURL(\n      new Blob([stringified], { type: 'application/json;charset=utf-8' })\n    );\n\n    return url;\n  };\n\n  const clearAllFilesOnDrive = async (drive: TargetDrive) => {\n    const searchResults = await getAllFilesOnDrive(drive);\n\n    return await Promise.all(\n      searchResults.map(\n        async (result) => await coreClient.driveProvider.DeleteFile(drive, result.fileId)\n      )\n    );\n  };\n\n  const importUnencrypted = async ({\n    drive,\n    formatDrive,\n    data,\n  }: {\n    drive?: TargetDrive;\n    formatDrive?: boolean;\n    data: unknown;\n  }) => {\n    if (!isImportable(data)) {\n      return [{ fileId: 'root', status: false }];\n    }\n\n    let targetDrive = drive;\n\n    if (!targetDrive) {\n      await coreClient.driveProvider.EnsureDrive(\n        data.metadata.drive.targetDriveInfo,\n        data.metadata.drive.name,\n        data.metadata.drive.metadata,\n        data.metadata.drive.allowAnonymousReads\n      );\n\n      targetDrive = data.metadata.drive.targetDriveInfo;\n    } else if (formatDrive) {\n      await clearAllFilesOnDrive(targetDrive);\n    }\n\n    return await Promise.all(\n      data.files.map(async (file) => {\n        try {\n          // Check if image file:\n          if (\n            ['image/png', 'image/jpeg', 'image/tiff', 'image/webp', 'image/svg+xml'].includes(\n              file.fileMetadata.contentType\n            )\n          ) {\n            await coreClient.mediaProvider.uploadImage(\n              targetDrive,\n              file.fileMetadata.appData.tags,\n              file.fileMetadata.accessControlList,\n              DataUtil.base64ToUint8Array(file.payload.toString()),\n              formatDrive ? undefined : file.fileId,\n              file.fileMetadata.contentType\n            );\n          } else {\n            const instructionSet: UploadInstructionSet = {\n              transferIv: coreClient.driveProvider.Random16(),\n              storageOptions: {\n                overwriteFileId: formatDrive ? undefined : file.fileId,\n                drive: targetDrive,\n              },\n              transitOptions: null,\n            };\n\n            const payloadJson =\n              file.fileMetadata.contentType === 'application/json' &&\n              DataUtil.JsonStringify64(file.payload);\n            const payloadBytes = payloadJson\n              ? DataUtil.stringToUint8Array(payloadJson)\n              : DataUtil.base64ToUint8Array(file.payload.toString());\n\n            const shouldEmbedContent = payloadBytes.length < 3000;\n            const metadata: UploadFileMetadata = {\n              contentType: file.fileMetadata.contentType,\n              senderDotYouId: file.fileMetadata.senderDotYouId,\n              payloadIsEncrypted: file.fileMetadata.payloadIsEncrypted,\n              accessControlList: file.fileMetadata.accessControlList,\n              appData: {\n                ...file.fileMetadata.appData,\n                contentIsComplete: shouldEmbedContent,\n                jsonContent: shouldEmbedContent ? payloadJson : null,\n              },\n            };\n\n            await coreClient.driveProvider.Upload(\n              instructionSet,\n              metadata,\n              payloadBytes,\n              undefined,\n              file.fileMetadata.payloadIsEncrypted\n            );\n          }\n        } catch (ex) {\n          console.error(ex);\n          return { fileId: file.fileId, status: false };\n        }\n\n        return { fileId: file.fileId, status: true };\n      })\n    );\n  };\n\n  return {\n    exportUnencrypted: useMutation(exportUnencrypted),\n    importUnencrypted: useMutation(importUnencrypted),\n  };\n};\n\nexport default useExport;\n","import { DriveDefinition } from '@youfoundation/dotyoucore-js';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useDrives from '../../../hooks/drives/useDrives';\nimport ActionButton from '../../../components/ui/Buttons/ActionButton';\nimport ImportDialog from '../../../components/Dialog/ImportDialog/ImportDialog';\nimport HardDrive from '../../../components/ui/Icons/HardDrive/HardDrive';\nimport PageMeta from '../../../components/ui/Layout/PageMeta/PageMeta';\nimport LoadingParagraph from '../../../components/ui/Loaders/LoadingParagraph/LoadingParagraph';\n\nconst Drives = () => {\n  const {\n    fetch: { data: drives, isLoading: isDrivesLoading },\n  } = useDrives();\n\n  const [isImportOpen, setIsImportOpen] = useState(false);\n\n  if (isDrivesLoading) {\n    <>Loading</>;\n  }\n\n  return (\n    <>\n      <PageMeta\n        icon={HardDrive}\n        title={t('My Drives')}\n        actions={\n          <ActionButton\n            onClick={async () => setIsImportOpen(true)}\n            className=\"m-2\"\n            type=\"secondary\"\n          >\n            {t('Import drive')}...\n          </ActionButton>\n        }\n      />\n      <section className=\"-my-4\">\n        {isDrivesLoading ? (\n          <>\n            <LoadingParagraph className=\"m-4 h-10\" />\n            <LoadingParagraph className=\"m-4 h-10\" />\n            <LoadingParagraph className=\"m-4 h-10\" />\n          </>\n        ) : (\n          <>\n            {drives\n              ? drives.map((driveDef) => (\n                  <DriveCard\n                    driveDefinition={driveDef}\n                    key={`${driveDef.targetDriveInfo.alias}-${driveDef.targetDriveInfo.type}`}\n                    className=\"py-4\"\n                  />\n                ))\n              : null}\n          </>\n        )}\n      </section>\n\n      <ImportDialog\n        title={`${t('Import new Drive')}`}\n        isOpen={isImportOpen}\n        onConfirm={() => setIsImportOpen(false)}\n        onCancel={() => setIsImportOpen(false)}\n      />\n    </>\n  );\n};\n\nconst DriveCard = ({\n  driveDefinition,\n  className,\n}: {\n  driveDefinition: DriveDefinition;\n  className: string;\n}) => {\n  return (\n    <div className={`${className}`}>\n      <Link\n        to={`${driveDefinition.targetDriveInfo.alias}_${driveDefinition.targetDriveInfo.type}`}\n        className=\"block h-full rounded-md border-[1px] border-gray-200 border-opacity-60 bg-white transition-colors hover:shadow-md dark:border-gray-800 dark:bg-gray-800 hover:dark:shadow-slate-600\"\n      >\n        <h2 className=\"bg-slate-100 p-4 text-xl dark:bg-slate-700 dark:text-slate-200\">\n          {driveDefinition.name}\n        </h2>\n        <div className=\"p-4\">\n          <h3 className=\"text-lg\">Metadata</h3>\n          <p>{driveDefinition.metadata}</p>\n          <ul>{driveDefinition.allowAnonymousReads ? <li>Allow Anonymous Reads</li> : null}</ul>\n          {/* <p className=\"text-xs\">\n              Created on: {new Date(driveDefinition.).toLocaleDateString()}\n            </p> */}\n        </div>\n      </Link>\n    </div>\n  );\n};\nexport default Drives;\n"],"names":["title","confirmText","isOpen","targetDrive","onCancel","target","usePortal","useExport","importUnencrypted","mutateAsync","importStatus","status","importError","error","useState","errorMessage","setErrorMessage","dataObject","setDataObject","importDataStatus","setImportDataStatus","importData","formatDrive","drive","data","dialog","onClose","size","type","className","onChange","e","file","files","arrayBuffer","contents","DataUtil","Uint8Array","JSON","parse","isImportable","t","undefined","accept","metadata","targetDriveInfo","alias","name","length","Date","date","toLocaleDateString","month","day","year","hour","minute","map","find","fileId","fileMetadata","contentType","onClick","state","createPortal","lastSave","setLastSave","now","setNow","useEffect","timer","setTimeout","clearTimeout","Error","message","diff","getTime","text","toLocaleString","actions","saveStatus","breadCrumbs","icon","crumb","index","href","to","window","location","pathname","split","pop","getSharedSecret","useAuth","client","CoreClient","api","ApiType","sharedSecret","fetchAll","driveProvider","GetDrives","pageNumber","pageSize","results","fetch","useQuery","refetchOnWindowFocus","delay","ms","Promise","res","obj","Array","isArray","some","entry","payload","coreClient","getAllFilesOnDrive","queryBatch","cursorState","QueryBatch","maxRecords","includeMetadataHeader","searchResults","i","response","push","exportUnencrypted","getPayload","result","GetPayload","sharedSecretEncryptedKeyHeader","payloadIsEncrypted","DecryptKeyHeader","keyheader","GetPayloadBytes","getFile","senderDotYouId","accessControlList","serverMetadata","appData","jsonContent","previewThumbnail","additionalThumbnails","contentIsComplete","localStorage","getItem","timeout","parseInt","console","log","resultsWithPayload","all","exportable","toString","stringified","url","URL","createObjectURL","Blob","clearAllFilesOnDrive","DeleteFile","EnsureDrive","allowAnonymousReads","includes","mediaProvider","uploadImage","tags","instructionSet","transferIv","Random16","storageOptions","overwriteFileId","transitOptions","payloadJson","payloadBytes","shouldEmbedContent","Upload","useMutation","DriveCard","driveDefinition","useDrives","drives","isDrivesLoading","isLoading","isImportOpen","setIsImportOpen","HardDrive","driveDef","onConfirm"],"sourceRoot":""}