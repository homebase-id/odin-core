{"version":3,"file":"static/js/440.2d6a26ad.chunk.js","mappings":"2IA4BA,IAxB6B,SAAC,GAMvB,IALLA,EAKI,EALJA,UACAC,EAII,EAJJA,gBAKA,OAAKD,GAKH,gBAAKE,UAAU,OAAf,UACE,SAAC,KAAD,CAAMC,GAAE,yBAAoBH,EAAUI,IAAtC,UACE,gBAAIF,UAAU,6BAAd,WACE,SAAC,IAAD,CAASA,UAAU,yBAA0B,KAC7C,iBAAMA,UAAU,UAAhB,SAA2BF,EAAUK,OACpCJ,IAAmB,kBAAMC,UAAU,UAAhB,eAA6BD,aAThD,uBAcV,C,qFCeD,IAlC4B,SAAC,GAQtB,IAAD,IAPJK,EAOI,EAPJA,WACAC,EAMI,EANJA,eACAL,EAKI,EALJA,UAMcM,GAAUC,EAAAA,EAAAA,GAAS,CAAEC,YAAaJ,EAAWE,QAASG,MAA5DC,KAER,OACE,gBAEEV,UAAS,wBAAmBA,GAC5BW,MAAON,EAHT,UAKE,UAAC,KAAD,CACEJ,GAAE,+BAAmBK,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAOM,uBAA1B,aAAmB,EAAwBC,MAA3C,mBAAoDP,QAApD,IAAoDA,GAApD,UAAoDA,EAAOM,uBAA3D,aAAoD,EAAwBE,MAC9Ed,UAAU,WAFZ,WAIE,SAAC,IAAD,CAAWA,UAAU,+BACrB,iBAAKA,UAAU,gBAAf,WACE,eAAGA,UAAS,uBAAmBK,EAA6B,GAAZ,WAAhD,iBACGC,QADH,IACGA,OADH,EACGA,EAAOH,KADV,IACiB,KACdY,EAAAA,EAAAA,IAA8BX,EAAWY,WAAYC,EAAAA,GAAuBd,QAE9EE,IAAkB,kBAAOL,UAAU,OAAjB,SAAyBK,WAflD,UACUD,EAAWE,MAAMO,MAD3B,YACoCT,EAAWE,MAAMQ,MAmBxD,C,4NCoFD,EAjH+B,SAAC,GAkBzB,IAjBLH,EAiBI,EAjBJA,MACAO,EAgBI,EAhBJA,OAEAC,EAcI,EAdJA,oBACAC,EAaI,EAbJA,SAEAC,EAWI,EAXJA,UACAC,EAUI,EAVJA,SAWMC,GAASC,EAAAA,EAAAA,GAAU,mBAEzB,GAIIC,EAAAA,EAAAA,KAHaC,EADjB,EACEjB,MAASC,KACoBiB,EAF/B,EAEEA,aAAgBC,YACYC,EAH9B,EAGEA,YAAeD,YAEXE,EAAwBX,EAAoBY,KAAI,SAACC,GAAD,OAAWA,EAAMC,QAAjB,IAEtD,GAA4CC,EAAAA,EAAAA,UAAmB,IAA/D,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA8CF,EAAAA,EAAAA,UAAmB,IAAjE,eAAOG,EAAP,KAAwBC,EAAxB,KAEA,IAAKpB,EACH,OAAO,KAGT,IAAMqB,GACJ,SAACC,EAAA,EAAD,CAAe7B,MAAOA,EAAO8B,QAASnB,EAAtC,UACE,+BACE,kBACEoB,SAAQ,yCAAE,WAAOC,GAAP,6EACRA,EAAEC,iBADM,SAGFC,QAAQC,IACZT,EAAgBN,IAAhB,yCAAoB,WAAOgB,GAAP,+FACXpB,EAAa,CAAEM,SAAUc,EAAiB3B,SAAUA,KADzC,2CAApB,wDAJM,uBASFyB,QAAQC,IACZX,EAAeJ,IAAf,yCAAmB,WAAOiB,GAAP,+FACVnB,EAAY,CAAEI,SAAUe,EAAgB5B,SAAUA,KADxC,2CAAnB,wDAVM,OAeRC,IAfQ,2CAAF,sDADV,UAmBGK,EAAQuB,QACP,iCACE,gBAAIjD,UAAU,eAAd,WAA8BkD,EAAAA,EAAAA,GAAE,aAAhC,OAECxB,EAAQK,KAAI,SAACoB,EAAQC,GAAW,IAAD,EAC9B,OACE,iBAA8BpD,UAAU,OAAxC,WACE,SAACqD,EAAA,EAAD,CACEC,MAAOH,EAAOjD,GACdA,GAAIiD,EAAOjD,GACXqD,SAAU,SAACZ,GACLA,EAAEpB,OAAOiC,SAEN1B,EAAsB2B,MAAK,SAACzB,GAAD,OAAWA,IAAUmB,EAAOjD,EAA5B,KAC9BoC,EAAmB,GAAD,eAAKD,GAAL,CAAsBc,EAAOjD,MAEjDkC,EACED,EAAeuB,QAAO,SAACzB,GAAD,OAAcA,IAAakB,EAAOjD,EAAlC,OAIpB4B,EAAsB2B,MAAK,SAACzB,GAAD,OAAWA,IAAUmB,EAAOjD,EAA5B,KAC7BkC,EAAkB,GAAD,eAAKD,GAAL,CAAqBgB,EAAOjD,MAE/CoC,EACED,EAAgBqB,QAAO,SAACzB,GAAD,OAAcA,IAAakB,EAAOjD,EAAlC,KAG5B,EACDyD,gBAA8D,IAA9C7B,EAAsB8B,QAAQT,EAAOjD,OAEvD,kBAAO2D,QAASV,EAAOjD,GAAIF,UAAU,OAArC,SACGmD,EAAOhD,SA1BZ,UAAUgD,EAAOjD,UAAjB,QAAuBkD,EA8B1B,OAED,MAEJ,iBAAKpD,UAAU,yCAAf,WACE,SAAC8D,EAAA,EAAD,CAAc9D,UAAU,OAAO+D,KAAM,OAArC,UACGb,EAAAA,EAAAA,GAAE,WAEL,SAACY,EAAA,EAAD,CAAc9D,UAAU,OAAOc,KAAK,YAAYkD,QAAS1C,EAAzD,UACG4B,EAAAA,EAAAA,GAAE,sBAQf,OAAOe,EAAAA,EAAAA,cAAa1B,EAAQhB,EAC7B,E,iDCgCK2C,EAA6B,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,YACtBzC,GAAYD,EAAAA,EAAAA,KAAahB,MAA/BC,KACF0D,EAAc,OAAG1C,QAAH,IAAGA,OAAH,EAAGA,EAASgC,QAAO,SAACP,GAAD,OACrCgB,EAAYE,aAAaZ,MAAK,SAACa,GAAD,OAAiBA,EAAYrC,WAAakB,EAAOjD,EAAjD,GADO,IAIjCqE,EAAgC,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAgBI,QAAO,SAACC,EAASC,GACxE,MAAM,GAAN,eACKD,IADL,OAEKC,EAAQC,aAAa5C,KAAI,SAAC3B,GAC3B,MAAO,CAAEA,WAAYA,EAAYC,eAAe,GAAD,QAAK6C,EAAAA,EAAAA,GAAE,QAAP,YAAkBwB,EAAQvE,MAC1E,KAEJ,GAAE,IACH,OACE,iCACE,SAACyE,EAAA,EAAD,CAASjE,OAAOuC,EAAAA,EAAAA,GAAE,mCAAoC2B,YAAY,EAAlE,SACIV,EAAYW,UAMV,MALF,qCACGV,QADH,IACGA,OADH,EACGA,EAAgBrC,KAAI,SAACgD,GAAD,OACnB,SAAC,IAAD,CAAsBjF,UAAWiF,GAAoBA,EAAc7E,GADhD,SAO3B,SAAC0E,EAAA,EAAD,CAASjE,OAAOuC,EAAAA,EAAAA,GAAE,kCAAmC2B,YAAY,EAAjE,SACmC,OAAhCN,QAAgC,IAAhCA,GAAAA,EAAkCtB,QACjC,8BACGsB,EAAiCxC,KAAI,SAACiD,GACrC,OACE,SAACC,EAAA,EAAD,CAEE7E,WAAY4E,EAAiB5E,WAC7BC,eAAgB2E,EAAiB3E,eACjCL,UAAU,QAJZ,UACUgF,EAAiB5E,WAAWE,MAAMO,MAD5C,YACqDmE,EAAiB5E,WAAWE,MAAMQ,MAM1F,MAED,SAIX,EAED,EArL0B,WACxB,IAAQoE,GAAkBC,EAAAA,EAAAA,MAAlBD,cACFE,GAAWC,EAAAA,EAAAA,MACjB,GAMIC,EAAAA,EAAAA,GAAc,CAAElE,SAAU8D,IAN9B,IACEzE,MAAe8E,EADjB,EACW7E,KAAiC8E,EAD5C,EACiCC,UADjC,IAEEC,WAAsBA,EAFxB,EAEgBC,OAA4BC,EAF5C,EAEoCC,OAFpC,IAGEC,cAAyBC,EAH3B,EAGmBJ,OAA+BK,EAHlD,EAG0CH,OAH1C,IAIEI,cAAyBA,EAJ3B,EAImBN,OAA+BO,EAJlD,EAI0CL,OAJ1C,IAKEM,wBAAmCC,EALrC,EAK6BT,OAA+BU,EAL5D,EAKoDR,OAGpD,GAA4D3D,EAAAA,EAAAA,WAAS,GAArE,eAAOoE,EAAP,KAA+BC,EAA/B,KAMA,GAJIf,GACF,YAGGD,EACH,OAAO,+DAGT,IAAMiB,EACsB,cAA1BjB,EAAeM,QACb,iCACE,SAAC/B,EAAA,EAAD,CACEhD,KAAK,UACLd,UAAU,kBACVgE,QAAS,WACPuC,GAA0B,EAC3B,EACDE,MAAOb,EANT,UAQG1C,EAAAA,EAAAA,GAAE,mBAEL,SAACY,EAAA,EAAD,CACEhD,KAAK,SACLd,UAAU,eACVgE,QAAS,WACP0B,EAAW,CAAC,EACb,EACD3B,KAAM,QACN0C,MAAOb,EAPT,UASG1C,EAAAA,EAAAA,GAAE,eAGqB,YAA1BqC,EAAeM,QACjB,iCACE,SAAC/B,EAAA,EAAD,CACEhD,KAAK,UACLd,UAAU,kBACVgE,QAAS,WACP+B,EAAc,CAAEW,eAAgBnB,EAAemB,gBAChD,EACDD,MAAOT,EANT,UAQG9C,EAAAA,EAAAA,GAAE,qBAEL,SAACY,EAAA,EAAD,CACEhD,KAAK,YACLd,UAAU,eACVgE,QAAS,WACPiC,EACE,CAAES,eAAgBnB,EAAemB,gBACjC,CAAEC,UAAW,kBAAMvB,EAAS,qBAAf,GAEhB,EACDqB,MAAOP,EATT,UAWGhD,EAAAA,EAAAA,GAAE,eAGqB,SAA1BqC,EAAeM,QACjB,+BACE,SAAC/B,EAAA,EAAD,CACEhD,KAAK,YACLd,UAAU,eACVgE,QAAS,WACPoC,EACE,CAAEQ,eAAgBrB,EAAemB,gBACjC,CAAEC,UAAW,kBAAMvB,EAAS,qBAAf,GAEhB,EACDqB,MAAOJ,EATT,UAWGnD,EAAAA,EAAAA,GAAE,eAIP,wBAGE2D,EAAmBtB,EAEzB,OACE,iCACE,SAACuB,EAAA,EAAD,CACE/C,KAAMgD,EAAAA,EACNpG,MAAK,UAAKuE,EAAL,aAAuBK,EAAeM,OAAtC,KACLW,QAASA,EACTQ,YAAa,CACX,CAAEC,KAAM,qBAAsBtG,MAAO,eACrC,CAAEA,MAAOuE,MAGc,cAA1BK,EAAeM,QACd,iCACE,gCACE,eAAG7F,UAAU,UAAb,WACGkD,EAAAA,EAAAA,GAAE,mBADL,KAC2B,IAAIgE,KAAKL,EAAiBM,SAASC,yBAE9D,SAAClD,EAAD,CAA4BC,YAAa0C,EAAiB1C,kBAE5D,SAAC,EAAD,CACExD,MAAK,WAAKuC,EAAAA,EAAAA,GAAE,8BAAP,YAAwCgC,GAC7ChE,OAAQoF,EACRlF,SAAU8D,EACV/D,oBAAqB0F,EAAiB1C,YAAYE,aAClD/C,SAAU,WACRiF,GAA0B,EAC3B,EACDlF,UAAW,WACTkF,GAA0B,EAC3B,OAGuB,YAA1BhB,EAAeM,QAAkD,SAA1BN,EAAeM,QACxD,+BACE,cAAG7F,UAAU,eAAb,SAA6BuF,EAAe8B,YAE5C,OAGT,C,wJCvJM,IAAMC,EAAQ,SAACC,GACpB,OAAOA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,EAAItE,QAC3C,EAEY0E,EAAoB,WAQ/B,OAAOL,EAPW,CAChB,8GACA,+EACA,6DACA,mEAIH,EAEYM,EAAa,WACxB,IAAMC,EAAa,CACjB,WACA,YACA,QACA,OACA,UACA,QACA,YACA,WACA,OACA,cACA,gBACA,QACA,SACA,YACA,UACA,YACA,QACA,aACA,SACA,WACA,cACA,SACA,SACA,WACA,QACA,UACA,OACA,aACA,UACA,YACA,UACA,YACA,QACA,cACA,UACA,WAoCF,MAAM,GAAN,OAAUP,EAAMO,GAAhB,YAA+BP,EAAMO,GAArC,YAAoDP,EAjCtC,CACZ,QACA,MACA,WACA,QACA,OACA,SACA,SACA,OACA,QACA,SACA,SACA,QACA,QACA,QACA,SACA,WACA,WACA,QACA,OACA,QACA,SACA,aACA,WACA,YACA,QACA,SACA,SACA,YACA,WACA,SAIH,EAEYQ,EAAsB,SAACC,GAIlC,IAHA,IAAMC,EAAgBC,OAAOC,KAAKH,GAC5BI,EAAMH,EAAc/E,OACpBmF,EAAQ,IAAIC,WAAWF,GACpBG,EAAI,EAAGA,EAAIH,EAAKG,IACvBF,EAAME,GAAKN,EAAcO,WAAWD,GAEtC,OAAOF,EAAMI,MACd,EAYYzH,EAAgC,SAC3CuC,EACAmF,GAEA,OAAOA,EAAiBjE,QAAO,SAACkE,EAAWC,GACzC,OAAIA,EAAUrF,MAAQoF,EAAUpF,OAASqF,EAAUrF,OAASA,EACnDqF,EAGFD,CACR,GAAED,EAAiB,GACrB,C,uFCLD,IAhHsB,SAAC,GAAyC,IAAvCrH,EAAsC,EAAtCA,SACjBwH,GAAcC,EAAAA,EAAAA,kBAEZC,GAAoBC,EAAAA,EAAAA,KAApBD,gBACFE,EAAwBC,EAAAA,EAAAA,YAAkCH,KAC1DI,EAA+BC,EAAAA,EAAAA,YAAyCL,KAExEM,EAAW,yCAAG,mGAAShI,EAAT,EAASA,SAAT,iEAKW4H,EAAsBK,kBAAkBjI,GALnD,YAKZmE,EALY,SAM8B,SAA1BA,EAAeM,OANnB,yCAOTN,GAPS,wBAUW2D,EAA6BI,kBAAkBlI,GAV1D,aAUZmI,EAVY,kDAYTA,GAZS,yBAeQL,EAA6BM,eAAepI,GAfpD,eAeZqI,EAfY,gCAgBXA,QAhBW,IAgBXA,EAAAA,EAAelE,GAhBJ,4CAAH,sDAmBXG,EAAU,yCAAG,iGAASgE,EAAT,EAASA,mBAAT,SACJV,EAAsBW,sBAAtB,OAA4CD,QAA5C,IAA4CA,EAAAA,EAAsBtI,GAD9D,mFAAH,sDAIVwI,EAAqB,yCAAG,uGAC5BhD,EAD4B,EAC5BA,eACAS,EAF4B,EAE5BA,QACAlH,EAH4B,EAG5BA,KACA0J,EAJ4B,EAI5BA,UAJ4B,SAWfX,EAA6BY,YAAYlD,EAAgBS,EAASlH,EAAM0J,GAXzD,mFAAH,sDAcrB1D,EAAuB,yCAAG,iGAASS,EAAT,EAASA,eAAT,SACjBsC,EAA6Ba,kBAAkBnD,GAD9B,mFAAH,sDAIvBd,EAAa,yCAAG,iGAASY,EAAT,EAASA,eAAT,SACPwC,EAA6Bc,wBAAwBtD,GAD9C,mFAAH,sDAIbT,EAAa,yCAAG,iGAASS,EAAT,EAASA,eAAT,SACPwC,EAA6Be,qBAAqBvD,GAD3C,mFAAH,sDAInB,MAAO,CACLjG,OAAOyJ,EAAAA,EAAAA,UAAS,CAAC,iBAAkB9I,IAAW,kBAAMgI,EAAY,CAAEhI,SAAAA,GAApB,GAAiC,CAC7E+I,gBAAgB,EAChBC,sBAAsB,IAGxB1E,YAAY2E,EAAAA,EAAAA,aAAY3E,EAAY,CAClCiB,UAAW,SAACjG,EAAM4J,GAChB1B,EAAY2B,kBAAkB,CAAC,sBAC/B3B,EAAY2B,kBAAkB,CAAC,iBAAkBD,GAClD,EACDE,QAAS,SAACC,GACRC,QAAQC,MAAMF,EACf,IAGHb,uBAAuBS,EAAAA,EAAAA,aAAYT,EAAuB,CACxDjD,UAAW,SAACjG,EAAM4J,GAChB1B,EAAY2B,kBAAkB,CAAC,iBAC/B3B,EAAY2B,kBAAkB,CAAC,iBAAkBD,EAAM1D,gBACxD,EACD4D,QAAS,SAACC,GACRC,QAAQC,MAAMF,EACf,IAEHtE,yBAAyBkE,EAAAA,EAAAA,aAAYlE,EAAyB,CAC5DQ,UAAW,SAACjG,EAAM4J,GAChB1B,EAAY2B,kBAAkB,CAAC,iBAC/B3B,EAAY2B,kBAAkB,CAAC,iBAAkBD,EAAM1D,gBACxD,EACD4D,QAAS,SAACC,GACRC,QAAQC,MAAMF,EACf,IAEH3E,eAAeuE,EAAAA,EAAAA,aAAYvE,EAAe,CACxCa,UAAW,SAACjG,EAAM4J,GAChB1B,EAAY2B,kBAAkB,CAAC,uBAC/B3B,EAAY2B,kBAAkB,CAAC,sBAC/B3B,EAAY2B,kBAAkB,CAAC,iBAAkBD,EAAM5D,gBACxD,EACD8D,QAAS,SAACC,GACRC,QAAQC,MAAMF,EACf,IAEHxE,eAAeoE,EAAAA,EAAAA,aAAYpE,EAAe,CACxCU,UAAW,SAACjG,EAAM4J,GAChB1B,EAAY2B,kBAAkB,CAAC,uBAC/B3B,EAAY2B,kBAAkB,CAAC,iBAAkBD,EAAM5D,gBACxD,EACD8D,QAAS,SAACC,GACRC,QAAQC,MAAMF,EACf,IAGN,C,6ECnFD,IA5BiB,SAAC,GAAmD,IAAjDjK,EAAgD,EAAhDA,YACVsI,GAAoBC,EAAAA,EAAAA,KAApBD,gBACF8B,EAAS,IAAIC,EAAAA,GAAW,CAAEC,IAAKC,EAAAA,GAAAA,MAAeC,aAAclC,MAE5DrI,EAAK,yCAAG,WAAOD,GAAP,4FAEJoK,EAAOK,cAAcC,UAAU,CAAEC,WAAY,EAAGC,SAAU,MAFtD,8BAGVC,QAHU,cACNC,EADM,yBAKLA,EAAUC,MACf,SAACjL,GAAD,OACEA,EAAMM,gBAAgBC,QAAUL,EAAYK,OAC5CP,EAAMM,gBAAgBE,OAASN,EAAYM,IAF7C,KANU,2CAAH,sDAYX,MAAO,CACLL,OAAOyJ,EAAAA,EAAAA,UACL,CAAC,QAAD,UAAa1J,EAAYK,MAAzB,YAAkCL,EAAYM,QAC9C,kBAAML,EAAMD,EAAZ,GACA,CACE2J,gBAAgB,EAChBC,sBAAsB,IAI7B,C,4FC5BYnJ,EAAwB,CACnC,CAAEd,MAAM+C,EAAAA,EAAAA,GAAE,QAASI,MAAO,GAC1B,CAAEnD,MAAM+C,EAAAA,EAAAA,GAAE,UAAWI,MAAO,GAC5B,CAAEnD,MAAM+C,EAAAA,EAAAA,GAAE,UAAWI,MAAO,IAGjBkI,EAAyB,CACpC,CAAErL,MAAM+C,EAAAA,EAAAA,GAAE,QAASI,MAAO,GAC1B,CAAEnD,MAAM+C,EAAAA,EAAAA,GAAE,oBAAqBI,MAAO,IACtC,CAAEnD,MAAM+C,EAAAA,EAAAA,GAAE,4BAA6BI,MAAO,IAC9C,CAAEnD,MAAM+C,EAAAA,EAAAA,GAAE,uBAAwBI,MAAO,I","sources":["components/PermissionViews/CirclePermissionView/CirclePermissionView.tsx","components/PermissionViews/DrivePermissionView/DrivePermissionView.tsx","components/Dialog/CircleMembershipDialog/CircleMembershipDialog.tsx","components/Templates/ConnectionDetails/ConnectionDetails.tsx","components/Templates/DemoData/helpers.ts","hooks/connection/useConnection.ts","hooks/drive/useDrive.ts","provider/permission/permissionLevels.ts"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { CircleDefinition } from '../../../provider/connections/CirlceDataTypes';\nimport Circles from '../../Icons/Circles/Circles';\n\nconst CircleMembershipView = ({\n  circleDef,\n  permissionLevel,\n}: {\n  circleDef: CircleDefinition;\n  permissionLevel?: string;\n}) => {\n  if (!circleDef) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"mb-4\">\n      <Link to={`/owner/circles/${circleDef.id}`}>\n        <h2 className=\"mb-2 flex flex-row text-xl\">\n          <Circles className=\"my-auto mr-2 h-4 w-4\" />{' '}\n          <span className=\"my-auto\">{circleDef.name}</span>\n          {permissionLevel && <span className=\"my-auto\">: {permissionLevel}</span>}\n        </h2>\n      </Link>\n    </div>\n  );\n};\n\nexport default CircleMembershipView;\n","import { Link } from 'react-router-dom';\nimport useDrive from '../../../hooks/drive/useDrive';\nimport { DriveGrant } from '../../../provider/connections/CirlceDataTypes';\nimport { drivePermissionLevels } from '../../../provider/permission/permissionLevels';\nimport HardDrive from '../../Icons/HardDrive/HardDrive';\nimport { getAccessFromPermissionNumber } from '../../Templates/DemoData/helpers';\n\nconst DrivePermissionView = ({\n  driveGrant,\n  permissionTree,\n  className,\n}: {\n  driveGrant: DriveGrant;\n  permissionTree?: string;\n  className?: string;\n}) => {\n  const { data: drive } = useDrive({ targetDrive: driveGrant.drive }).fetch;\n\n  return (\n    <div\n      key={`${driveGrant.drive.alias}-${driveGrant.drive.type}`}\n      className={`flex flex-row ${className}`}\n      title={permissionTree}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"contents\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"flex flex-col\">\n          <p className={`leading-none ${!permissionTree ? 'my-auto' : ''}`}>\n            {drive?.name}:{' '}\n            {getAccessFromPermissionNumber(driveGrant.permission, drivePermissionLevels).name}\n          </p>\n          {permissionTree && <small className=\"ml-1\">{permissionTree}</small>}\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default DrivePermissionView;\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport { CircleGrant } from '../../../provider/connections/CirlceDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Checkbox from '../../Form/Checkbox';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst CircleMembershipDialog = ({\n  title,\n  isOpen,\n\n  currentCircleGrants,\n  dotYouId,\n\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  isOpen: boolean;\n\n  currentCircleGrants: CircleGrant[];\n  dotYouId: string;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  const {\n    fetch: { data: circles },\n    provideGrant: { mutateAsync: provideGrant },\n    revokeGrant: { mutateAsync: revokeGrant },\n  } = useCircles();\n  const currentCircleGrantIds = currentCircleGrants.map((grant) => grant.circleId);\n\n  const [toRevokeGrants, setToRevokeGrants] = useState<string[]>([]);\n  const [toProvideGrants, setToProvideGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            await Promise.all(\n              toProvideGrants.map(async (circleToProvide) => {\n                return provideGrant({ circleId: circleToProvide, dotYouId: dotYouId });\n              })\n            );\n\n            await Promise.all(\n              toRevokeGrants.map(async (circleToRevoke) => {\n                return revokeGrant({ circleId: circleToRevoke, dotYouId: dotYouId });\n              })\n            );\n\n            onConfirm();\n          }}\n        >\n          {circles.length ? (\n            <>\n              <h2 className=\"mb-2 text-lg\">{t('Member of')}:</h2>\n\n              {circles.map((circle, index) => {\n                return (\n                  <div key={circle.id ?? index} className=\"mb-2\">\n                    <Checkbox\n                      value={circle.id}\n                      id={circle.id}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          // If grant wasn't there, add to provide\n                          if (!currentCircleGrantIds.some((grant) => grant === circle.id)) {\n                            setToProvideGrants([...toProvideGrants, circle.id]);\n                          }\n                          setToRevokeGrants(\n                            toRevokeGrants.filter((circleId) => circleId !== circle.id)\n                          );\n                        } else {\n                          // If grant was there, add to revoke\n                          if (currentCircleGrantIds.some((grant) => grant === circle.id)) {\n                            setToRevokeGrants([...toRevokeGrants, circle.id]);\n                          }\n                          setToProvideGrants(\n                            toProvideGrants.filter((circleId) => circleId !== circle.id)\n                          );\n                        }\n                      }}\n                      defaultChecked={currentCircleGrantIds.indexOf(circle.id) !== -1}\n                    />\n                    <label htmlFor={circle.id} className=\"ml-2\">\n                      {circle.name}\n                    </label>\n                  </div>\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-mx-2 py-3 sm:flex sm:flex-row-reverse\">\n            <ActionButton className=\"mx-2\" icon={'send'}>\n              {t('Save')}\n            </ActionButton>\n            <ActionButton className=\"mx-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default CircleMembershipDialog;\n","import { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport {\n  AccessGrant,\n  ConnectionInfo,\n  DriveGrant,\n} from '../../../provider/connections/CirlceDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport CircleMembershipDialog from '../../Dialog/CircleMembershipDialog/CircleMembershipDialog';\nimport Persons from '../../Icons/Persons/Persons';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport CircleMembershipView from '../../PermissionViews/CirclePermissionView/CirclePermissionView';\nimport DrivePermissionView from '../../PermissionViews/DrivePermissionView/DrivePermissionView';\nimport Section from '../../Sections/Section';\n\nconst ConnectionDetails = () => {\n  const { connectionKey } = useParams();\n  const navigate = useNavigate();\n  const {\n    fetch: { data: connectionInfo, isLoading: connectionInfoLoading },\n    disconnect: { mutate: disconnect, status: disconnectStatus },\n    acceptRequest: { mutate: acceptPending, status: acceptPendingStatus },\n    ignoreRequest: { mutate: ignoreRequest, status: ignoreRequestStatus },\n    revokeConnectionRequest: { mutate: revokeRequest, status: revokeRequestStatus },\n  } = useConnection({ dotYouId: connectionKey });\n\n  const [isEditPermissionActive, setIsEditPermissionActive] = useState(false);\n\n  if (connectionInfoLoading) {\n    <>Loading</>;\n  }\n\n  if (!connectionInfo) {\n    return <>No matching connection found</>;\n  }\n\n  const actions =\n    connectionInfo.status === 'Connected' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"my-auto ml-auto\"\n          onClick={() => {\n            setIsEditPermissionActive(true);\n          }}\n          state={disconnectStatus}\n        >\n          {t('Edit Circles')}\n        </ActionButton>\n        <ActionButton\n          type=\"remove\"\n          className=\"my-auto ml-2\"\n          onClick={() => {\n            disconnect({});\n          }}\n          icon={'trash'}\n          state={disconnectStatus}\n        >\n          {t('Remove')}\n        </ActionButton>\n      </>\n    ) : connectionInfo.status === 'Pending' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"my-auto ml-auto\"\n          onClick={() => {\n            acceptPending({ senderDotYouId: connectionInfo.senderDotYouId });\n          }}\n          state={acceptPendingStatus}\n        >\n          {t('Accept Request')}\n        </ActionButton>\n        <ActionButton\n          type=\"secondary\"\n          className=\"my-auto ml-2\"\n          onClick={() => {\n            ignoreRequest(\n              { senderDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={ignoreRequestStatus}\n        >\n          {t('Ignore')}\n        </ActionButton>\n      </>\n    ) : connectionInfo.status === 'Sent' ? (\n      <>\n        <ActionButton\n          type=\"secondary\"\n          className=\"my-auto ml-2\"\n          onClick={() => {\n            revokeRequest(\n              { targetDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={revokeRequestStatus}\n        >\n          {t('Revoke')}\n        </ActionButton>\n      </>\n    ) : (\n      <></>\n    );\n\n  const activeConnection = connectionInfo as ConnectionInfo;\n\n  return (\n    <>\n      <PageMeta\n        icon={Persons}\n        title={`${connectionKey} (${connectionInfo.status})`}\n        actions={actions}\n        breadCrumbs={[\n          { href: '/owner/connections', title: 'Connections' },\n          { title: connectionKey },\n        ]}\n      />\n      {connectionInfo.status === 'Connected' ? (\n        <>\n          <section>\n            <p className=\"text-sm\">\n              {t('Connected since')}: {new Date(activeConnection.created).toLocaleDateString()}\n            </p>\n            <ConnectionPermissionViewer accessGrant={activeConnection.accessGrant} />\n          </section>\n          <CircleMembershipDialog\n            title={`${t('Edit Circle Membership for')} ${connectionKey}`}\n            isOpen={isEditPermissionActive}\n            dotYouId={connectionKey}\n            currentCircleGrants={activeConnection.accessGrant.circleGrants}\n            onCancel={() => {\n              setIsEditPermissionActive(false);\n            }}\n            onConfirm={() => {\n              setIsEditPermissionActive(false);\n            }}\n          />\n        </>\n      ) : connectionInfo.status === 'Pending' || connectionInfo.status === 'Sent' ? (\n        <>\n          <p className=\"mb-3 text-sm\">{connectionInfo.message}</p>\n        </>\n      ) : null}\n    </>\n  );\n};\n\nconst ConnectionPermissionViewer = ({ accessGrant }: { accessGrant: AccessGrant }) => {\n  const { data: circles } = useCircles().fetch;\n  const grantedCircles = circles?.filter((circle) =>\n    accessGrant.circleGrants.some((circleGrant) => circleGrant.circleId === circle.id)\n  );\n\n  const allDriveGrantsWithPermissionTree = grantedCircles?.reduce((prevVal, currVal) => {\n    return [\n      ...prevVal,\n      ...currVal.drivesGrants.map((driveGrant) => {\n        return { driveGrant: driveGrant, permissionTree: `${t('Via:')} ${currVal.name}` };\n      }),\n    ];\n  }, [] as { driveGrant: DriveGrant; permissionTree: string }[]);\n  return (\n    <>\n      <Section title={t('Member of the following circles')} isOpaqueBg={true}>\n        {!accessGrant.isRevoked ? (\n          <>\n            {grantedCircles?.map((grantedCircle) => (\n              <CircleMembershipView circleDef={grantedCircle} key={grantedCircle.id} />\n            ))}\n          </>\n        ) : null}\n      </Section>\n\n      <Section title={t('Access on the following drives')} isOpaqueBg={true}>\n        {allDriveGrantsWithPermissionTree?.length ? (\n          <>\n            {allDriveGrantsWithPermissionTree.map((grantsWithCircle) => {\n              return (\n                <DrivePermissionView\n                  key={`${grantsWithCircle.driveGrant.drive.alias}-${grantsWithCircle.driveGrant.drive.type}`}\n                  driveGrant={grantsWithCircle.driveGrant}\n                  permissionTree={grantsWithCircle.permissionTree}\n                  className=\"mb-6\"\n                />\n              );\n            })}\n          </>\n        ) : null}\n      </Section>\n    </>\n  );\n};\n\nexport default ConnectionDetails;\n","export const rando = (arr: string[]) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\nexport const getRandomAbstract = () => {\n  const sentences = [\n    'Ut bibendum, neque ac lacinia aliquam, justo ipsum aliquam urna, id vestibulum augue mauris sit amet lacus.',\n    'Proin ante sapien, interdum sit amet eros sit amet, eleifend pharetra metus.',\n    'Sed elit mi, euismod eget neque at, suscipit aliquam nisi.',\n    'Nunc diam arcu, tincidunt quis dignissim ac, volutpat non odio.',\n  ];\n\n  return rando(sentences);\n};\n\nexport const getFunName = () => {\n  const adjectives = [\n    'adorable',\n    'beautiful',\n    'clean',\n    'drab',\n    'elegant',\n    'fancy',\n    'glamorous',\n    'handsome',\n    'long',\n    'magnificent',\n    'old-fashioned',\n    'plain',\n    'quaint',\n    'sparkling',\n    'ugliest',\n    'unsightly',\n    'angry',\n    'bewildered',\n    'clumsy',\n    'defeated',\n    'embarrassed',\n    'fierce',\n    'grumpy',\n    'helpless',\n    'itchy',\n    'jealous',\n    'lazy',\n    'mysterious',\n    'nervous',\n    'obnoxious',\n    'panicky',\n    'repulsive',\n    'scary',\n    'thoughtless',\n    'uptight',\n    'worried',\n  ];\n\n  const nouns = [\n    'women',\n    'men',\n    'children',\n    'teeth',\n    'feet',\n    'people',\n    'leaves',\n    'mice',\n    'geese',\n    'halves',\n    'knives',\n    'wives',\n    'lives',\n    'elves',\n    'loaves',\n    'potatoes',\n    'tomatoes',\n    'cacti',\n    'foci',\n    'fungi',\n    'nuclei',\n    'syllabuses',\n    'analyses',\n    'diagnoses',\n    'oases',\n    'theses',\n    'crises',\n    'phenomena',\n    'criteria',\n    'data',\n  ];\n\n  return `${rando(adjectives)} ${rando(adjectives)} ${rando(nouns)}`;\n};\n\nexport const base64ToArrayBuffer = (base64: string) => {\n  const binary_string = window.atob(base64);\n  const len = binary_string.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes.buffer;\n};\n\nexport const arrayBufferToBase64 = (buffer: Iterable<number>) => {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n};\n\nexport const getAccessFromPermissionNumber = (\n  value: number,\n  permissionLevels: { name: string; value: number }[]\n) => {\n  return permissionLevels.reduce((prevValue, currValue) => {\n    if (currValue.value > prevValue.value && currValue.value <= value) {\n      return currValue;\n    }\n\n    return prevValue;\n  }, permissionLevels[0]);\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useConnection = ({ dotYouId }: { dotYouId?: string }) => {\n  const queryClient = useQueryClient();\n\n  const { getSharedSecret } = useAuth();\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n\n  const fetchSingle = async ({ dotYouId }: { dotYouId: string }) => {\n    if (!dotYouId) {\n      return;\n    }\n\n    const connectionInfo = await circleNetworkProvider.getConnectionInfo(dotYouId);\n    if (connectionInfo && connectionInfo.status !== 'None') {\n      return connectionInfo;\n    }\n\n    const pendingRequest = await circleNetworkRequestProvider.getPendingRequest(dotYouId);\n    if (pendingRequest) {\n      return pendingRequest;\n    }\n\n    const sentRequest = await circleNetworkRequestProvider.getSentRequest(dotYouId);\n    return sentRequest ?? connectionInfo;\n  };\n\n  const disconnect = async ({ connectionDotYouId }: { connectionDotYouId?: string }) => {\n    return await circleNetworkProvider.disconnectFromContact(connectionDotYouId ?? dotYouId);\n  };\n\n  const sendConnectionRequest = async ({\n    targetDotYouId,\n    message,\n    name,\n    circleIds,\n  }: {\n    targetDotYouId: string;\n    message: string;\n    name: string;\n    circleIds: string[];\n  }) => {\n    return await circleNetworkRequestProvider.sendRequest(targetDotYouId, message, name, circleIds);\n  };\n\n  const revokeConnectionRequest = async ({ targetDotYouId }: { targetDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deleteSentRequest(targetDotYouId);\n  };\n\n  const acceptRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.acceptConnectionRequest(senderDotYouId);\n  };\n\n  const ignoreRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deletePendingRequest(senderDotYouId);\n  };\n\n  return {\n    fetch: useQuery(['connectionInfo', dotYouId], () => fetchSingle({ dotYouId }), {\n      refetchOnMount: true,\n      refetchOnWindowFocus: false,\n    }),\n\n    disconnect: useMutation(disconnect, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    sendConnectionRequest: useMutation(sendConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    revokeConnectionRequest: useMutation(revokeConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    acceptRequest: useMutation(acceptRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    ignoreRequest: useMutation(ignoreRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useConnection;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, CoreClient, TargetDrive } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useDrive = ({ targetDrive }: { targetDrive: TargetDrive }) => {\n  const { getSharedSecret } = useAuth();\n  const client = new CoreClient({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetch = async (targetDrive: TargetDrive) => {\n    const allDrives = await (\n      await client.driveProvider.GetDrives({ pageNumber: 1, pageSize: 100 })\n    ).results;\n\n    return allDrives.find(\n      (drive) =>\n        drive.targetDriveInfo.alias === targetDrive.alias &&\n        drive.targetDriveInfo.type === targetDrive.type\n    );\n  };\n\n  return {\n    fetch: useQuery(\n      ['drive', `${targetDrive.alias}_${targetDrive.type}`],\n      () => fetch(targetDrive),\n      {\n        refetchOnMount: false,\n        refetchOnWindowFocus: false,\n      }\n    ),\n  };\n};\n\nexport default useDrive;\n","import { t } from '../../helpers/i18n/dictionary';\n\nexport const drivePermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Reader'), value: 1 },\n  { name: t('Editor'), value: 3 },\n];\n\nexport const circlePermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Read Connections'), value: 10 },\n  { name: t('Read Connection Requests'), value: 30 },\n  { name: t('Read Circle Members'), value: 50 },\n];\n"],"names":["circleDef","permissionLevel","className","to","id","name","driveGrant","permissionTree","drive","useDrive","targetDrive","fetch","data","title","targetDriveInfo","alias","type","getAccessFromPermissionNumber","permission","drivePermissionLevels","isOpen","currentCircleGrants","dotYouId","onConfirm","onCancel","target","usePortal","useCircles","circles","provideGrant","mutateAsync","revokeGrant","currentCircleGrantIds","map","grant","circleId","useState","toRevokeGrants","setToRevokeGrants","toProvideGrants","setToProvideGrants","dialog","DialogWrapper","onClose","onSubmit","e","preventDefault","Promise","all","circleToProvide","circleToRevoke","length","t","circle","index","Checkbox","value","onChange","checked","some","filter","defaultChecked","indexOf","htmlFor","ActionButton","icon","onClick","createPortal","ConnectionPermissionViewer","accessGrant","grantedCircles","circleGrants","circleGrant","allDriveGrantsWithPermissionTree","reduce","prevVal","currVal","drivesGrants","Section","isOpaqueBg","isRevoked","grantedCircle","grantsWithCircle","DrivePermissionView","connectionKey","useParams","navigate","useNavigate","useConnection","connectionInfo","connectionInfoLoading","isLoading","disconnect","mutate","disconnectStatus","status","acceptRequest","acceptPending","acceptPendingStatus","ignoreRequest","ignoreRequestStatus","revokeConnectionRequest","revokeRequest","revokeRequestStatus","isEditPermissionActive","setIsEditPermissionActive","actions","state","senderDotYouId","onSuccess","targetDotYouId","activeConnection","PageMeta","Persons","breadCrumbs","href","Date","created","toLocaleDateString","message","rando","arr","Math","floor","random","getRandomAbstract","getFunName","adjectives","base64ToArrayBuffer","base64","binary_string","window","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","permissionLevels","prevValue","currValue","queryClient","useQueryClient","getSharedSecret","useAuth","circleNetworkProvider","CircleNetworkProvider","circleNetworkRequestProvider","CircleNetworkRequestProvider","fetchSingle","getConnectionInfo","getPendingRequest","pendingRequest","getSentRequest","sentRequest","connectionDotYouId","disconnectFromContact","sendConnectionRequest","circleIds","sendRequest","deleteSentRequest","acceptConnectionRequest","deletePendingRequest","useQuery","refetchOnMount","refetchOnWindowFocus","useMutation","param","invalidateQueries","onError","ex","console","error","client","CoreClient","api","ApiType","sharedSecret","driveProvider","GetDrives","pageNumber","pageSize","results","allDrives","find","circlePermissionLevels"],"sourceRoot":""}