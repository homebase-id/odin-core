{"version":3,"file":"static/js/229.bd06c5e5.chunk.js","mappings":"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","sources":["components/Templates/RegisterAppClient/RegisterAppClient.tsx","provider/app/AppManagementProvider.ts","provider/app/AppManagementProviderTypes.ts"],"sourcesContent":["import useAuth from '../../../hooks/auth/useAuth';\nimport {\n  AppClientRegistrationRequest,\n  AppRegistrationRequest,\n  RedactedAppRegistration,\n  DriveGrantRequest,\n  DrivePermission,\n  PermissionFlags,\n  PermissionSet,\n} from '../../../provider/app/AppManagementProviderTypes';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport AppManagementProvider from '../../../provider/app/AppManagementProvider';\n\n// https://frodo.digital/owner/appreg?an=Chatr&appId=0babb1e6-7604-4bcd-b1fb-87e959226492&fn=todds%20android&return=odin-chat://&pk=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtP9KKODoOZpNGXQy4IdyyBJJO3HJPkbg%2FLXwR5SQGxWWuLpv2THnZoSHqaDl6YWQ3OWCndY22Q0RJZkDBuqqJyn%2B8ErpMdgtJuMhFOpEU2h9nLGeI7BIWENkuqlqBh56YC8qdfYhfpdcv53p106o%2Bi93%2Bzeb0GvfLN6fk1y8o4Rd56DBHXn9zjjDaLWa8m8EDXgZKs7waziPFArIphh0W06Wnb4wCa%2F%2B1HEULhH%2BsIY7bGpoQvgP7xucHZGrqkRmg5X2XhleBIXWYCD7QUM6PvKHdqUSrFkl9Z2UU1SkVAhUUH4UxfwyLQKHXxC7IhKu2VSOXK4%2FkjGua6iW%2BXUQtwIDAQAB\n\n// https://frodo.digital/owner/appreg?n=Chatr&appId=a17d3338-afee-4529-aa7f-d8442bc11f25&fn=todds%20android&rs=odin-chat\nconst RegisterAppClient = () => {\n  const { getSharedSecret } = useAuth();\n  const [searchParams] = useSearchParams();\n  const [isLoaded, setIsLoaded] = useState<boolean>();\n  const [finalUrl, setFinalUrl] = useState<string | null>();\n  const [appRegistrationRequest, setAppRegistrationRequest] =\n    useState<AppRegistrationRequest | null>(null);\n  const [clientRegistrationRequest, setClientRegistrationRequest] =\n    useState<AppClientRegistrationRequest | null>(null);\n  const [appRegistration, setAppRegistration] = useState<RedactedAppRegistration | null>(null);\n  const [returnUrl, setReturnUrl] = useState<string>();\n\n  const tempProvider = AppManagementProvider.getInstance(getSharedSecret());\n\n  const chatDrive: DriveGrantRequest = {\n    drive: {\n      alias: 'faaaaaaa-2d68-4dd2-8196-669c21e927ea',\n      type: 'fabbbbbb-2d68-4dd2-8196-669c21e927ea',\n    },\n    permission: DrivePermission.Read | DrivePermission.Write,\n  };\n\n  const chatPermissionSet: PermissionSet = {\n    permissions: PermissionFlags.ReadConnectionRequests | PermissionFlags.ReadConnections,\n  };\n\n  useEffect(() => {\n    const init = async () => {\n      const appRegRequest: AppRegistrationRequest = {\n        appId: searchParams.get('appId'),\n        name: searchParams.get('n'),\n        permissionSet: chatPermissionSet, //TODO - read from parameter\n        drives: [chatDrive], //TODO - this should be parameter a list of drives for which this app requests access (along with permissions)\n      };\n\n      const clientRegRequest: AppClientRegistrationRequest = {\n        appId: appRegRequest.appId,\n        clientPublicKey64: searchParams.get('pk'),\n        clientFriendlyName: searchParams.get('fn'),\n      };\n\n      const appReg = await tempProvider.GetAppRegistration({\n        appId: appRegRequest.appId,\n      });\n\n      setAppRegistration(appReg);\n\n      setAppRegistrationRequest(appRegRequest);\n      setClientRegistrationRequest(clientRegRequest);\n\n      setReturnUrl(searchParams.get('return'));\n      setIsLoaded(true);\n    };\n\n    init();\n  }, [searchParams]);\n\n  const registerApp = async () => {\n    await tempProvider.RegisterApp(appRegistrationRequest);\n    await registerClient();\n  };\n\n  const registerClient = async () => {\n    const clientRegistrationResponse = await tempProvider.RegisterAppClient(\n      clientRegistrationRequest\n    );\n    const encodedData = encodeURI(clientRegistrationResponse.data);\n    const url = `${returnUrl}d=${encodedData}&v=${clientRegistrationResponse.encryptionVersion}`;\n    console.log(url);\n    setFinalUrl(url);\n\n    // navigate(url);\n  };\n\n  /*\n   * incoming parameters:\n   *   values on AppClientRegistrationRequest\n   *\n   *   Required Drive Creation Specs\n   *     Alias\n   *     Type\n   *     Name\n   *\n   *   Required Permissions\n   *     i.e. can create circles, etc.\n   */\n\n  /*\n   * screen shows app reg details\n   *   if registered, allow to register the client\n   *   if not registered, give option to register app\n   *\n   *   selection of permissions and drives\n   *\n   *\n   * Save Registration Process\n   * 1. Save registration for appid + device friendly name\n   *  + Create drives that are needed (and approved)\n   * 2. After registration is complete:\n   *   - RSA encrypt CAT using public key\n   * 3. 302 redirect to return url + RSA_encrypte\n   */\n\n  if (!isLoaded) {\n    return <div>Loading...</div>;\n  }\n\n  if (finalUrl) {\n    return (\n      <div className=\"container mx-auto\">\n        browser will be redirected to <br />\n        <span>{finalUrl}</span>\n      </div>\n    );\n  }\n\n  return (\n    <section className=\"mt-20\">\n      <div className=\"container mx-auto\">\n        <div className=\"-m-5 flex flex-wrap\">\n          {isLoaded && appRegistration == null && (\n            <>\n              <div className=\"px-5\">\n                App with id {appRegistrationRequest.appId} is not registered.\n                <br />\n                Clicking OK will approve the app for use and register this client\n              </div>\n              <div className=\"px-5\">\n                <a\n                  onClick={registerApp}\n                  className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\"\n                >\n                  Register Now\n                </a>\n              </div>\n            </>\n          )}\n\n          {isLoaded && appRegistration != null && (\n            <>\n              <div className=\"px-5\">\n                App with id {appRegistration?.appId} is registered at {appRegistration?.created}\n              </div>\n              <div className=\"px-5\">\n                <a\n                  onClick={registerClient}\n                  className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\"\n                >\n                  Register this Client\n                </a>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default RegisterAppClient;\n","import {\n  AppClientRegistrationRequest,\n  AppClientRegistrationResponse,\n  AppRegistrationRequest,\n  RedactedAppRegistration,\n  GetAppRequest,\n} from './AppManagementProviderTypes';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\nexport default class AppManagementProvider extends OwnerProviderBase {\n  private static instance: AppManagementProvider;\n  constructor(sharedSecret: Uint8Array | undefined) {\n    super(sharedSecret);\n  }\n\n  //adds the specified client to the list of allowed clients for a given app; returns a CAT\n  async RegisterAppClient(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/client',\n      request\n    );\n    return response.data;\n  }\n\n  async RegisterChatAppClient_temp(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/chatclient_temp',\n      request\n    );\n    console.log('RegisterChatAppClient_temp returning response');\n    console.log(response);\n\n    return response.data;\n  }\n\n  async RegisterApp(request: AppRegistrationRequest): Promise<RedactedAppRegistration> {\n    const client = this.createAxiosClient();\n    const response = await client.post<RedactedAppRegistration>(\n      'appmanagement/register/app',\n      request\n    );\n\n    console.log('RegisterApp returning response');\n    console.log(response);\n\n    return response.data;\n  }\n\n  async GetAppRegistration(request: GetAppRequest): Promise<RedactedAppRegistration> {\n    const client = this.createAxiosClient();\n    const response = await client.post<RedactedAppRegistration>('appmanagement/app', request);\n    return response.data;\n  }\n\n  async GetAppRegistrations(): Promise<RedactedAppRegistration[]> {\n    const client = this.createAxiosClient();\n    const response = await client.get<RedactedAppRegistration[]>('appmanagement/list');\n    return response.data;\n  }\n\n  public static getInstance(sharedSecret): AppManagementProvider {\n    if (!AppManagementProvider.instance) {\n      AppManagementProvider.instance = new AppManagementProvider(sharedSecret);\n    }\n\n    return AppManagementProvider.instance;\n  }\n}\n","import { DriveGrant } from '../connections/CirlceDataTypes';\n\nexport interface AppClientRegistrationRequest {\n  appId: string;\n  clientFriendlyName: string;\n  clientPublicKey64: string;\n}\n\nexport interface AppClientRegistrationResponse {\n  /** Version number for how the data field is encrypted */\n  encryptionVersion: number;\n\n  /** RSA encrypted response.  When encryption version == 1, the  first 16 bytes is token id, second 16 bytes is AccessTokenHalfKey, and last 16 bytes is SharedSecret */\n  data: string;\n\n  /** A Guid representing the Id of the access registration */\n  token: string;\n}\n\nexport interface GetAppRequest {\n  /** @format uuid */\n  appId: string;\n}\n\nexport interface AppRegistrationRequest {\n  /** @format uuid */\n  appId: string;\n  name: string | null;\n  permissionSet?: PermissionSet;\n\n  /** The list of drives of which this app should receive access */\n  drives?: DriveGrantRequest[] | null;\n}\n\nexport interface DriveGrantRequest {\n  drive: TargetDrive;\n  permission: DrivePermission;\n}\n\nexport interface TargetDrive {\n  alias: string;\n  type: string;\n}\n\nexport interface RedactedAppRegistration {\n  appId: string;\n  name: string;\n  created: number;\n  isRevoked: boolean;\n  grant: RedactedExchangeGrant;\n}\n\nexport interface RedactedExchangeGrant {\n  isRevoked: boolean;\n  permissionSet: PermissionSet;\n  driveGrants: DriveGrant[];\n}\n\n// export interface RedactedDriveGrant {\n//   TargetDrive: TargetDrive;\n//   Permission: DrivePermission;\n// }\n\nexport enum DrivePermission {\n  None = 0,\n  Read = 1 << 0,\n  Write = 1 << 2,\n}\n\nexport interface PermissionSet {\n  permissions: PermissionFlags;\n}\n\nexport enum PermissionFlags {\n  None = 0,\n\n  ApproveConnection = 1 << 0,\n\n  ReadConnections = 1 << 1,\n\n  UpdateConnections = 1 << 2,\n\n  DeleteConnections = 1 << 3,\n\n  CreateOrSendConnectionRequests = 1 << 4,\n\n  ReadConnectionRequests = 1 << 5,\n\n  DeleteConnectionRequests = 1 << 6,\n}\n"],"names":["getSharedSecret","useAuth","useSearchParams","searchParams","useState","isLoaded","setIsLoaded","finalUrl","setFinalUrl","appRegistrationRequest","setAppRegistrationRequest","clientRegistrationRequest","setClientRegistrationRequest","appRegistration","setAppRegistration","returnUrl","setReturnUrl","tempProvider","AppManagementProvider","chatDrive","drive","alias","type","permission","DrivePermission","chatPermissionSet","permissions","PermissionFlags","useEffect","init","appRegRequest","appId","get","name","permissionSet","drives","clientRegRequest","clientPublicKey64","clientFriendlyName","GetAppRegistration","appReg","registerApp","RegisterApp","registerClient","RegisterAppClient","clientRegistrationResponse","encodedData","encodeURI","data","url","encryptionVersion","console","log","className","onClick","created","sharedSecret","request","client","this","createAxiosClient","post","response","instance","OwnerProviderBase"],"sourceRoot":""}