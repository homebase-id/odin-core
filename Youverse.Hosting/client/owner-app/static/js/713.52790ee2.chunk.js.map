{"version":3,"file":"static/js/713.52790ee2.chunk.js","mappings":"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","sources":["components/FallbackImg/FallbackImg.tsx","helpers/common.ts","hooks/contact/useContact.ts","hooks/media/useImage.ts","provider/connections/CircleNetworkProvider.ts","provider/connections/CircleNetworkRequestProvider.ts"],"sourcesContent":["const FallbackImg = ({ initials, className }: { initials: string; className?: string }) => {\n  return (\n    <div\n      className={`flex min-h-full min-w-full bg-slate-200 text-4xl font-light text-white dark:bg-slate-700 dark:text-black sm:text-6xl ${\n        className ?? ''\n      }`}\n    >\n      <span className=\"m-auto uppercase\">{initials}</span>\n    </div>\n  );\n};\n\nexport default FallbackImg;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, DataUtil, PublicClient } from '@youfoundation/transit-lib';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport { ContactProvider } from '../../provider/contact/ContactProvider';\nimport { ContactFile, RawContact } from '../../provider/contact/ContactTypes';\nimport useAuth from '../auth/useAuth';\n\nconst useContact = ({ dotYouId, id }: { dotYouId?: string; id?: string }) => {\n  const { getSharedSecret } = useAuth();\n  const contactProvider = ContactProvider.getInstance(getSharedSecret());\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n\n  const queryClient = useQueryClient();\n\n  const fetchSingle = async ({\n    dotYouId,\n    id,\n  }: {\n    dotYouId: string;\n    id: string;\n  }): Promise<RawContact | ContactFile | undefined> => {\n    if (!dotYouId) {\n      if (!id) {\n        return;\n      }\n\n      //Direct fetch with id:\n      const directContact = await contactProvider.getContactByTag(id);\n      return directContact && parseContact(directContact);\n    }\n\n    const contactBookContact = await contactProvider.getContactByTag(dotYouId);\n    if (contactBookContact && contactBookContact.source !== 'public') {\n      return parseContact(contactBookContact);\n    }\n\n    // If no contact in the contact book:\n    // Get contact data from connection single:\n    const connectionInfo = await fetchConnectionInfo(dotYouId);\n    if (connectionInfo) {\n      // => And automatically push into the Contact\n      const connectionContact = await contactProvider.saveContact({\n        ...connectionInfo,\n        dotYouId: dotYouId,\n      });\n\n      return parseContact(connectionContact);\n    }\n\n    console.log(\n      `Contact book and connection detail is empty for ${dotYouId}, gone hunting for best fallback`\n    );\n\n    let returnContact;\n\n    // Else fallback to:\n    // Get contact data from pending single:\n    if (!returnContact) {\n      const pendingInfo = (await fetchPendingInfo(dotYouId)) ?? undefined;\n      returnContact = pendingInfo ? { ...contactBookContact, ...pendingInfo } : returnContact;\n    }\n\n    // Get contact data from public.json\n    if (!returnContact) {\n      const publicContact = await fetchDataFromPublic(dotYouId);\n      returnContact = publicContact ? { ...contactBookContact, ...publicContact } : returnContact;\n    }\n\n    if (returnContact) {\n      return parseContact(returnContact);\n    }\n\n    return undefined;\n  };\n\n  const fetchConnectionInfo = async (dotYouId: string): Promise<RawContact | undefined> => {\n    const connectionContactData = await circleNetworkProvider.getConnectionInfo(dotYouId, true);\n    if (connectionContactData?.originalContactData) {\n      return {\n        name: {\n          givenName: connectionContactData.originalContactData.givenName,\n          surname: connectionContactData.originalContactData.surname,\n        },\n        image: connectionContactData.originalContactData.image,\n        source: 'contact',\n      };\n    }\n  };\n\n  const fetchPendingInfo = async (dotYouId: string): Promise<RawContact | undefined> => {\n    try {\n      const pendingContactData = await circleNetworkRequestProvider.getPendingRequest(\n        dotYouId,\n        true\n      );\n      // TODO: Don't think this check should be needed; Pending request is also returning sent ones\n      if (pendingContactData.senderDotYouId === dotYouId) {\n        if (pendingContactData?.contactData) {\n          return {\n            name: {\n              givenName: pendingContactData.contactData.givenName,\n              surname: pendingContactData.contactData.surname,\n            },\n            image: pendingContactData.contactData.image,\n            source: 'pending',\n          };\n        }\n      }\n    } catch (ex) {\n      return;\n    }\n  };\n\n  const fetchDataFromPublic = async (dotYouId: string): Promise<RawContact | undefined> => {\n    const client = new PublicClient({ api: ApiType.YouAuth, root: dotYouId });\n    const rawData = await client.fileReadOnlyProvider.GetFile('public.json');\n\n    const nameAttr = rawData?.get('name')?.[0];\n    const photoRefAttr = rawData?.get('photo')?.[0];\n    const photoAttr = rawData?.get(photoRefAttr?.payload?.data?.profileImageId)?.[0] ?? undefined;\n\n    if (!photoAttr) {\n      return {\n        name:\n          nameAttr?.payload?.data.givenName || nameAttr?.payload?.data.surname\n            ? {\n                givenName: nameAttr.payload.data.givenName,\n                surname: nameAttr.payload.data.surname,\n              }\n            : undefined,\n        image: undefined,\n        source: 'public',\n      };\n    }\n\n    const previewThumbnail = photoAttr.additionalThumbnails.reduce(\n      (prevVal, curValue) => {\n        if (prevVal.pixelWidth < curValue.pixelWidth && curValue.pixelWidth <= 250) {\n          return curValue;\n        }\n        return prevVal;\n      },\n      { ...photoAttr.header.fileMetadata.appData.previewThumbnail, pixelWidth: 20, pixelHeight: 20 }\n    );\n\n    return {\n      name:\n        nameAttr.payload.data.givenName || nameAttr.payload.data.surname\n          ? {\n              givenName: nameAttr.payload.data.givenName,\n              surname: nameAttr.payload.data.surname,\n            }\n          : undefined,\n      image: {\n        pixelWidth: previewThumbnail.pixelWidth,\n        pixelHeight: previewThumbnail.pixelHeight,\n        contentType: previewThumbnail.contentType,\n        content: previewThumbnail.content.toString(),\n      },\n      source: 'public',\n    };\n  };\n\n  const refresh = async ({ contact }: { contact: ContactFile }) => {\n    if (!contact.id || !contact.dotYouId) {\n      console.warn('Missing data to fetch new contact data reliable');\n      return;\n    }\n\n    let newContact: ContactFile;\n\n    const connectionInfo = (await fetchConnectionInfo(contact.dotYouId)) ?? undefined;\n    newContact = connectionInfo ? { ...contact, ...connectionInfo } : undefined;\n\n    if (newContact) {\n      newContact = await contactProvider.saveContact({\n        ...newContact,\n        dotYouId: contact.dotYouId,\n      });\n\n      return;\n    }\n  };\n\n  return {\n    fetch: useQuery(\n      ['contact', dotYouId ?? id],\n      () => fetchSingle({ dotYouId: dotYouId, id: id }),\n      {\n        refetchOnWindowFocus: false,\n        onError: (err) => console.error(err),\n        retry: false,\n      }\n    ),\n    refresh: useMutation(refresh, {\n      onMutate: async (newContact) => {\n        await queryClient.cancelQueries(['contact', dotYouId ?? id]);\n\n        // Update single attribute\n        const previousContact = queryClient.getQueryData(['contact', dotYouId ?? id]);\n        // TODO: fix, can't be set as the incoming new isn't the refresh data\n        queryClient.setQueryData(['contact', dotYouId ?? id], newContact);\n\n        return { previousContact, newContact };\n      },\n      onError: (err, _newAttr, context) => {\n        console.error(err);\n\n        // Revert local caches to what they were\n        queryClient.setQueryData(['contact', dotYouId ?? id], context.previousContact);\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['contact', dotYouId ?? id]);\n      },\n    }),\n  };\n};\n\nexport const parseContact = (contact: RawContact): RawContact => {\n  if (!contact.image) {\n    return { ...contact, image: undefined };\n  }\n  const buffer = DataUtil.base64ToUint8Array(contact.image.content);\n  const url = window.URL.createObjectURL(new Blob([buffer]));\n\n  return {\n    ...contact,\n    image: {\n      ...contact.image,\n      url: url,\n    },\n  };\n};\n\nexport default useContact;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  AccessControlList,\n  ApiType,\n  BlogConfig,\n  Client,\n  HomePageConfig,\n  SecurityGroupType,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useImage = (imageFileId?: string, imageDrive?: TargetDrive) => {\n  const { getSharedSecret } = useAuth();\n  const queryClient = useQueryClient();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchImageData = async (imageFileId?: string, imageDrive?: TargetDrive) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    return await client.mediaProvider.getDecryptedImageUrl(imageDrive ?? defaultDrive, imageFileId);\n  };\n\n  const saveImage = async ({\n    bytes,\n    targetDrive = defaultDrive,\n    acl = { requiredSecurityGroup: SecurityGroupType.Anonymous },\n    fileId = undefined,\n  }: {\n    bytes: Uint8Array;\n    targetDrive: TargetDrive;\n    acl?: AccessControlList;\n    fileId?: string;\n  }) => {\n    return await client.mediaProvider.uploadImage(targetDrive, undefined, acl, bytes, fileId);\n  };\n\n  const removeImage = async ({\n    targetDrive = defaultDrive,\n    fileId,\n  }: {\n    targetDrive: TargetDrive;\n    fileId: string;\n  }) => {\n    return await client.mediaProvider.removeImage(fileId, targetDrive);\n  };\n\n  return {\n    fetch: useQuery(\n      ['image', imageFileId, imageDrive],\n      () => fetchImageData(imageFileId, imageDrive),\n      {\n        refetchOnMount: false,\n        refetchOnWindowFocus: false,\n        staleTime: Infinity,\n      }\n    ),\n    save: useMutation(saveImage, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.fileId) {\n          queryClient.removeQueries([\n            'image',\n            variables.fileId,\n            variables.targetDrive ?? defaultDrive,\n          ]);\n        } else {\n          queryClient.removeQueries(['image']);\n        }\n      },\n    }),\n    remove: useMutation(removeImage, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.fileId) {\n          queryClient.removeQueries([\n            'image',\n            variables.fileId,\n            variables.targetDrive ?? defaultDrive,\n          ]);\n        } else {\n          queryClient.removeQueries(['image']);\n        }\n      },\n    }),\n  };\n};\n\nexport default useImage;\n","import { ConnectionInfo, DotYouIdRequest, DotYouProfile } from './CircleDataTypes';\nimport { PagedResult, PagingOptions } from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport { stringify } from '../../helpers/common';\n\n//Handles management of established connections\nexport class CircleNetworkProvider extends OwnerProviderBase {\n  private static instance: CircleNetworkProvider;\n  private root = '/circles/connections';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async blockDotYouId(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/block';\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async disconnectFromContact(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/disconnect';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getConnections(data: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/connected?' + stringify(data);\n    return client.post<PagedResult<DotYouProfile>>(url, data).then((response) => {\n      return response.data;\n    });\n  }\n\n  async getBlockedConnections(params: PagingOptions): Promise<PagedResult<DotYouProfile>> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/blocked?' + stringify(params);\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  getConnectionInfo(dotYouId: string, includeContactData = false): Promise<ConnectionInfo> {\n    const client = super.createAxiosClient();\n    const url = this.root + `/status?omitContactData=${!includeContactData}`;\n\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: response.data?.status?.toLowerCase() };\n      })\n      .catch(super.handleErrorResponse);\n  }\n  public static getInstance(sharedSecret): CircleNetworkProvider {\n    if (!CircleNetworkProvider.instance) {\n      CircleNetworkProvider.instance = new CircleNetworkProvider(sharedSecret);\n    }\n\n    return CircleNetworkProvider.instance;\n  }\n}\n","import {\n  AcceptRequestHeader,\n  ConnectionRequest,\n  ConnectionRequestHeader,\n  DotYouIdRequest,\n} from './CircleDataTypes';\nimport {\n  ApiType,\n  BuiltInProfiles,\n  CoreClient,\n  DataUtil,\n  getTargetDriveFromProfileId,\n  PagedResult,\n  PagingOptions,\n} from '@youfoundation/transit-lib';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport { stringify } from '../../helpers/common';\n\n//Handles making and reading requests to connect with others\nexport class CircleNetworkRequestProvider extends OwnerProviderBase {\n  private static instance: CircleNetworkRequestProvider;\n\n  private Root = '/circles/requests';\n  private SentPathRoot: string = this.Root + '/sent';\n  private PendingPathRoot: string = this.Root + '/pending';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async getPendingRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get<PagedResult<ConnectionRequest>>(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(() => {\n        super.handleErrorResponse;\n        return undefined;\n      });\n  }\n\n  async getPendingRequest(\n    dotYouId: string,\n    includeContactData = false\n  ): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    console.log('TODO: add support for omitContactData param: Server Side');\n    // const url = this.PendingPathRoot + `/single?omitContactData=${!includeContactData}`;\n    const url = this.PendingPathRoot + '/single';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: 'pending' };\n      })\n      .catch(() => {\n        return undefined;\n      });\n  }\n\n  async getSentRequests(params: PagingOptions): Promise<PagedResult<ConnectionRequest>> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/list?' + stringify(params);\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getSentRequest(dotYouId: string): Promise<ConnectionRequest> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/single';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return { ...response.data, status: 'sent' };\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          return null;\n        }\n        super.handleErrorResponse(err);\n      });\n  }\n\n  async acceptConnectionRequest(\n    dotYouId: string,\n    name: { givenName: string; surname: string },\n    photoFileId?: string | undefined,\n    circleIds?: string[]\n  ): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/accept/';\n\n    const header: AcceptRequestHeader = {\n      sender: dotYouId,\n      circleIds: circleIds,\n      permissions: null,\n      contactData: { ...name },\n    };\n\n    if (photoFileId) {\n      const coreClient = new CoreClient({\n        api: ApiType.Owner,\n        sharedSecret: this.getSharedSecret(),\n      });\n\n      const photoData = await coreClient.mediaProvider.getDecryptedImageData(\n        getTargetDriveFromProfileId(BuiltInProfiles.StandardProfileId.toString()),\n        photoFileId\n      );\n\n      if (photoData) {\n        header.contactData.image = {\n          ...photoData,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          content: DataUtil.uint8ArrayToBase64(new Uint8Array(photoData.content)) as any,\n        };\n      }\n    }\n\n    return client\n      .post(url, header)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deletePendingRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.PendingPathRoot + '/delete';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async deleteSentRequest(dotYouId: string): Promise<boolean> {\n    const client = super.createAxiosClient();\n    const url = this.SentPathRoot + '/delete';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async sendRequest(\n    dotYouId: string,\n    message: string,\n    name: { givenName: string; surname: string },\n    photoFileId: string | undefined,\n    circleIds: string[]\n  ): Promise<boolean> {\n    const url = this.Root + '/sendrequest';\n    const data: ConnectionRequestHeader = {\n      recipient: dotYouId,\n      message: message,\n      contactData: { ...name },\n      circleIds: circleIds,\n    };\n\n    if (photoFileId) {\n      const coreClient = new CoreClient({\n        api: ApiType.Owner,\n        sharedSecret: this.getSharedSecret(),\n      });\n\n      const photoData = await coreClient.mediaProvider.getDecryptedImageData(\n        getTargetDriveFromProfileId(BuiltInProfiles.StandardProfileId.toString()),\n        photoFileId\n      );\n\n      if (photoData) {\n        data.contactData.image = {\n          ...photoData,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          content: DataUtil.uint8ArrayToBase64(new Uint8Array(photoData.content)) as any,\n        };\n      }\n    }\n\n    const client = super.createAxiosClient();\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async blockDotYouId(dotYouId: string) {\n    const client = super.createAxiosClient();\n    const url = '/circles/connections/block';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post<boolean>(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((err) => {\n        super.handleErrorResponse(err);\n        return false;\n      });\n  }\n\n  async unblockDotYouId(dotYouId: string) {\n    const client = super.createAxiosClient();\n    const url = '/circles/connections/unblock';\n    const data: DotYouIdRequest = { dotYouId: dotYouId };\n\n    return client\n      .post<boolean>(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((err) => {\n        super.handleErrorResponse(err);\n        return false;\n      });\n  }\n\n  public static getInstance(sharedSecret): CircleNetworkRequestProvider {\n    if (!CircleNetworkRequestProvider.instance) {\n      CircleNetworkRequestProvider.instance = new CircleNetworkRequestProvider(sharedSecret);\n    }\n\n    return CircleNetworkRequestProvider.instance;\n  }\n}\n"],"names":["initials","className","convertTextToSlug","text","split","join","toLowerCase","stringify","obj","Object","keys","map","key","parseContact","contact","image","undefined","buffer","DataUtil","content","url","window","URL","createObjectURL","Blob","dotYouId","id","getSharedSecret","useAuth","contactProvider","ContactProvider","circleNetworkProvider","CircleNetworkProvider","circleNetworkRequestProvider","CircleNetworkRequestProvider","queryClient","useQueryClient","fetchSingle","getContactByTag","directContact","contactBookContact","source","fetchConnectionInfo","connectionInfo","saveContact","connectionContact","console","log","returnContact","fetchPendingInfo","pendingInfo","fetchDataFromPublic","publicContact","getConnectionInfo","connectionContactData","originalContactData","name","givenName","surname","getPendingRequest","pendingContactData","senderDotYouId","contactData","client","PublicClient","api","ApiType","root","fileReadOnlyProvider","GetFile","rawData","nameAttr","get","photoRefAttr","photoAttr","payload","data","profileImageId","previewThumbnail","additionalThumbnails","reduce","prevVal","curValue","pixelWidth","header","fileMetadata","appData","pixelHeight","contentType","toString","refresh","warn","newContact","fetch","useQuery","refetchOnWindowFocus","onError","err","error","retry","useMutation","onMutate","cancelQueries","previousContact","getQueryData","setQueryData","_newAttr","context","onSettled","invalidateQueries","defaultDrive","alias","HomePageConfig","type","BlogConfig","imageFileId","imageDrive","Client","sharedSecret","fetchImageData","mediaProvider","getDecryptedImageUrl","saveImage","bytes","targetDrive","acl","requiredSecurityGroup","SecurityGroupType","fileId","uploadImage","removeImage","refetchOnMount","staleTime","Infinity","save","onSuccess","_data","variables","removeQueries","remove","this","post","then","response","catch","params","includeContactData","status","instance","OwnerProviderBase","Root","SentPathRoot","PendingPathRoot","photoFileId","circleIds","sender","permissions","coreClient","CoreClient","getDecryptedImageData","getTargetDriveFromProfileId","BuiltInProfiles","photoData","Uint8Array","message","recipient"],"sourceRoot":""}