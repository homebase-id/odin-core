{"version":3,"file":"static/js/229.6ede063d.chunk.js","mappings":"8MAsKA,UA7J0B,WACtB,IAAOA,GAAmBC,EAAAA,EAAAA,KAAnBD,gBACP,GAAuBE,EAAAA,EAAAA,MAAhBC,GAAP,eACA,GAAgCC,EAAAA,EAAAA,YAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAgCF,EAAAA,EAAAA,YAAhC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA4DJ,EAAAA,EAAAA,UAAwC,MAApG,eAAOK,EAAP,KAA+BC,EAA/B,KACA,GAAkEN,EAAAA,EAAAA,UAA8C,MAAhH,eAAOO,EAAP,KAAkCC,EAAlC,KACA,GAA8CR,EAAAA,EAAAA,UAAyC,MAAvF,eAAOS,EAAP,KAAwBC,EAAxB,KACA,GAAkCV,EAAAA,EAAAA,YAAlC,eAAOW,EAAP,KAAkBC,EAAlB,KAEMC,EAAe,IAAIC,EAAAA,EAAsBlB,KAEzCmB,EAA+B,CACjCC,MAAO,CACHC,MAAO,uCACPC,KAAM,wCAEVC,WAAYC,EAAAA,EAAAA,KAAuBA,EAAAA,EAAAA,OAGjCC,EAAmC,CACrCC,YAAaC,EAAAA,EAAAA,uBAAyCA,EAAAA,EAAAA,kBAG1DC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAI,yCAAG,oGAEHC,EAAwC,CAC1CC,MAAO5B,EAAa6B,IAAI,SACxBC,KAAM9B,EAAa6B,IAAI,KACvBE,cAAeT,EACfU,OAAQ,CAAChB,IAGPiB,EACF,CACIL,MAAOD,EAAcC,MACrBM,kBAAmBlC,EAAa6B,IAAI,MACpCM,mBAAoBnC,EAAa6B,IAAI,OAbpC,SAiBYf,EAAasB,mBAAmB,CACjDR,MAAOD,EAAcC,QAlBhB,OAiBHS,EAjBG,OAqBT1B,EAAmB0B,GAEnB9B,EAA0BoB,GAC1BlB,EAA6BwB,GAE7BpB,EAAab,EAAa6B,IAAI,WAC9B1B,GAAY,GA3BH,4CAAH,qDA8BVuB,GAEH,GAAE,CAAC1B,IAEJ,IAAMsC,EAAW,yCAAG,mGACVxB,EAAayB,YAAYjC,GADf,uBAEVkC,IAFU,2CAAH,qDAKXA,EAAc,yCAAG,6GACsB1B,EAAa2B,kBAAkBjC,GADrD,OACbkC,EADa,OAEbC,EAAcC,UAAUF,EAA2BG,MACnDC,EAHa,UAGJlC,EAHI,aAGU+B,EAHV,cAG2BD,EAA2BK,mBACzEC,QAAQC,IAAIH,GACZzC,EAAYyC,GALO,2CAAH,qDAuCpB,OAAK5C,EAKDE,GACQ,iBAAK8C,UAAU,oBAAf,4CAC0B,mBAC9B,0BAAO9C,QAKX,oBAAS8C,UAAU,QAAnB,UACI,gBAAKA,UAAU,oBAAf,UACI,iBAAKA,UAAU,sBAAf,UAEKhD,GAA+B,MAAnBQ,IACT,iCACI,iBAAKwC,UAAU,OAAf,yBACiB5C,EAAuBsB,MADxC,uBAEI,kBAFJ,wEAKA,gBAAKsB,UAAU,OAAf,UACI,cACIC,QAASb,EACTY,UAAU,uGAFd,+BASXhD,GAA+B,MAAnBQ,IACT,iCACI,iBAAKwC,UAAU,OAAf,gCACiBxC,QADjB,IACiBA,OADjB,EACiBA,EAAiBkB,MADlC,4BAC2DlB,QAD3D,IAC2DA,OAD3D,EAC2DA,EAAiB0C,YAE5E,gBAAKF,UAAU,OAAf,UACI,cACIC,QAASX,EACTU,UAAU,uGAFd,+CAvChB,uCAmDf,C,uHC3JoBnC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACnB,WAAYsC,GAAuC,kCAC3CA,EACP,CAkCD,O,kFA/BA,WACEC,GADF,qFAGQC,EAASC,KAAKC,oBAHtB,SAIyBF,EAAOG,KAC5B,gCACAJ,GANJ,cAIQK,EAJR,yBAQSA,EAASd,MARlB,mG,IAAA,iFAWA,WACES,GADF,qFAGQC,EAASC,KAAKC,oBAHtB,SAIyBF,EAAOG,KAC5B,yCACAJ,GANJ,cAIQK,EAJR,yBAQSA,EAASd,MARlB,mGAXA,IAWA,kEAWA,WAAkBS,GAAlB,qFACQC,EAASC,KAAKC,oBADtB,SAEyBF,EAAOG,KAC5B,6BACAJ,GAJJ,cAEQK,EAFR,yBAMSA,EAASd,MANlB,mGAXA,IAWA,yEASA,WAAyBS,GAAzB,qFACQC,EAASC,KAAKC,oBADtB,SAEyBF,EAAOG,KAA8B,oBAAqBJ,GAFnF,cAEQK,EAFR,yBAGSA,EAASd,MAHlB,mGATA,MASA,EArCmB9B,C,QAA8B6C,E,uBC4C5C,IAAKvC,EAUAG,E,uDAVZ,SAAYH,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,MAAAA,GAAAA,OAAAA,CAAZ,CAAYA,IAAAA,EAAAA,CAAAA,IAUZ,SAAYG,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBAAAA,EAAAA,EAAAA,gBAAAA,GAAAA,kBAAAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBAAAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBAAAA,EAAAA,EAAAA,+BAAAA,IAAAA,iCAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,yBAAAA,IAAAA,0BAAAA,CAAZ,CAAYA,IAAAA,EAAAA,CAAAA,G","sources":["components/Templates/RegisterAppClient/RegisterAppClient.tsx","provider/temp/app/AppManagementProvider.ts","provider/temp/app/AppManagementProviderTypes.ts"],"sourcesContent":["import useAuth from '../../../hooks/auth/useAuth';\nimport {AppClientRegistrationRequest, AppRegistrationRequest, AppRegistrationResponse, DriveGrantRequest, DrivePermission, PermissionFlags, PermissionSet} from \"../../../provider/temp/app/AppManagementProviderTypes\";\nimport {useEffect, useState} from \"react\";\nimport {useNavigate, useSearchParams} from \"react-router-dom\";\nimport AppManagementProvider from \"../../../provider/temp/app/AppManagementProvider\";\n\n// https://frodo.digital/owner/appreg?an=Chatr&appId=0babb1e6-7604-4bcd-b1fb-87e959226492&fn=todds%20android&return=odin-chat://&pk=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtP9KKODoOZpNGXQy4IdyyBJJO3HJPkbg%2FLXwR5SQGxWWuLpv2THnZoSHqaDl6YWQ3OWCndY22Q0RJZkDBuqqJyn%2B8ErpMdgtJuMhFOpEU2h9nLGeI7BIWENkuqlqBh56YC8qdfYhfpdcv53p106o%2Bi93%2Bzeb0GvfLN6fk1y8o4Rd56DBHXn9zjjDaLWa8m8EDXgZKs7waziPFArIphh0W06Wnb4wCa%2F%2B1HEULhH%2BsIY7bGpoQvgP7xucHZGrqkRmg5X2XhleBIXWYCD7QUM6PvKHdqUSrFkl9Z2UU1SkVAhUUH4UxfwyLQKHXxC7IhKu2VSOXK4%2FkjGua6iW%2BXUQtwIDAQAB\n\n// https://frodo.digital/owner/appreg?n=Chatr&appId=a17d3338-afee-4529-aa7f-d8442bc11f25&fn=todds%20android&rs=odin-chat\nconst RegisterAppClient = () => {\n    const {getSharedSecret} = useAuth();\n    const [searchParams] = useSearchParams();\n    const [isLoaded, setIsLoaded] = useState<boolean>();\n    const [finalUrl, setFinalUrl] = useState<string | null>();\n    const [appRegistrationRequest, setAppRegistrationRequest] = useState<AppRegistrationRequest | null>(null);\n    const [clientRegistrationRequest, setClientRegistrationRequest] = useState<AppClientRegistrationRequest | null>(null);\n    const [appRegistration, setAppRegistration] = useState<AppRegistrationResponse | null>(null);\n    const [returnUrl, setReturnUrl] = useState<string>();\n\n    const tempProvider = new AppManagementProvider(getSharedSecret());\n\n    const chatDrive: DriveGrantRequest = {\n        drive: {\n            alias: \"faaaaaaa-2d68-4dd2-8196-669c21e927ea\",\n            type: \"fabbbbbb-2d68-4dd2-8196-669c21e927ea\"\n        },\n        permission: DrivePermission.Read | DrivePermission.Write\n    }\n\n    const chatPermissionSet: PermissionSet = {\n        permissions: PermissionFlags.ReadConnectionRequests | PermissionFlags.ReadConnections\n    }\n\n    useEffect(() => {\n        const init = async () => {\n\n            const appRegRequest: AppRegistrationRequest = {\n                appId: searchParams.get(\"appId\"),\n                name: searchParams.get(\"n\"),\n                permissionSet: chatPermissionSet, //TODO - read from parameter\n                drives: [chatDrive] //TODO - this should be parameter a list of drives for which this app requests access (along with permissions)\n            }\n\n            const clientRegRequest: AppClientRegistrationRequest =\n                {\n                    appId: appRegRequest.appId,\n                    clientPublicKey64: searchParams.get('pk'),\n                    clientFriendlyName: searchParams.get('fn')\n                }\n\n\n            const appReg = await tempProvider.GetAppRegistration({\n                appId: appRegRequest.appId\n            });\n\n            setAppRegistration(appReg);\n\n            setAppRegistrationRequest(appRegRequest);\n            setClientRegistrationRequest(clientRegRequest);\n\n            setReturnUrl(searchParams.get('return'));\n            setIsLoaded(true);\n        }\n\n        init();\n\n    }, [searchParams])\n\n    const registerApp = async () => {\n        await tempProvider.RegisterApp(appRegistrationRequest);\n        await registerClient();\n    };\n\n    const registerClient = async () => {\n        const clientRegistrationResponse = await tempProvider.RegisterAppClient(clientRegistrationRequest);\n        const encodedData = encodeURI(clientRegistrationResponse.data);\n        const url = `${returnUrl}d=${encodedData}&v=${clientRegistrationResponse.encryptionVersion}`;\n        console.log(url);\n        setFinalUrl(url);\n        \n        // navigate(url);\n    };\n\n    /*\n    * incoming parameters:\n    *   values on AppClientRegistrationRequest\n    * \n    *   Required Drive Creation Specs\n    *     Alias\n    *     Type\n    *     Name\n    * \n    *   Required Permissions\n    *     i.e. can create circles, etc.\n    */\n\n    /*\n    * screen shows app reg details\n    *   if registered, allow to register the client\n    *   if not registered, give option to register app\n    * \n    *   selection of permissions and drives\n    * \n    * \n    * Save Registration Process\n    * 1. Save registration for appid + device friendly name\n    *  + Create drives that are needed (and approved)\n    * 2. After registration is complete: \n    *   - RSA encrypt CAT using public key\n    * 3. 302 redirect to return url + RSA_encrypte\n    */\n\n    if (!isLoaded) {\n        return (<div>Loading...</div>);\n    }\n\n\n    if (finalUrl) {\n        return (<div className=\"container mx-auto\">\n            browser will be redirected to <br/>\n            <span>{finalUrl}</span>\n        </div>)\n    }\n\n    return (\n        <section className=\"mt-20\">\n            <div className=\"container mx-auto\">\n                <div className=\"-m-5 flex flex-wrap\">\n\n                    {isLoaded && appRegistration == null &&\n                        <>\n                            <div className=\"px-5\">\n                                App with id {appRegistrationRequest.appId} is not registered.\n                                <br/>\n                                Clicking OK will approve the app for use and register this client\n                            </div>\n                            <div className=\"px-5\">\n                                <a\n                                    onClick={registerApp}\n                                    className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\">\n                                    Register Now\n                                </a>\n                            </div>\n                        </>\n                    }\n\n                    {isLoaded && appRegistration != null &&\n                        <>\n                            <div className=\"px-5\">\n                                App with id {appRegistration?.appId} is registered at {appRegistration?.created}\n                            </div>\n                            <div className=\"px-5\">\n                                <a\n                                    onClick={registerClient}\n                                    className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\">\n                                    Register this Client\n                                </a>\n                            </div>\n                        </>}\n\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default RegisterAppClient;\n","import {\n  AppClientRegistrationRequest,\n  AppClientRegistrationResponse,\n  AppRegistrationRequest,\n  AppRegistrationResponse,\n  GetAppRequest,\n} from './AppManagementProviderTypes';\nimport { OwnerProviderBase } from '../../OwnerProviderBase';\n\nexport default class AppManagementProvider extends OwnerProviderBase {\n  constructor(sharedSecret: Uint8Array | undefined) {\n    super(sharedSecret);\n  }\n\n  //adds the specified client to the list of allowed clients for a given app; returns a CAT\n  async RegisterAppClient(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/client',\n      request\n    );\n    return response.data;\n  }\n  \n  async RegisterChatAppClient_temp(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/chatclient_temp',\n      request\n    );\n    return response.data;\n  }\n  \n  async RegisterApp(request: AppRegistrationRequest): Promise<AppRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppRegistrationResponse>(\n      'appmanagement/register/app',\n      request\n    );\n    return response.data;\n  }\n\n  async GetAppRegistration(request: GetAppRequest): Promise<AppRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppRegistrationResponse>('appmanagement/app', request);\n    return response.data;\n  }\n}\n","export interface AppClientRegistrationRequest {\n    appId: string;\n    clientFriendlyName: string;\n    clientPublicKey64: string\n}\n\nexport interface AppClientRegistrationResponse\n{\n    /** Version number for how the data field is encrypted */\n    encryptionVersion:number,\n    \n    /** RSA encrypted response.  When encryption version == 1, the  first 16 bytes is token id, second 16 bytes is AccessTokenHalfKey, and last 16 bytes is SharedSecret */\n    data:string,\n    \n    /** A Guid representing the Id of the access registration */\n    token:string\n}\n\nexport interface GetAppRequest {\n    /** @format uuid */\n    appId: string;\n}\n\nexport interface AppRegistrationRequest {\n    /** @format uuid */\n    appId: string;\n    name: string | null;\n    permissionSet?: PermissionSet;\n\n    /** The list of drives of which this app should receive access */\n    drives?: DriveGrantRequest[] | null;\n}\n\nexport interface DriveGrantRequest {\n    drive: TargetDrive;\n    permission: DrivePermission;\n}\n\nexport interface TargetDrive {\n    /** @format uuid */\n    alias: string;\n\n    /** @format uuid */\n    type: string;\n}\n\nexport interface AppRegistrationResponse {\n    appId: string;\n    name:string;\n    created:number;\n    isRevoked:boolean;\n}\n\nexport enum DrivePermission {\n    None = 0,\n    Read =  1 << 0,\n    Write =  1 << 2\n}\n\nexport interface PermissionSet {\n    permissions: PermissionFlags\n}\n\nexport enum PermissionFlags {\n    None = 0,\n\n    ApproveConnection = 1 << 0,\n\n    ReadConnections = 1 << 1,\n\n    UpdateConnections = 1 << 2,\n\n    DeleteConnections = 1 << 3,\n    \n    CreateOrSendConnectionRequests = 1 << 4,\n\n    ReadConnectionRequests = 1 << 5,\n\n    DeleteConnectionRequests = 1 << 6,\n\n}\n"],"names":["getSharedSecret","useAuth","useSearchParams","searchParams","useState","isLoaded","setIsLoaded","finalUrl","setFinalUrl","appRegistrationRequest","setAppRegistrationRequest","clientRegistrationRequest","setClientRegistrationRequest","appRegistration","setAppRegistration","returnUrl","setReturnUrl","tempProvider","AppManagementProvider","chatDrive","drive","alias","type","permission","DrivePermission","chatPermissionSet","permissions","PermissionFlags","useEffect","init","appRegRequest","appId","get","name","permissionSet","drives","clientRegRequest","clientPublicKey64","clientFriendlyName","GetAppRegistration","appReg","registerApp","RegisterApp","registerClient","RegisterAppClient","clientRegistrationResponse","encodedData","encodeURI","data","url","encryptionVersion","console","log","className","onClick","created","sharedSecret","request","client","this","createAxiosClient","post","response","OwnerProviderBase"],"sourceRoot":""}