{"version":3,"file":"static/js/485.7ea83b75.chunk.js","mappings":"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","sources":["components/Connection/PersonCard/PersonCard.tsx","components/Form/Input.tsx","components/Form/Textarea.tsx","components/Sections/CollapsableSection.tsx","components/Connection/PersonIncomingRequest/PersonIncomingRequest.tsx","components/Connection/PersonOutgoingRequest/PersonOutgoingRequest.tsx","components/Connection/PersonActive/PersonActive.tsx","components/Dialog/ConnectionDialog/ConnectionDialog.tsx","components/Templates/Connections/Connections.tsx","hooks/connection/useConnection.ts","hooks/connections/useConnections.ts"],"sourcesContent":["import { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PersonCard = ({\n  name,\n  href,\n  className,\n  children,\n  onClick,\n}: {\n  name: string;\n  href?: string;\n  className: string;\n  children: ReactNode;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n}) => {\n  const Wrapper = ({ children }) => (href ? <Link to={href}>{children}</Link> : <>{children}</>);\n\n  return (\n    <div className={className}>\n      <Wrapper>\n        <div\n          className={`h-full rounded-md border-[1px] border-gray-200 border-opacity-60 bg-white transition-colors dark:border-gray-800 dark:bg-gray-800`}\n          onClick={onClick}\n        >\n          <div className=\"aspect-square\">\n            <img src=\"https://placehold.co/200\" className=\"h-full w-full\" />\n          </div>\n          <div className=\"p-2\">\n            <h2 className=\"font-thiner mb-6 dark:text-white\">{name}</h2>\n            {children}\n          </div>\n        </div>\n      </Wrapper>\n    </div>\n  );\n};\n\nexport default PersonCard;\n","const Input = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n) => {\n  return (\n    <input\n      {...props}\n      type={props.type ?? 'input'}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    />\n  );\n};\n\nexport default Input;\n","const Textarea = (\n  props: React.DetailedHTMLProps<\n    React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >\n) => {\n  return (\n    <textarea\n      {...props}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    />\n  );\n};\n\nexport default Textarea;\n","import { ReactNode, useEffect, useRef, useState } from 'react';\nimport Arrow from '../Icons/Arrow/Arrow';\n\nconst CollapsableSection = ({\n  isOpenByDefault = true,\n  title,\n  className,\n  children,\n  isOpaqueBg = false,\n  isBorderLess = false,\n}: {\n  isOpenByDefault?: boolean;\n  title: ReactNode;\n  className?: string;\n  children: ReactNode;\n  isOpaqueBg?: boolean;\n  isBorderLess?: boolean;\n}) => {\n  const [isOpen, setIsOpen] = useState(isOpenByDefault);\n  const sectionContainerRef = useRef<HTMLDivElement>(null);\n  const height = useRef(0);\n\n  useEffect(() => {\n    if (isOpenByDefault && sectionContainerRef.current) {\n      height.current = sectionContainerRef.current.clientHeight;\n    }\n    // Todo apply FLIP approach (when not open by default) to calculate the to-be height when we can't use the height of the open state\n  }, [isOpen]);\n\n  return (\n    <section\n      className={`my-5 rounded-md ${\n        isOpaqueBg\n          ? isBorderLess\n            ? ''\n            : 'rounded-lg border-[1px] border-gray-200 border-opacity-80 px-5 dark:border-gray-700'\n          : 'bg-slate-50 px-5 dark:bg-slate-800 dark:text-slate-300'\n      } ${className}`}\n    >\n      <div\n        className={`relative cursor-pointer border-b-[1px] border-slate-200 py-5 transition-all duration-300 ${\n          isOpen ? 'border-opacity-100' : 'border-opacity-0'\n        }`}\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <h3 className=\"text-2xl dark:text-white\">{title}</h3>\n        <button className=\"absolute top-0 right-0 bottom-0\">\n          <Arrow\n            className={`h-4 w-4 transition-transform duration-300 ${\n              isOpen ? 'rotate-90' : '-rotate-90'\n            }`}\n          />\n        </button>\n      </div>\n      <div\n        className={`overflow-hidden transition-all duration-300 `}\n        style={{ maxHeight: `${isOpen ? (height.current ? height.current : 2000) : 0}px` }}\n        ref={sectionContainerRef}\n      >\n        <div className=\"py-5 \">{children}</div>\n      </div>\n    </section>\n  );\n};\n\nexport default CollapsableSection;\n","import { ReactNode } from 'react';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonIncomingRequest = ({\n  senderDotYouId,\n  children,\n  className,\n}: {\n  senderDotYouId: string;\n  children?: ReactNode;\n  className: string;\n}) => {\n  const {\n    acceptRequest: { mutate: acceptPending, status: acceptPendingStatus },\n    ignoreRequest: { mutate: ignoreRequest, status: ignoreRequestStatus },\n  } = useConnection({});\n\n  return (\n    <PersonCard\n      className={className}\n      name={senderDotYouId}\n      href={(senderDotYouId && `/owner/connections/${senderDotYouId}`) ?? undefined}\n    >\n      {children}\n      <ActionButton\n        type=\"primary\"\n        className=\"mb-2 w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          acceptPending({ senderDotYouId: senderDotYouId });\n          return false;\n        }}\n        state={acceptPendingStatus}\n      >\n        Confirm\n      </ActionButton>\n      <ActionButton\n        type=\"secondary\"\n        className=\"mb-2 w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          ignoreRequest({ senderDotYouId: senderDotYouId });\n          return false;\n        }}\n        state={ignoreRequestStatus}\n      >\n        Ignore\n      </ActionButton>\n    </PersonCard>\n  );\n};\n\nexport default PersonIncomingRequest;\n","import useConnection from '../../../hooks/connection/useConnection';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonOutgoingRequest = ({\n  recipientDotYouId,\n  className,\n}: {\n  recipientDotYouId: string;\n  className: string;\n}) => {\n  const { mutate: revokeRequest, status: revokeRequestStatus } = useConnection(\n    {}\n  ).revokeConnectionRequest;\n\n  return (\n    <PersonCard\n      className={className}\n      name={recipientDotYouId}\n      href={(recipientDotYouId && `/owner/connections/${recipientDotYouId}`) ?? undefined}\n    >\n      <ActionButton\n        type=\"secondary\"\n        className=\"mb-2 w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          revokeRequest({ targetDotYouId: recipientDotYouId });\n          return false;\n        }}\n        state={revokeRequestStatus}\n      >\n        Cancel\n      </ActionButton>\n    </PersonCard>\n  );\n};\n\nexport default PersonOutgoingRequest;\n","import useConnection from '../../../hooks/connection/useConnection';\nimport { DotYouProfile } from '../../../provider/connections/CirlceDataTypes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonActive = ({\n  dotYouProfile,\n  className,\n}: {\n  dotYouProfile: DotYouProfile;\n  className: string;\n}) => {\n  const { mutate: disconnect, status: disconnectStatus } = useConnection({}).disconnect;\n\n  return (\n    <PersonCard\n      className={className}\n      name={\n        dotYouProfile.givenName && dotYouProfile.surName\n          ? `${dotYouProfile.givenName} ${dotYouProfile.surName}`\n          : dotYouProfile.dotYouId\n      }\n      href={(dotYouProfile.dotYouId && `/owner/connections/${dotYouProfile.dotYouId}`) ?? undefined}\n    >\n      <ActionButton\n        type=\"secondary\"\n        className=\"w-full\"\n        onClick={(e) => {\n          e.preventDefault();\n          disconnect({ connectionDotYouId: dotYouProfile.dotYouId });\n        }}\n        state={disconnectStatus}\n      >\n        Remove\n      </ActionButton>\n    </PersonCard>\n  );\n};\n\nexport default PersonActive;\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connection/useConnection';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Checkbox from '../../Form/Checkbox';\nimport Input from '../../Form/Input';\nimport Textarea from '../../Form/Textarea';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst ConnectionDialog = ({\n  title,\n  isOpen,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const { mutate: sendConnectionRequest, status: sendConnectionRequestStatus } = useConnection(\n    {}\n  ).sendConnectionRequest;\n  const { data: circles } = useCircles().fetch;\n\n  const [connectionTarget, setConnectionTarget] = useState('samwise.digital');\n  const [message, setMessage] = useState('');\n  const [name, setName] = useState('Frodo');\n  const [circleGrants, setCircleGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            sendConnectionRequest(\n              {\n                message: message,\n                name: name,\n                targetDotYouId: connectionTarget,\n                circleIds: circleGrants,\n              },\n              {\n                onSuccess: () => {\n                  setTimeout(() => onConfirm(), 2000);\n                },\n              }\n            );\n          }}\n        >\n          <div className=\"mb-5\">\n            <label htmlFor=\"dotyouid\">Recipient (dot you id)</label>\n            <Input\n              id=\"dotyouid\"\n              name=\"dotyouid\"\n              onChange={(e) => {\n                setConnectionTarget(e.target.value);\n              }}\n              defaultValue={connectionTarget}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"dotyouid\">From:</label>\n            <Input\n              id=\"dotyouid\"\n              name=\"dotyouid\"\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n              defaultValue={name}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"message\">{t('Message')}</label>\n            <Textarea\n              id=\"message\"\n              name=\"message\"\n              onChange={(e) => {\n                setMessage(e.target.value);\n              }}\n              required\n            />\n          </div>\n\n          {circles.length ? (\n            <>\n              <h2 className=\"mb-2 text-lg\">Add as member to:</h2>\n\n              {circles.map((circle, index) => {\n                return (\n                  <div key={circle.id ?? index} className=\"mb-2\">\n                    <Checkbox\n                      value={circle.id}\n                      id={circle.id}\n                      onChange={(e) => {\n                        const newCircleGrants = [...circleGrants];\n                        if (e.target.checked) {\n                          newCircleGrants.push(e.target.value);\n                          setCircleGrants(newCircleGrants);\n                        } else {\n                          setCircleGrants(\n                            newCircleGrants.filter((circleId) => circleId !== e.target.value)\n                          );\n                        }\n                      }}\n                    />\n                    <label htmlFor={circle.id} className=\"ml-2 cursor-pointer\">\n                      {circle.name}\n                    </label>\n                  </div>\n                );\n              })}\n            </>\n          ) : null}\n\n          <div className=\"-mx-2 py-3 sm:flex sm:flex-row-reverse\">\n            <ActionButton className=\"mx-2\" state={sendConnectionRequestStatus} icon={'send'}>\n              {t('Send')}\n            </ActionButton>\n            <ActionButton className=\"mx-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default ConnectionDialog;\n","import useAuth from '../../../hooks/auth/useAuth';\nimport { CircleNetworkRequestProvider } from '../../../provider/connections/CircleNetworkRequestProvider';\nimport { CircleNetworkProvider } from '../../../provider/connections/CircleNetworkProvider';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport useConnections from '../../../hooks/connections/useConnections';\nimport ActionButton from '../../Buttons/ActionButton';\nimport PersonIncomingRequest from '../../Connection/PersonIncomingRequest/PersonIncomingRequest';\nimport PersonOutgoingRequest from '../../Connection/PersonOutgoingRequest/PersonOutgoingRequest';\nimport PersonActive from '../../Connection/PersonActive/PersonActive';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Section from '../../Sections/Section';\nimport CollapsableSection from '../../Sections/CollapsableSection';\nimport ConnectionDialog from '../../Dialog/ConnectionDialog/ConnectionDialog';\nimport { useState } from 'react';\nimport Persons from '../../Icons/Persons/Persons';\n\nconst Connections = () => {\n  const {\n    fetchPending: { data: pendingConnections, isLoading: pendingConnectionsLoading },\n    fetchActive: { data: activeConnections, isLoading: activeConnectionsLoading },\n    fetchSent: { data: sentRequests, isLoading: sentRequestsLoading },\n  } = useConnections();\n\n  const [isSentConnectionOpen, setIsSentConnectionOpen] = useState(false);\n\n  return (\n    <>\n      <section>\n        <PageMeta\n          icon={Persons}\n          title={'Connections'}\n          actions={\n            <>\n              <ActionButton onClick={() => setIsSentConnectionOpen(true)} icon={'plus'}>\n                {t('Send request')}\n              </ActionButton>\n            </>\n          }\n        />\n\n        {!pendingConnectionsLoading && pendingConnections?.length ? (\n          <Section isOpaqueBg={true} isBorderLess={true} title={t('Connection requests')}>\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {pendingConnections?.map((pendingConnection) => (\n                <PersonIncomingRequest\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  senderDotYouId={pendingConnection.senderDotYouId}\n                  key={pendingConnection.senderDotYouId}\n                >\n                  <div className=\"-mt-3\">\n                    <p>\n                      {t('From:')} {pendingConnection.name}\n                    </p>\n                    <p className=\"mb-3 text-sm\">{pendingConnection.message}</p>\n                  </div>\n                </PersonIncomingRequest>\n              ))}\n            </div>\n          </Section>\n        ) : null}\n\n        {!activeConnectionsLoading && activeConnections?.length ? (\n          <Section isOpaqueBg={true} isBorderLess={true} title={t('Your Connections')}>\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {activeConnections?.map((activeConnection) => (\n                <PersonActive\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  dotYouProfile={activeConnection}\n                  key={activeConnection.dotYouId}\n                />\n              ))}\n            </div>\n          </Section>\n        ) : null}\n\n        {!sentRequestsLoading && sentRequests?.length ? (\n          <CollapsableSection\n            isOpaqueBg={true}\n            isBorderLess={true}\n            isOpenByDefault={true}\n            title={t('Sent Connection Requests')}\n          >\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {sentRequests?.map((sentRequest) => (\n                <PersonOutgoingRequest\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  recipientDotYouId={sentRequest.recipient}\n                  key={sentRequest.recipient}\n                />\n              ))}\n            </div>\n          </CollapsableSection>\n        ) : null}\n\n        <CollapsableSection\n          title=\"POC:\"\n          isBorderLess={true}\n          isOpaqueBg={true}\n          isOpenByDefault={false}\n        >\n          <ConnectionsPoc />\n        </CollapsableSection>\n      </section>\n      <ConnectionDialog\n        title={t('Send connection request')}\n        isOpen={isSentConnectionOpen}\n        onConfirm={() => setIsSentConnectionOpen(false)}\n        onCancel={() => setIsSentConnectionOpen(false)}\n      />\n    </>\n  );\n};\n\nconst ConnectionsPoc = () => {\n  const { getSharedSecret } = useAuth();\n\n  const sendConnectionRequests = async () => {\n    // if frodo - send requests to sam (and others in the future)\n\n    const isLocalDemo = window.location.hostname.toLowerCase().endsWith('.digital');\n    const isFrodo =\n      window.location.hostname == 'frodo.digital' || window.location.hostname == 'frodobaggins.me';\n    const isSam =\n      window.location.hostname == 'samwise.digital' ||\n      window.location.hostname == 'samwisegamgee.me';\n\n    let intendedRecipient = '';\n\n    if (isLocalDemo) {\n      intendedRecipient = isFrodo ? 'samwise.digital' : 'frodo.digital';\n    } else {\n      intendedRecipient = isFrodo ? 'samwisegamgee.me' : 'frodobaggins.me';\n    }\n\n    console.log('intended recipient:', intendedRecipient);\n\n    //accept all incoming requests\n    const requestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n    const circleProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n\n    const connectionInfo = await circleProvider.getConnectionInfo(intendedRecipient);\n    console.log('connection status', connectionInfo?.status ?? 'None');\n\n    if (connectionInfo == null || connectionInfo.status != 'Connected') {\n      const pendingRequest = await requestProvider.getPendingRequest(intendedRecipient);\n      console.log('has pending request', pendingRequest != null);\n\n      if (pendingRequest) {\n        console.log('accepting the pending request');\n\n        //TODO: need to specify the chat drive?\n        await requestProvider.acceptConnectionRequest(intendedRecipient);\n        //validate we're connected\n        const isConnectedInfo = await circleProvider.getConnectionInfo(intendedRecipient);\n\n        console.log('connection status', connectionInfo?.status ?? 'None');\n\n        if (isConnectedInfo == null) {\n          throw 'Failed to connect to ' + intendedRecipient;\n        }\n      } else {\n        const sentRequest = await requestProvider.getSentRequest(intendedRecipient);\n        if (null == sentRequest) {\n          console.log('sending a new request');\n          await requestProvider.sendRequest(intendedRecipient, 'Demo data setup', '', []);\n\n          //TODO: render this in the screen so the user can just click thru\n          alert(\n            `Connection request was sent to ${intendedRecipient}.  You must go to https://${intendedRecipient} and approve their connection`\n          );\n        } else {\n          alert(\n            `There is a pending connection request to ${intendedRecipient} from you.  You must go to https://${intendedRecipient} and approve their connection`\n          );\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"flex flex-wrap\">\n        <button\n          onClick={sendConnectionRequests}\n          className=\"block w-1/3 rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\"\n        >\n          Send connection request\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Connections;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useConnection = ({ dotYouId }: { dotYouId?: string }) => {\n  const queryClient = useQueryClient();\n\n  const { getSharedSecret } = useAuth();\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n\n  const fetchSingle = async ({ dotYouId }: { dotYouId: string }) => {\n    if (!dotYouId) {\n      return;\n    }\n\n    const connectionInfo = await circleNetworkProvider.getConnectionInfo(dotYouId);\n    if (connectionInfo && connectionInfo.status !== 'None') {\n      return connectionInfo;\n    }\n\n    const pendingRequest = await circleNetworkRequestProvider.getPendingRequest(dotYouId);\n    if (pendingRequest) {\n      return pendingRequest;\n    }\n\n    const sentRequest = await circleNetworkRequestProvider.getSentRequest(dotYouId);\n    return sentRequest ?? connectionInfo;\n  };\n\n  const disconnect = async ({ connectionDotYouId }: { connectionDotYouId?: string }) => {\n    return await circleNetworkProvider.disconnectFromContact(connectionDotYouId ?? dotYouId);\n  };\n\n  const sendConnectionRequest = async ({\n    targetDotYouId,\n    message,\n    name,\n    circleIds,\n  }: {\n    targetDotYouId: string;\n    message: string;\n    name: string;\n    circleIds: string[];\n  }) => {\n    return await circleNetworkRequestProvider.sendRequest(targetDotYouId, message, name, circleIds);\n  };\n\n  const revokeConnectionRequest = async ({ targetDotYouId }: { targetDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deleteSentRequest(targetDotYouId);\n  };\n\n  const acceptRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.acceptConnectionRequest(senderDotYouId);\n  };\n\n  const ignoreRequest = async ({ senderDotYouId }: { senderDotYouId: string }) => {\n    return await circleNetworkRequestProvider.deletePendingRequest(senderDotYouId);\n  };\n\n  return {\n    fetch: useQuery(['connectionInfo', dotYouId], () => fetchSingle({ dotYouId }), {\n      refetchOnMount: true,\n      refetchOnWindowFocus: false,\n    }),\n\n    disconnect: useMutation(disconnect, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    sendConnectionRequest: useMutation(sendConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    revokeConnectionRequest: useMutation(revokeConnectionRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['sentRequests']);\n        queryClient.invalidateQueries(['connectionInfo', param.targetDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    acceptRequest: useMutation(acceptRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['activeConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    ignoreRequest: useMutation(ignoreRequest, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['pendingConnections']);\n        queryClient.invalidateQueries(['connectionInfo', param.senderDotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useConnection;\n","import { useQuery } from '@tanstack/react-query';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport { CircleNetworkRequestProvider } from '../../provider/connections/CircleNetworkRequestProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useConnections = () => {\n  const { getSharedSecret } = useAuth();\n  const circleNetworkRequestProvider = CircleNetworkRequestProvider.getInstance(getSharedSecret());\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n\n  const fetchPendingConnections = async () => {\n    return await (\n      await circleNetworkRequestProvider.getPendingRequests({ pageNumber: 1, pageSize: 10 })\n    ).results;\n  };\n\n  const fetchSentRequests = async () => {\n    return await (\n      await circleNetworkRequestProvider.getSentRequests({ pageNumber: 1, pageSize: 10 })\n    ).results;\n  };\n\n  const fetchConnections = async () => {\n    return await (\n      await circleNetworkProvider.getConnections({ pageNumber: 1, pageSize: 10 })\n    ).results;\n  };\n\n  return {\n    fetchPending: useQuery(['pendingConnections'], () => fetchPendingConnections(), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n    fetchSent: useQuery(['sentRequests'], () => fetchSentRequests(), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n    fetchActive: useQuery(['activeConnections'], () => fetchConnections(), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useConnections;\n"],"names":["name","href","className","children","onClick","Wrapper","to","src","props","type","isOpenByDefault","title","isOpaqueBg","isBorderLess","useState","isOpen","setIsOpen","sectionContainerRef","useRef","height","useEffect","current","clientHeight","style","maxHeight","ref","senderDotYouId","useConnection","acceptRequest","acceptPending","mutate","acceptPendingStatus","status","ignoreRequest","ignoreRequestStatus","PersonCard","undefined","ActionButton","e","preventDefault","state","recipientDotYouId","revokeConnectionRequest","revokeRequest","revokeRequestStatus","targetDotYouId","dotYouProfile","disconnect","disconnectStatus","givenName","surName","dotYouId","connectionDotYouId","onConfirm","onCancel","target","usePortal","sendConnectionRequest","sendConnectionRequestStatus","circles","useCircles","fetch","data","connectionTarget","setConnectionTarget","message","setMessage","setName","circleGrants","setCircleGrants","dialog","DialogWrapper","onClose","onSubmit","circleIds","onSuccess","setTimeout","htmlFor","Input","id","onChange","value","defaultValue","required","t","Textarea","length","map","circle","index","Checkbox","newCircleGrants","checked","push","filter","circleId","icon","createPortal","ConnectionsPoc","getSharedSecret","useAuth","sendConnectionRequests","isLocalDemo","window","location","hostname","toLowerCase","endsWith","isFrodo","intendedRecipient","console","log","requestProvider","CircleNetworkRequestProvider","circleProvider","CircleNetworkProvider","getConnectionInfo","connectionInfo","getPendingRequest","pendingRequest","acceptConnectionRequest","isConnectedInfo","getSentRequest","sendRequest","alert","useConnections","fetchPending","pendingConnections","pendingConnectionsLoading","isLoading","fetchActive","activeConnections","activeConnectionsLoading","fetchSent","sentRequests","sentRequestsLoading","isSentConnectionOpen","setIsSentConnectionOpen","PageMeta","Persons","actions","Section","pendingConnection","activeConnection","CollapsableSection","sentRequest","recipient","queryClient","useQueryClient","circleNetworkProvider","circleNetworkRequestProvider","fetchSingle","disconnectFromContact","deleteSentRequest","deletePendingRequest","useQuery","refetchOnMount","refetchOnWindowFocus","useMutation","param","invalidateQueries","onError","ex","error","fetchPendingConnections","getPendingRequests","pageNumber","pageSize","results","fetchSentRequests","getSentRequests","fetchConnections","getConnections"],"sourceRoot":""}