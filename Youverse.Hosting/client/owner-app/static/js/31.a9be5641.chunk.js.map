{"version":3,"file":"static/js/31.a9be5641.chunk.js","mappings":"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","sources":["components/Dialog/ProfileDialog/ProfileDialog.tsx","components/TabMenu/TabMenu.tsx","components/Attribute/AttributeCreator/AttributeCreator.tsx","hooks/profiles/useProfileSections.ts","components/SectionEditor/SectionEditor.tsx","components/Templates/ProfileDetails/ProfileDetails.tsx","helpers/common.ts","hooks/profiles/useProfiles.ts"],"sourcesContent":["import { ProfileDefinition } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport useProfiles from '../../../hooks/profiles/useProfiles';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Textarea from '../../Form/Textarea';\nimport DialogWrapper from '../Common/DialogWrapper';\n\nconst ProfileDialog = ({\n  title,\n  confirmText,\n  isOpen,\n  defaultValue,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n  defaultValue?: ProfileDefinition;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const { mutate: saveProfileDefinition, status: saveProfileDefinitionStatus } =\n    useProfiles().saveProfile;\n\n  const [newProfileDef, setNewProfileDef] = useState<ProfileDefinition>({\n    ...defaultValue,\n  });\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n\n            console.log('shall edit/create', newProfileDef);\n            saveProfileDefinition({ profileDef: newProfileDef }, { onSuccess: () => onConfirm() });\n\n            return false;\n          }}\n        >\n          <div className=\"mb-5\">\n            <label htmlFor=\"name\">{t('Name')}</label>\n            <Input\n              id=\"name\"\n              name=\"profileName\"\n              defaultValue={newProfileDef.name}\n              onChange={(e) => {\n                setNewProfileDef({ ...newProfileDef, name: e.target.value });\n              }}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <label htmlFor=\"name\">{t('Description')}</label>\n            <Textarea\n              id=\"description\"\n              name=\"profileDescription\"\n              defaultValue={newProfileDef.description}\n              onChange={(e) => {\n                setNewProfileDef({ ...newProfileDef, description: e.target.value });\n              }}\n              required\n            />\n          </div>\n\n          <div className=\"-mx-2 py-3 sm:flex sm:flex-row-reverse\">\n            <ActionButton className=\"mx-2\" state={saveProfileDefinitionStatus} icon={'send'}>\n              {confirmText || t('Add Profile')}\n            </ActionButton>\n            <ActionButton className=\"mx-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default ProfileDialog;\n","import { FC, ReactNode } from 'react';\n\ninterface TabmenuProps {\n  className?: string;\n  items: { title: ReactNode; key: string; isActive: boolean; className?: string }[];\n  onChange: (key: string) => void;\n}\n\nconst TabMenu: FC<TabmenuProps> = ({ className, items, onChange }) => {\n  return (\n    <div className={`flex ${className}`}>\n      {items.map((item) => {\n        return (\n          // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n          <a\n            className={`flex-grow cursor-pointer border-b-2 py-2 px-1 text-lg ${\n              item.isActive\n                ? 'border-indigo-500 text-indigo-500 dark:text-indigo-400'\n                : 'border-gray-300 transition-colors duration-300 hover:border-indigo-400 dark:border-gray-800 hover:dark:border-indigo-600'\n            } ${item.className ?? ''}`}\n            key={item.key}\n            onClick={() => {\n              onChange(item.key);\n            }}\n          >\n            {item.title}\n          </a>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TabMenu;\n","import {\n  AttributeDefinition,\n  AttributeDefinitions,\n  AttributeFile,\n  SecurityGroupType,\n} from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useAttribute from '../../../hooks/profiles/useAttribute';\nimport { AttributeVm } from '../../../hooks/profiles/useAttributes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Select from '../../Form/Select';\nimport Section from '../../Sections/Section';\nimport AttributeFields from '../AttributeFields/AttributeFields';\n\nconst AttributeCreator = ({ profileId, sectionId }: { profileId: string; sectionId: string }) => {\n  const [isActive, setIsActive] = useState(false);\n  const [attribute, setAttribute] = useState<AttributeVm>();\n  const { mutate: saveAttribute, isLoading, isError, isSuccess } = useAttribute({}).save;\n\n  const setType = (typeId: string) => {\n    const targetObj = Object.values(AttributeDefinitions).find(\n      (curr) => curr.type.toString() === typeId\n    ) as AttributeDefinition;\n\n    setAttribute({\n      id: '',\n      type: typeId,\n      sectionId: sectionId,\n      priority: -1,\n      data: {},\n      typeDefinition: targetObj,\n      profileId: profileId,\n      acl: { requiredSecurityGroup: SecurityGroupType.Owner },\n    });\n  };\n\n  const changeHandler: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement> = (e) => {\n    if (!attribute) {\n      // attribute selection failed on type selection...\n      return;\n    }\n\n    const newAttr: AttributeVm = { ...attribute };\n    newAttr.data[e.target.name] = e.target.value;\n\n    setAttribute(newAttr);\n  };\n\n  const saveNewData = () => {\n    console.log(attribute);\n    saveAttribute(attribute as AttributeFile, {\n      onSuccess: () => {\n        discard();\n      },\n    });\n  };\n\n  const discard = () => {\n    setIsActive(false);\n    setAttribute(undefined);\n  };\n\n  return (\n    <>\n      {isActive ? (\n        <Section\n          title={`New${attribute ? ':' : ''} ${attribute?.typeDefinition.name ?? ''}`}\n          isOpaqueBg={true}\n        >\n          {attribute === undefined ? (\n            <div className=\"mb-5\">\n              <label htmlFor=\"type\">{t('Attribute Type')}</label>\n              <Select\n                id=\"type\"\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option>{t('Make a selection')}</option>\n                {Object.values(AttributeDefinitions).map((def) => {\n                  return (\n                    <option value={def.type.toString()} key={def.type.toString()}>\n                      {def.name}\n                    </option>\n                  );\n                })}\n              </Select>\n            </div>\n          ) : (\n            <AttributeFields attribute={attribute} onChange={changeHandler} />\n          )}\n          <div className=\"flex flex-row\">\n            <ActionButton type=\"secondary\" className=\"ml-auto\" onClick={discard}>\n              {t('Cancel')}\n            </ActionButton>\n            <ActionButton\n              type=\"primary\"\n              icon=\"plus\"\n              className=\"ml-2\"\n              onClick={saveNewData}\n              state={isLoading ? 'loading' : isSuccess ? 'success' : isError ? 'error' : undefined}\n            >\n              {t('Add')}\n            </ActionButton>\n          </div>\n        </Section>\n      ) : (\n        <div className=\"flex flex-row\">\n          <ActionButton\n            type=\"primary\"\n            icon=\"plus\"\n            className=\"mx-auto min-w-[9rem]\"\n            onClick={() => setIsActive(true)}\n          >\n            {t('Add Attribute')}\n          </ActionButton>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AttributeCreator;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, Client, ProfileSection } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useProfileSections = ({ profileId }: { profileId?: string }) => {\n  const queryClient = useQueryClient();\n  const { getSharedSecret } = useAuth();\n\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchSections = async ({ profileId }: { profileId: string }) => {\n    if (!profileId) {\n      return [];\n    }\n    const definitions = await client.profileDefinitionProvider.getProfileSections(profileId);\n\n    return definitions;\n  };\n\n  const saveSection = async ({\n    profileId,\n    profileSection,\n  }: {\n    profileId: string;\n    profileSection: ProfileSection;\n  }) => {\n    return await client.profileDefinitionProvider.saveProfileSection(profileId, profileSection);\n  };\n\n  return {\n    fetchAll: useQuery(['profileSections', profileId], () => fetchSections({ profileId }), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n    save: useMutation(saveSection, {\n      onSuccess: (data, params) => {\n        queryClient.invalidateQueries(['profileSections', params.profileId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useProfileSections;\n","import { ProfileDefinition, ProfileSection } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { t } from '../../helpers/i18n/dictionary';\nimport useProfileSections from '../../hooks/profiles/useProfileSections';\nimport ActionButton from '../Buttons/ActionButton';\nimport Input from '../Form/Input';\nimport Section from '../Sections/Section';\n\nconst SectionEditor = ({\n  section,\n  profileId,\n\n  onClose,\n}: {\n  section: ProfileSection;\n  profileId: string;\n  onClose: () => void;\n}) => {\n  const [sectionData, setSectionData] = useState({ ...section });\n  const { mutateAsync: saveSection, status: saveSectionStatus } = useProfileSections({}).save;\n\n  const handleChange = (e: { target: { value: unknown; name: string } }) => {\n    const newSectionData = { ...sectionData };\n    newSectionData[e.target.name] = e.target.value;\n\n    setSectionData(newSectionData);\n  };\n\n  return (\n    <Section title={`${t('Edit')}: ${section.name}`} isOpaqueBg={true}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n\n          saveSection(\n            { profileId: profileId, profileSection: sectionData },\n            {\n              onSuccess: () => {\n                onClose();\n              },\n            }\n          );\n        }}\n      >\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Name')}</label>\n          <Input id=\"name\" name=\"name\" defaultValue={section.name} onChange={handleChange} />\n        </div>\n\n        <div className=\"flex flex-row\">\n          <ActionButton\n            type=\"secondary\"\n            className=\"ml-auto\"\n            onClick={(e) => {\n              e.preventDefault();\n              onClose();\n            }}\n          >\n            {t('Cancel')}\n          </ActionButton>\n          <ActionButton type=\"primary\" className=\"ml-2\" state={saveSectionStatus}>\n            {t('Save')}\n          </ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nexport default SectionEditor;\n","import { DataUtil, ProfileSection } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport useAttributes from '../../../hooks/profiles/useAttributes';\nimport useProfiles from '../../../hooks/profiles/useProfiles';\n\nimport TabMenu from '../../TabMenu/TabMenu';\nimport AttributeCreator from '../../Attribute/AttributeCreator/AttributeCreator';\nimport Section from '../../Sections/Section';\nimport Input from '../../Form/Input';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Add from '../../Icons/Plus/Plus';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport AttributeGroup from '../../Attribute/AttributeGroup/AttributeGroup';\nimport ProfileDialog from '../../Dialog/ProfileDialog/ProfileDialog';\nimport Heart from '../../Icons/Heart/Heart';\nimport SectionEditor from '../../SectionEditor/SectionEditor';\nimport useProfileSections from '../../../hooks/profiles/useProfileSections';\n\nconst ProfileDetails = () => {\n  const { data, isLoading } = useProfiles().fetchProfiles;\n  const { profileKey } = useParams();\n  const [isOpenEdit, setIsOpenEdit] = useState(false);\n\n  const profileDef = data?.definitions.find((curr) => {\n    return curr.slug === profileKey;\n  });\n  const { data: sections } = useProfileSections({ profileId: profileDef?.profileId }).fetchAll;\n\n  const [activeSectionKey, setActiveSectionKey] = useState<string>(\n    sections?.length ? sections[0].sectionId : ''\n  );\n\n  if (isLoading) {\n    return <>Loading</>;\n  }\n  if (!data) {\n    return <>{t('no-data-found')}</>;\n  }\n\n  if (!profileDef) {\n    return <>Incorrect profile path</>;\n  }\n\n  const isCreateSection = activeSectionKey === 'new' || !sections?.length;\n\n  const activeSection = isCreateSection\n    ? undefined\n    : sections.find((sect) => {\n        return sect.sectionId === activeSectionKey;\n      }) || sections[0];\n\n  const tabItems = sections?.length\n    ? sections.map((sect, index) => {\n        return {\n          title: sect.name,\n          key: sect.sectionId,\n          isActive: activeSectionKey ? activeSectionKey === sect.sectionId : index === 0,\n        };\n      })\n    : [];\n\n  return (\n    <>\n      <PageMeta\n        icon={Heart}\n        title={profileDef.name}\n        actions={\n          <>\n            <ActionButton onClick={() => setIsOpenEdit(true)}>{t('Edit Profile')}</ActionButton>\n          </>\n        }\n        breadCrumbs={[{ href: '/owner/profile', title: 'My Profiles' }, { title: profileKey }]}\n      />\n      <TabMenu\n        className=\"mt-5\"\n        items={[\n          ...tabItems,\n          {\n            title: <Add className=\"h-5 w-5\" />,\n            key: 'new',\n            isActive: activeSectionKey ? activeSectionKey === 'new' : !sections?.length,\n            className: 'flex-grow-0',\n          },\n        ]}\n        onChange={(key) => {\n          setActiveSectionKey(key);\n        }}\n      />\n      {isCreateSection ? (\n        <ProfileSectionCreator\n          profileId={profileDef.profileId}\n          onCreate={(sectionId) => setActiveSectionKey(sectionId)}\n        />\n      ) : (\n        activeSection && (\n          <ProfileSectionEditor\n            section={activeSection}\n            profileId={profileDef.profileId}\n            key={activeSection.sectionId}\n          />\n        )\n      )}\n      <ProfileDialog\n        isOpen={isOpenEdit}\n        title={t('Edit Profile: ') + profileDef.name}\n        confirmText={t('Save')}\n        defaultValue={profileDef}\n        onCancel={() => {\n          setIsOpenEdit(false);\n        }}\n        onConfirm={() => {\n          setIsOpenEdit(false);\n        }}\n      />\n    </>\n  );\n};\n\nconst ProfileSectionCreator = ({\n  profileId,\n  onCreate,\n}: {\n  profileId: string;\n  onCreate: (sectionId: string) => void;\n}) => {\n  const {\n    fetchAll: { data: profileSections },\n    save: { mutateAsync: saveProfileSection, status: saveProfileSectionStatus },\n  } = useProfileSections({ profileId: profileId });\n  const [name, setName] = useState('');\n\n  const createSection: React.FormEventHandler<HTMLFormElement> = async (e) => {\n    e.preventDefault();\n\n    const sectionId = DataUtil.getNewId();\n\n    const newProfileSection = {\n      sectionId: sectionId,\n      attributes: [],\n      priority: profileSections?.length\n        ? Math.max(...profileSections.map((sect) => sect.priority)) + 1\n        : 1,\n      isSystemSection: false,\n      name: name,\n    };\n\n    await saveProfileSection({\n      profileId: profileId,\n      profileSection: newProfileSection,\n    });\n    onCreate(sectionId);\n  };\n\n  return (\n    <Section title=\"New: section\" isOpaqueBg={true}>\n      <form onSubmit={createSection}>\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Name')}</label>\n          <Input\n            id=\"name\"\n            name=\"sectionName\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            required\n          />\n        </div>\n        <div className=\"flex flex-row\">\n          <ActionButton className=\"ml-auto\" state={saveProfileSectionStatus}>\n            {t('Add section')}\n          </ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nconst ProfileSectionEditor = ({\n  section,\n  profileId,\n}: {\n  section: ProfileSection;\n  profileId: string;\n}) => {\n  const [{ data: attributes, isLoading }] = useAttributes({\n    profileId: profileId,\n    sectionId: section.sectionId,\n  });\n  const [isEditActive, setIsEditActive] = useState(false);\n\n  if (!attributes || isLoading) {\n    return <>Loading</>;\n  }\n\n  // Find unique types\n  const types: string[] = attributes.reduce((prevVal, curVal) => {\n    if (prevVal.indexOf(curVal.type) !== -1) {\n      return prevVal;\n    }\n    return [...prevVal, curVal.type];\n  }, [] as string[]);\n\n  // Find matching attributes for those types\n  const groupedAttributes = types.map((currType) => {\n    const matchingAttributes = attributes.filter((attr) => attr.type === currType);\n\n    return { name: matchingAttributes[0].typeDefinition.name, attributes: matchingAttributes };\n  });\n\n  return (\n    <div className=\"pt-5\">\n      {section ? (\n        isEditActive ? (\n          <SectionEditor\n            key={section.sectionId}\n            section={section}\n            profileId={profileId}\n            onClose={() => setIsEditActive(false)}\n          />\n        ) : (\n          <section className=\"items-center bg-slate-50 p-3 dark:bg-slate-800 sm:flex sm:flex-row\">\n            <p className=\"sm:mr-2\">{section.name}</p>\n            <ActionButton\n              type=\"secondary\"\n              className=\"ml-auto\"\n              onClick={() => setIsEditActive(true)}\n            >\n              {t('Edit Section')}\n            </ActionButton>\n          </section>\n        )\n      ) : null}\n      {attributes.length ? (\n        groupedAttributes.map((attrGroup) => {\n          return (\n            <AttributeGroup\n              groupTitle={attrGroup.name}\n              attributes={attrGroup.attributes}\n              key={attrGroup.name}\n            />\n          );\n        })\n      ) : (\n        <div className=\"py-5\">{t('section-empty-attributes')}</div>\n      )}\n      <AttributeCreator profileId={profileId} sectionId={section.sectionId} />\n    </div>\n  );\n};\n\nexport default ProfileDetails;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, Client, ProfileDefinition } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\nexport interface ProfileDefinitionVm extends ProfileDefinition {\n  slug: string;\n}\n\nconst useProfiles = () => {\n  const queryClient = useQueryClient();\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchProfiles = async () => {\n    const definitions = await (\n      await client.profileDefinitionProvider.getProfileDefinitions()\n    ).map((def) => {\n      return {\n        ...def,\n        slug: convertTextToSlug(def.name),\n      } as ProfileDefinitionVm;\n    });\n\n    return { definitions };\n  };\n\n  const saveProfile = async ({ profileDef }: { profileDef: ProfileDefinition }) => {\n    return await client.profileDefinitionProvider.saveProfileDefinition(profileDef);\n  };\n\n  return {\n    fetchProfiles: useQuery(['profiles'], () => fetchProfiles(), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n    saveProfile: useMutation(saveProfile, {\n      onSuccess: () => {\n        queryClient.invalidateQueries(['profiles']);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useProfiles;\n"],"names":["title","confirmText","isOpen","defaultValue","onConfirm","onCancel","target","usePortal","useProfiles","saveProfile","saveProfileDefinition","mutate","saveProfileDefinitionStatus","status","useState","newProfileDef","setNewProfileDef","dialog","onClose","onSubmit","e","preventDefault","console","log","profileDef","onSuccess","className","htmlFor","t","id","name","onChange","value","required","description","state","icon","type","onClick","createPortal","items","map","item","isActive","key","profileId","sectionId","setIsActive","attribute","setAttribute","useAttribute","save","saveAttribute","isLoading","isError","isSuccess","discard","undefined","Section","typeDefinition","isOpaqueBg","Select","typeId","targetObj","Object","values","AttributeDefinitions","find","curr","toString","priority","data","acl","requiredSecurityGroup","SecurityGroupType","setType","def","AttributeFields","newAttr","ActionButton","queryClient","useQueryClient","getSharedSecret","useAuth","client","Client","api","ApiType","sharedSecret","fetchSections","profileDefinitionProvider","getProfileSections","definitions","saveSection","profileSection","saveProfileSection","fetchAll","useQuery","refetchOnMount","refetchOnWindowFocus","useMutation","params","invalidateQueries","onError","ex","error","section","sectionData","setSectionData","useProfileSections","mutateAsync","saveSectionStatus","Input","newSectionData","ProfileSectionCreator","onCreate","profileSections","saveProfileSectionStatus","setName","createSection","DataUtil","newProfileSection","attributes","length","Math","max","sect","isSystemSection","ProfileSectionEditor","useAttributes","isEditActive","setIsEditActive","groupedAttributes","reduce","prevVal","curVal","indexOf","currType","matchingAttributes","filter","attr","attrGroup","AttributeGroup","groupTitle","fetchProfiles","profileKey","useParams","isOpenEdit","setIsOpenEdit","slug","sections","activeSectionKey","setActiveSectionKey","isCreateSection","activeSection","tabItems","index","PageMeta","Heart","actions","breadCrumbs","href","ProfileDialog","convertTextToSlug","text","split","join","toLowerCase","stringify","obj","keys","getProfileDefinitions"],"sourceRoot":""}