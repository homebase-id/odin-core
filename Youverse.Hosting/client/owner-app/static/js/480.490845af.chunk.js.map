{"version":3,"file":"static/js/480.490845af.chunk.js","mappings":"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","sources":["provider/connections/CircleMembershipProvider.ts","hooks/circle/useCircle.ts","provider/connections/CircleProvider.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { OwnerProviderBase } from '../OwnerProviderBase';\n\n//Handles management of Circles\nexport class CircleMembershipProvider extends OwnerProviderBase {\n  private static instance: CircleMembershipProvider;\n  private root = '/circles/connections/circles';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async add(membershipGrant: { dotYouId: string; circleId: string }) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/add';\n\n    return client\n      .post(url, membershipGrant)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async remove(membershipGrant: { dotYouId: string; circleId: string }) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/revoke';\n\n    return client\n      .post(url, membershipGrant)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async fetchMembers(circleId: string): Promise<string[]> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/list';\n\n    return client\n      .post(url, { circleId: circleId })\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  public static getInstance(sharedSecret): CircleMembershipProvider {\n    if (!CircleMembershipProvider.instance) {\n      CircleMembershipProvider.instance = new CircleMembershipProvider(sharedSecret);\n    }\n\n    return CircleMembershipProvider.instance;\n  }\n}\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { CircleMembershipProvider } from '../../provider/connections/CircleMembershipProvider';\nimport { CircleProvider } from '../../provider/connections/CircleProvider';\nimport {CircleDefinition} from \"../../provider/connections/CircleDataTypes\";\nimport useAuth from '../auth/useAuth';\n\nconst useCircle = ({ circleId }: { circleId?: string }) => {\n  const queryClient = useQueryClient();\n\n  const { getSharedSecret } = useAuth();\n  const circleProvider = CircleProvider.getInstance(getSharedSecret());\n  const circleMembershipProvider = CircleMembershipProvider.getInstance(getSharedSecret());\n\n  const fetch = async ({ circleId }: { circleId: string }) => {\n    if (!circleId) {\n      return;\n    }\n    return await circleProvider.getCircle(circleId);\n  };\n\n  const fetchMembers = async ({ circleId }: { circleId: string }) => {\n    if (!circleId) {\n      return;\n    }\n    return await circleMembershipProvider.fetchMembers(circleId);\n  };\n\n  const createOrUpdate = async (circleDefinition: CircleDefinition) => {\n    if (circleDefinition.id) {\n      return await circleProvider.updateDefinition(circleDefinition);\n    } else {\n      return await circleProvider.createDefinition(circleDefinition);\n    }\n  };\n\n  const disableCircle = async ({ circleId }: { circleId: string }) => {\n    return await circleProvider.disableCircle(circleId);\n  };\n\n  const enableCircle = async ({ circleId }: { circleId: string }) => {\n    return await circleProvider.enableCircle(circleId);\n  };\n\n  const provideGrants = async ({\n    circleId,\n    dotYouIds,\n  }: {\n    circleId: string;\n    dotYouIds: string[];\n  }) => {\n    return await Promise.all(\n      dotYouIds.map(\n        async (dotYouId) =>\n          await circleMembershipProvider.add({ circleId: circleId, dotYouId: dotYouId })\n      )\n    );\n  };\n\n  const revokeGrants = async ({\n    circleId,\n    dotYouIds,\n  }: {\n    circleId: string;\n    dotYouIds: string[];\n  }) => {\n    return await Promise.all(\n      dotYouIds.map(\n        async (dotYouId) =>\n          await circleMembershipProvider.remove({ circleId: circleId, dotYouId: dotYouId })\n      )\n    );\n  };\n\n  const provideGrant = async ({ circleId, dotYouId }: { circleId: string; dotYouId: string }) => {\n    return await circleMembershipProvider.add({ circleId: circleId, dotYouId: dotYouId });\n  };\n\n  const revokeGrant = async ({ circleId, dotYouId }: { circleId: string; dotYouId: string }) => {\n    return await circleMembershipProvider.remove({ circleId: circleId, dotYouId: dotYouId });\n  };\n\n  const removeCircle = async ({ circleId }: { circleId: string }) => {\n    return await circleProvider.removeCircle(circleId);\n  };\n\n  return {\n    fetch: useQuery(['circle', circleId], () => fetch({ circleId }), {\n      refetchOnWindowFocus: false,\n    }),\n\n    fetchMembers: useQuery(['cirleMembers', circleId], () => fetchMembers({ circleId }), {\n      refetchOnWindowFocus: false,\n    }),\n\n    createOrUpdate: useMutation(createOrUpdate, {\n      onMutate: async (newCircle) => {\n        await queryClient.cancelQueries(['circle', newCircle.id]);\n\n        // Update single attribute\n        const previousCircle = queryClient.getQueryData(['circle', newCircle.id]);\n        queryClient.setQueryData(['circle', newCircle.id], newCircle);\n\n        // Update section attributes\n        const previousCircles: CircleDefinition[] = queryClient.getQueryData(['circles']);\n        const newCircles = previousCircles.map((circle) =>\n          circle.id === newCircle.id ? newCircle : circle\n        );\n        queryClient.setQueryData(['circles'], newCircles);\n\n        return { previousCircle, newCircle, previousCircles };\n      },\n      onError: (err, newCircle, context) => {\n        console.error(err);\n\n        // Revert local caches to what they were\n        queryClient.setQueryData(['circle', newCircle.id], context.previousCircle);\n        queryClient.setQueryData(['circles'], context.previousCircles);\n      },\n      onSettled: (newCircle) => {\n        queryClient.invalidateQueries(['circles']);\n        if (newCircle?.id) {\n          queryClient.invalidateQueries(['circle', newCircle.id]);\n        }\n      },\n    }),\n\n    disableCircle: useMutation(disableCircle, {\n      onSuccess: (data, params) => {\n        queryClient.invalidateQueries(['circles']);\n        if (params?.circleId) {\n          queryClient.invalidateQueries(['circle', params.circleId]);\n        }\n      },\n    }),\n    enableCircle: useMutation(enableCircle, {\n      onSuccess: (data, params) => {\n        queryClient.invalidateQueries(['circles']);\n        if (params?.circleId) {\n          queryClient.invalidateQueries(['circle', params.circleId]);\n        }\n      },\n    }),\n\n    provideGrants: useMutation(provideGrants, {\n      onSuccess: async (data, param) => {\n        queryClient.invalidateQueries(['circles']);\n        queryClient.invalidateQueries(['circle', circleId]);\n        queryClient.invalidateQueries(['cirleMembers', circleId]);\n        await Promise.all(\n          param.dotYouIds.map(async (dotYouId) => {\n            return await queryClient.invalidateQueries(['connectionInfo', dotYouId]);\n          })\n        );\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    revokeGrants: useMutation(revokeGrants, {\n      onSuccess: async (data, param) => {\n        queryClient.invalidateQueries(['circles']);\n        queryClient.invalidateQueries(['circle', circleId]);\n        queryClient.invalidateQueries(['cirleMembers', circleId]);\n        await Promise.all(\n          param.dotYouIds.map(async (dotYouId) => {\n            return await queryClient.invalidateQueries(['connectionInfo', dotYouId]);\n          })\n        );\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    provideGrant: useMutation(provideGrant, {\n      onSuccess: async (data, param) => {\n        queryClient.invalidateQueries(['circles']);\n        queryClient.invalidateQueries(['circle', circleId]);\n        queryClient.invalidateQueries(['cirleMembers', circleId]);\n        queryClient.invalidateQueries(['connectionInfo', param.dotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    revokeGrant: useMutation(revokeGrant, {\n      onSuccess: async (data, param) => {\n        queryClient.invalidateQueries(['circles']);\n        queryClient.invalidateQueries(['circle', circleId]);\n        queryClient.invalidateQueries(['cirleMembers', circleId]);\n        queryClient.invalidateQueries(['connectionInfo', param.dotYouId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n\n    removeCircle: useMutation(removeCircle, {\n      onSuccess: async (data, param) => {\n        queryClient.invalidateQueries(['circles']);\n        queryClient.invalidateQueries(['circle', param.circleId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useCircle;\n","import { CircleDefinition } from './CircleDataTypes';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\n//Handles management of Circles\nexport class CircleProvider extends OwnerProviderBase {\n  private static instance: CircleProvider;\n  private root = '/circles/definitions';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw 'Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  async updateDefinition(circleDefinition: CircleDefinition) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/update';\n\n    const data = { ...circleDefinition };\n    data.driveGrants = data.driveGrants || [];\n\n    return client\n      .post(url, data)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async createDefinition(circleDefinition: CircleDefinition) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/create';\n\n    return client\n      .post(url, circleDefinition)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  parsePermissions(permission: unknown) {\n    if (typeof permission !== 'string') {\n      return permission;\n    }\n\n    const lowered = permission.toLowerCase();\n\n    return lowered === 'read'\n      ? 2\n      : lowered === 'write'\n      ? 4\n      : lowered === 'readwrite'\n      ? 5\n      : permission;\n  }\n\n  async getCircles(): Promise<CircleDefinition[]> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/list';\n\n    return client\n      .get(url)\n      .then((response) => {\n        return response.data.map((circleDef) => {\n          circleDef.driveGrants = circleDef.driveGrants?.map((grant) => {\n            return {\n              permissionedDrive: {\n                ...grant.permissionedDrive,\n                permission: this.parsePermissions(grant.permissionedDrive.permission),\n              },\n            };\n          });\n\n          return circleDef;\n        });\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async getCircle(circleId: string): Promise<CircleDefinition> {\n    const client = super.createAxiosClient();\n    const url = this.root + '/circle';\n\n    return client\n      .post(url, circleId)\n      .then((response) => {\n        return response.data;\n      })\n      .then((circleDef) => {\n        // Parse string permissionflags to number representations\n        circleDef.driveGrants = circleDef.driveGrants?.map((grant) => {\n          return {\n            permissionedDrive: {\n              ...grant.permissionedDrive,\n              permission: this.parsePermissions(grant.permissionedDrive.permission),\n            },\n          };\n        });\n        return circleDef;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async disableCircle(circleId: string) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/disable';\n\n    return client\n      .post(url, circleId)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async enableCircle(circleId: string) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/enable';\n\n    return client\n      .post(url, circleId)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  async removeCircle(circleId: string) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/delete';\n\n    return client\n      .post(url, circleId)\n      .then((response) => {\n        return response.data;\n      })\n      .catch(super.handleErrorResponse);\n  }\n\n  public static getInstance(sharedSecret): CircleProvider {\n    if (!CircleProvider.instance) {\n      CircleProvider.instance = new CircleProvider(sharedSecret);\n    }\n\n    return CircleProvider.instance;\n  }\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["CircleMembershipProvider","sharedSecret","root","membershipGrant","client","url","this","post","then","response","data","catch","circleId","instance","OwnerProviderBase","queryClient","useQueryClient","getSharedSecret","useAuth","circleProvider","CircleProvider","circleMembershipProvider","getInstance","fetch","getCircle","fetchMembers","createOrUpdate","circleDefinition","id","updateDefinition","createDefinition","disableCircle","enableCircle","provideGrants","dotYouIds","Promise","all","map","dotYouId","add","revokeGrants","remove","provideGrant","revokeGrant","removeCircle","useQuery","refetchOnWindowFocus","useMutation","onMutate","newCircle","cancelQueries","previousCircle","getQueryData","setQueryData","previousCircles","newCircles","circle","onError","err","context","console","error","onSettled","invalidateQueries","onSuccess","params","param","ex","driveGrants","permission","lowered","toLowerCase","get","circleDef","grant","permissionedDrive","parsePermissions","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}