{"version":3,"file":"static/js/361.0f92b3ff.chunk.js","mappings":"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","sources":["components/TabMenu/TabMenu.tsx","components/Attribute/AttributeCreator/AttributeCreator.tsx","components/Templates/Profile/Profile.tsx","helpers/common.ts","hooks/profiles/useProfiles.ts"],"sourcesContent":["import { FC, ReactNode } from 'react';\n\ninterface TabmenuProps {\n  className?: string;\n  items: { title: ReactNode; key: string; isActive: boolean; className?: string }[];\n  onChange: (key: string) => void;\n}\n\nconst TabMenu: FC<TabmenuProps> = ({ className, items, onChange }) => {\n  return (\n    <div className={`flex ${className}`}>\n      {items.map((item) => {\n        return (\n          // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n          <a\n            className={`flex-grow cursor-pointer border-b-2 py-2 px-1 text-lg ${\n              item.isActive\n                ? 'border-indigo-500 text-indigo-500 dark:text-indigo-400'\n                : 'border-gray-300 transition-colors duration-300 hover:border-indigo-400 dark:border-gray-800 hover:dark:border-indigo-600'\n            } ${item.className ?? ''}`}\n            key={item.key}\n            onClick={() => {\n              onChange(item.key);\n            }}\n          >\n            {item.title}\n          </a>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TabMenu;\n","import {\n  AttributeDefinition,\n  AttributeDefinitions,\n  AttributeFile,\n  SecurityGroupType,\n} from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useAttribute from '../../../hooks/profiles/useAttribute';\nimport { AttributeVm } from '../../../hooks/profiles/useAttributes';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Select from '../../Form/Select';\nimport Section from '../../Sections/Section';\nimport AttributeFields from '../AttributeFields/AttributeFields';\n\nconst AttributeCreator = ({ profileId, sectionId }: { profileId: string; sectionId: string }) => {\n  const [isActive, setIsActive] = useState(false);\n  const [attribute, setAttribute] = useState<AttributeVm>();\n  const [, { mutate: saveAttribute, isLoading, isError, isSuccess }] = useAttribute({});\n\n  const setType = (typeId: string) => {\n    const targetObj = Object.values(AttributeDefinitions).find(\n      (curr) => curr.type.toString() === typeId\n    ) as AttributeDefinition;\n\n    setAttribute({\n      id: '',\n      type: typeId,\n      sectionId: sectionId,\n      priority: -1,\n      data: {},\n      typeDefinition: targetObj,\n      profileId: profileId,\n      acl: { requiredSecurityGroup: SecurityGroupType.Owner },\n    });\n  };\n\n  const changeHandler: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement> = (e) => {\n    if (!attribute) {\n      // attribute selection failed on type selection...\n      return;\n    }\n\n    const newAttr: AttributeVm = { ...attribute };\n    newAttr.data[e.target.name] = e.target.value;\n\n    setAttribute(newAttr);\n  };\n\n  const saveNewData = () => {\n    console.log(attribute);\n    saveAttribute(attribute as AttributeFile, {\n      onSuccess: () => {\n        discard();\n      },\n    });\n  };\n\n  const discard = () => {\n    setIsActive(false);\n    setAttribute(undefined);\n  };\n\n  return (\n    <>\n      {isActive ? (\n        <Section\n          title={`New${attribute ? ':' : ''} ${attribute?.typeDefinition.name ?? ''}`}\n          isOpaqueBg={true}\n        >\n          {attribute === undefined ? (\n            <div className=\"mb-5\">\n              <label htmlFor=\"type\">{t('Attribute Type')}</label>\n              <Select\n                id=\"type\"\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option>{t('Make a selection')}</option>\n                {Object.values(AttributeDefinitions).map((def) => {\n                  return (\n                    <option value={def.type.toString()} key={def.type.toString()}>\n                      {def.name}\n                    </option>\n                  );\n                })}\n              </Select>\n            </div>\n          ) : (\n            <AttributeFields attribute={attribute} onChange={changeHandler} />\n          )}\n          <div className=\"flex flex-row\">\n            <ActionButton type=\"secondary\" className=\"ml-auto\" onClick={discard}>\n              {t('Cancel')}\n            </ActionButton>\n            <ActionButton\n              type=\"primary\"\n              icon=\"plus\"\n              className=\"ml-2\"\n              onClick={saveNewData}\n              state={isLoading ? 'loading' : isSuccess ? 'success' : isError ? 'failed' : undefined}\n            >\n              {t('Add')}\n            </ActionButton>\n          </div>\n        </Section>\n      ) : (\n        <div className=\"flex flex-row\">\n          <ActionButton\n            type=\"primary\"\n            icon=\"plus\"\n            className=\"mx-auto min-w-[9rem]\"\n            onClick={() => setIsActive(true)}\n          >\n            {t('Add Attribute')}\n          </ActionButton>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AttributeCreator;\n","import { ProfileDefinition, ProfileSection } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport useAttributes from '../../../hooks/profiles/useAttributes';\nimport useProfiles from '../../../hooks/profiles/useProfiles';\n\nimport TabMenu from '../../TabMenu/TabMenu';\nimport AttributeCreator from '../../Attribute/AttributeCreator/AttributeCreator';\nimport Section from '../../Sections/Section';\nimport Input from '../../Form/Input';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Add from '../../Icons/Plus/Plus';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport AttributeGroup from '../../Attribute/AttributeGroup/AttributeGroup';\n\nconst Profile = () => {\n  const { data, isLoading } = useProfiles();\n  const { profileKey } = useParams();\n\n  const profileDef = data?.definitions.find((curr) => {\n    return curr.slug === profileKey;\n  });\n\n  const [activeSectionKey, setActiveSectionKey] = useState<string>(\n    profileDef?.sections ? profileDef.sections[0].sectionId : ''\n  );\n\n  if (isLoading) {\n    return <>Loading</>;\n  }\n  if (!data) {\n    return <>{t('no-data-found')}</>;\n  }\n\n  if (!profileDef) {\n    return <>Incorrect profile path</>;\n  }\n\n  const activeSection =\n    activeSectionKey === 'new'\n      ? undefined\n      : profileDef.sections.find((sect) => {\n          return sect.sectionId === activeSectionKey;\n        }) || profileDef.sections[0];\n\n  return (\n    <>\n      <PageMeta title={profileDef.name} />\n      <TabMenu\n        className=\"mt-5\"\n        items={[\n          ...profileDef.sections.map((sect, index) => {\n            return {\n              title: sect.name,\n              key: sect.sectionId,\n              isActive: activeSectionKey ? activeSectionKey === sect.sectionId : index === 0,\n            };\n          }),\n          {\n            title: <Add className=\"h-5 w-5\" />,\n            key: 'new',\n            isActive: activeSectionKey ? activeSectionKey === 'new' : !profileDef.sections.length,\n            className: 'flex-grow-0',\n          },\n        ]}\n        onChange={(key) => {\n          setActiveSectionKey(key);\n        }}\n      />\n      {activeSectionKey === 'new' ? (\n        <ProfileSectionCreator profileDefinition={profileDef} />\n      ) : (\n        activeSection && (\n          <ProfileSectionEditor\n            section={activeSection}\n            profileId={profileDef.profileId}\n            key={activeSection.sectionId}\n          />\n        )\n      )}\n    </>\n  );\n};\n\nconst ProfileSectionCreator = ({ profileDefinition }: { profileDefinition: ProfileDefinition }) => {\n  const [name, setName] = useState('');\n\n  const createSection: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    const newProfileSection = {\n      sectionId: '',\n      attributes: [],\n      priority: Math.max(...profileDefinition.sections.map((sect) => sect.priority)) + 1,\n      isSystemSection: false,\n      name: name,\n    };\n\n    const newProfileDef: ProfileDefinition = { ...profileDefinition };\n    newProfileDef.sections.push(newProfileSection);\n\n    console.log('Should create: ', newProfileDef);\n\n    return false;\n  };\n\n  return (\n    <Section title=\"New: section\" isOpaqueBg={true}>\n      <form onSubmit={createSection}>\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Name')}</label>\n          <Input\n            id=\"name\"\n            name=\"sectionName\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            required\n          />\n        </div>\n        <div className=\"flex flex-row\">\n          <ActionButton className=\"ml-auto\">{t('add section')}</ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nconst ProfileSectionEditor = ({\n  section,\n  profileId,\n}: {\n  section: ProfileSection;\n  profileId: string;\n}) => {\n  const [{ data: attributes, isLoading }] = useAttributes({\n    profileId: profileId,\n    sectionId: section.sectionId,\n  });\n\n  if (!attributes || isLoading) {\n    return <>Loading</>;\n  }\n\n  // Find unique types\n  const types: string[] = attributes.reduce((prevVal, curVal) => {\n    if (prevVal.indexOf(curVal.type) !== -1) {\n      return prevVal;\n    }\n    return [...prevVal, curVal.type];\n  }, [] as string[]);\n\n  // Find matching attributes for those types\n  const groupedAttributes = types.map((currType) => {\n    const matchingAttributes = attributes.filter((attr) => attr.type === currType);\n\n    return { name: matchingAttributes[0].typeDefinition.name, attributes: matchingAttributes };\n  });\n\n  return (\n    <>\n      {attributes.length ? (\n        groupedAttributes.map((attrGroup) => {\n          return (\n            <AttributeGroup\n              groupTitle={attrGroup.name}\n              attributes={attrGroup.attributes}\n              key={attrGroup.name}\n            />\n          );\n        })\n      ) : (\n        <div className=\"py-5\">{t('section-empty-attributes')}</div>\n      )}\n      <AttributeCreator profileId={profileId} sectionId={section.sectionId} />\n    </>\n  );\n};\n\nexport default Profile;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, Client, ProfileDefinition } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\ninterface ProfileDefinitionVm extends ProfileDefinition {\n  slug: string;\n}\n\nconst useProfiles = () => {\n  const { getSharedSecret } = useAuth();\n  const fetchData = async () => {\n    const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n    const definitions = await (\n      await client.profileDefinitionProvider.getProfileDefinitions()\n    ).map((def) => {\n      return {\n        ...def,\n        slug: convertTextToSlug(def.name),\n      } as ProfileDefinitionVm;\n    });\n\n    return { definitions };\n  };\n\n  return useQuery(['profiles'], () => fetchData(), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport default useProfiles;\n"],"names":["className","items","onChange","map","item","isActive","onClick","key","title","profileId","sectionId","useState","setIsActive","attribute","setAttribute","useAttribute","saveAttribute","mutate","isLoading","isError","isSuccess","discard","undefined","Section","typeDefinition","name","isOpaqueBg","htmlFor","t","Select","id","e","typeId","targetObj","Object","values","AttributeDefinitions","find","curr","type","toString","priority","data","acl","requiredSecurityGroup","SecurityGroupType","setType","target","value","def","AttributeFields","newAttr","ActionButton","icon","console","log","onSuccess","state","ProfileSectionCreator","profileDefinition","setName","onSubmit","preventDefault","newProfileSection","attributes","Math","max","sections","sect","isSystemSection","newProfileDef","push","Input","required","ProfileSectionEditor","section","useAttributes","groupedAttributes","reduce","prevVal","curVal","indexOf","currType","matchingAttributes","filter","attr","length","attrGroup","AttributeGroup","groupTitle","useProfiles","profileKey","useParams","profileDef","definitions","slug","activeSectionKey","setActiveSectionKey","activeSection","PageMeta","index","convertTextToSlug","text","split","join","toLowerCase","stringify","obj","keys","getSharedSecret","useAuth","fetchData","client","Client","api","ApiType","sharedSecret","profileDefinitionProvider","getProfileDefinitions","useQuery","refetchOnMount","refetchOnWindowFocus"],"sourceRoot":""}