{"version":3,"file":"static/js/500.bd27ad9f.chunk.js","mappings":"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","sources":["helpers/common.ts","hooks/blogs/useChannel.ts","hooks/profiles/useAttributes.ts","hooks/profiles/useHomeAttributes.ts","provider/file/FileProvider.ts","hooks/staticFiles/useStaticFiles.ts"],"sourcesContent":["export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, ChannelDefinition, Client } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\nimport useStaticFiles from '../staticFiles/useStaticFiles';\nimport { ChannelDefinitionVm } from './useChannels';\n\nconst useChannel = ({ channelId }: { channelId?: string } = {}) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const queryClient = useQueryClient();\n  const { mutate: publishStaticFiles } = useStaticFiles().publish;\n\n  const fetchData = async (channelId?: string) => {\n    if (!channelId) {\n      return;\n    }\n    const foundAttribute = await client.blogDefinitionProvider.getChannelDefinition(channelId);\n\n    return foundAttribute;\n  };\n\n  const saveData = async (channelDef: ChannelDefinition) => {\n    await client.blogDefinitionProvider.saveChannelDefinition(channelDef);\n  };\n\n  const removeChannel = async (channelDef: ChannelDefinition) => {\n    await client.blogDefinitionProvider.removeChannelDefinition(channelDef.channelId);\n  };\n\n  return {\n    fetch: useQuery(['channel', channelId], () => fetchData(channelId), {\n      refetchOnWindowFocus: false,\n    }),\n    save: useMutation(saveData, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.channelId) {\n          queryClient.removeQueries(['channel', variables.channelId]);\n        } else {\n          queryClient.removeQueries(['channel']);\n        }\n        queryClient.removeQueries(['channels']);\n\n        publishStaticFiles();\n      },\n    }),\n    remove: useMutation(removeChannel, {\n      onMutate: async (toRemoveChannel) => {\n        await queryClient.cancelQueries(['channels']);\n\n        const previousChannels: ChannelDefinitionVm[] = queryClient.getQueryData(['channels']);\n        const newChannels = previousChannels.filter(\n          (channel) => channel.channelId !== toRemoveChannel.channelId\n        );\n\n        queryClient.setQueryData(['channels'], newChannels);\n\n        return { previousChannels, toRemoveChannel };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['channels'], context.previousChannels);\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['channels']);\n      },\n    }),\n  };\n};\n\nexport default useChannel;\n","import { QueryClient, useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  ApiType,\n  AttributeDefinition,\n  AttributeDefinitions,\n  AttributeFile,\n  Client,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nexport interface AttributeVm extends AttributeFile {\n  typeDefinition: AttributeDefinition;\n}\n\nconst useAttributes = ({ profileId, sectionId }: { profileId?: string; sectionId?: string }) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const queryClient = useQueryClient();\n\n  const fetchData = async (profileId: string, sectionId: string) => {\n    if (!profileId || !sectionId) {\n      return;\n    }\n\n    const foundAttributes = await client.profileDataProvider.getProfileAttributes(\n      profileId,\n      sectionId,\n      100\n    );\n\n    return foundAttributes.map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: Object.values(AttributeDefinitions).find((def) => {\n          return def.type.toString() === attr.type;\n        }),\n      } as AttributeVm;\n    });\n  };\n\n  const removeAttributes = async ({\n    profileId,\n    sectionId,\n  }: {\n    profileId: string;\n    sectionId: string;\n  }) => {\n    if (!profileId || !sectionId) {\n      return;\n    }\n\n    const foundAttributes = await client.profileDataProvider.getProfileAttributes(\n      profileId,\n      sectionId,\n      100\n    );\n\n    return await Promise.all(\n      foundAttributes.map(async (attr) =>\n        client.profileDataProvider.removeAttribute(profileId, attr.fileId)\n      )\n    );\n  };\n\n  return {\n    fetch: useQuery(['attributes', profileId, sectionId], () => fetchData(profileId, sectionId), {\n      refetchOnWindowFocus: false,\n    }),\n    removeAttributes: useMutation(removeAttributes, {\n      onError: (err) => {\n        console.error(err);\n      },\n      onSettled: (data, err, variables) => {\n        queryClient.invalidateQueries(['attributes', variables.profileId, variables.sectionId]);\n      },\n    }),\n  };\n};\n\nexport default useAttributes;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, Client, HomePageAttributes } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useHomeAttributes = () => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n  const fetchData = async () => {\n    const foundHomettributes = (\n      await client.homePageProvider.getAttributes(HomePageAttributes.HomePage.toString())\n    ).map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: {\n          type: HomePageAttributes.HomePage.toString(),\n          name: 'Home Page',\n          description: '',\n        },\n      };\n    });\n\n    const foundThemeAttributes = (\n      await client.homePageProvider.getAttributes(HomePageAttributes.Theme.toString())\n    ).map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: {\n          type: HomePageAttributes.Theme.toString(),\n          name: 'Theme',\n          description: '',\n        },\n      };\n    });\n\n    return { home: foundHomettributes, theme: foundThemeAttributes };\n  };\n\n  return {\n    fetch: useQuery(['homeAtrributes'], () => fetchData(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useHomeAttributes;\n","import { ApiType, DataUtil, FileQueryParams, ProviderBase } from '@youfoundation/transit-lib';\n\nexport class FileProvider extends ProviderBase {\n  private static instance: FileProvider;\n\n  constructor(sharedSecret: Uint8Array) {\n    super({ api: ApiType.Owner, sharedSecret: sharedSecret });\n  }\n\n  publishFile = async (fileName: string, sections: QueryParamsSection[]) => {\n    const httpClient = this.createAxiosClient();\n\n    const fileRequest: PublishStaticFileRequest = {\n      filename: fileName,\n      config: {\n        crossOriginalBehavior: 'AllowAllOrigins',\n        contentType: 'string',\n      },\n      sections: sections.map((section) => {\n        return {\n          ...section,\n          queryParams: fixQueryParams(section.queryParams),\n        };\n      }),\n    };\n\n    return await httpClient.post('/optimization/cdn/publish', fileRequest);\n  };\n\n  public static getInstance(sharedSecret): FileProvider {\n    if (!FileProvider.instance) {\n      FileProvider.instance = new FileProvider(sharedSecret);\n    }\n\n    return FileProvider.instance;\n  }\n}\n\nconst fixQueryParams = (params: FileQueryParams): FileQueryParams => {\n  params = { ...params };\n  //HACK; convert all strings to byte arrays as base64 values; this is for a test\n\n  //HACK: until we decide where to handle byte arrays\n  if (params.tagsMatchAtLeastOne)\n    params.tagsMatchAtLeastOne = params.tagsMatchAtLeastOne.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n  if (params.tagsMatchAll)\n    params.tagsMatchAll = params.tagsMatchAll.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n  if (params.sender)\n    params.sender = params.sender.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n\n  return params;\n};\n\ntype QueryParamsSection = {\n  name: string;\n  queryParams: FileQueryParams;\n  resultOptions: {\n    includeAdditionalThumbnails: boolean;\n    includeJsonContent: boolean;\n    includePayload: boolean;\n    excludePreviewThumbnail: boolean;\n  };\n};\n\ntype PublishStaticFileRequest = {\n  filename: string;\n  config: { crossOriginalBehavior: 'Default' | 'AllowAllOrigins'; contentType: string };\n  sections: QueryParamsSection[];\n};\n","import { useMutation } from '@tanstack/react-query';\nimport {\n  ApiType,\n  AttributeConfig,\n  AttributeDefinitions,\n  BlogConfig,\n  BuiltInProfiles,\n  Client,\n  FileQueryParams,\n  getBlogMasterContentTargetDrive,\n  getTargetDriveFromProfileId,\n  HomePageAttributes,\n  HomePageConfig,\n  ProfileConfig,\n  SecurityGroupType,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport { FileProvider } from '../../provider/file/FileProvider';\nimport useAuth from '../auth/useAuth';\nimport useAttributes from '../profiles/useAttributes';\nimport useHomeAttributes from '../profiles/useHomeAttributes';\n\nconst useStaticFiles = () => {\n  const { getSharedSecret } = useAuth();\n  const { data: homeAtrributes } = useHomeAttributes().fetch;\n  const { data: profileAttributes } = useAttributes({\n    profileId: BuiltInProfiles.StandardProfileId.toString(),\n    sectionId: BuiltInProfiles.PersonalInfoSectionId.toString(),\n  }).fetch;\n\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const publishData = async () => {\n    const fileProvider = FileProvider.getInstance(getSharedSecret());\n\n    const publishProfile = async () => {\n      const homepageDrive: TargetDrive = {\n        alias: HomePageConfig.DefaultDriveId.toString(),\n        type: ProfileConfig.ProfileDriveType.toString(),\n      };\n\n      const profileDrive: TargetDrive = {\n        alias: BuiltInProfiles.StandardProfileId.toString(),\n        type: ProfileConfig.ProfileDriveType.toString(),\n      };\n\n      const personalInfoNameQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAll: [\n          BuiltInProfiles.PersonalInfoSectionId.toString(),\n          AttributeDefinitions.Name.type.toString(),\n        ],\n      };\n\n      const personalInfoPhotoQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAll: [\n          BuiltInProfiles.PersonalInfoSectionId.toString(),\n          AttributeDefinitions.Photo.type.toString(),\n        ],\n      };\n\n      const SocialQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [BuiltInProfiles.ExternalLinksSectionId.toString()],\n      };\n\n      const themeFileQueryParam: FileQueryParams = {\n        targetDrive: homepageDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [HomePageAttributes.Theme.toString()],\n      };\n\n      const bioFileQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [AttributeDefinitions.FullBio.type.toString()],\n      };\n\n      const linkFileQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [AttributeDefinitions.Link.type.toString()],\n      };\n\n      const homeFileQueryParam: FileQueryParams = {\n        targetDrive: homepageDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [HomePageAttributes.HomePage.toString()],\n      };\n\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const sections = [\n        {\n          name: 'socials',\n          queryParams: SocialQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'name',\n          queryParams: personalInfoNameQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'photo',\n          queryParams: personalInfoPhotoQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'bio',\n          queryParams: bioFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'link',\n          queryParams: linkFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'theme',\n          queryParams: themeFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'home',\n          queryParams: homeFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n      ];\n\n      const publicSections = [\n        {\n          name: 'name',\n          queryParams: personalInfoNameQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'photo',\n          queryParams: personalInfoPhotoQueryParam,\n          resultOptions: baseResultOptions,\n        },\n      ];\n\n      // Image fileId's discovery:\n      const homeFileId = homeAtrributes.home[0]?.data['headerImageUrl'];\n      const homeTargetDrive = getTargetDriveFromProfileId(HomePageConfig.DefaultDriveId.toString());\n      const headerImageQueryParam: FileQueryParams = {\n        targetDrive: homeTargetDrive,\n        fileType: [0],\n        tagsMatchAtLeastOne: [homeFileId],\n      };\n\n      if (homeFileId) {\n        sections.push({\n          name: homeFileId,\n          queryParams: headerImageQueryParam,\n          resultOptions: baseResultOptions,\n        });\n      }\n\n      const profilePhotoFileId = profileAttributes?.find(\n        (attr) =>\n          attr.acl.requiredSecurityGroup === SecurityGroupType.Anonymous &&\n          attr.type === AttributeDefinitions.Photo.type.toString()\n      )?.data?.['profileImageId'];\n      const profileTargetDrive = getTargetDriveFromProfileId(\n        BuiltInProfiles.StandardProfileId.toString()\n      );\n      const profilePhotoQueryParams: FileQueryParams = {\n        targetDrive: profileTargetDrive,\n        fileType: [0],\n        tagsMatchAtLeastOne: [profilePhotoFileId],\n      };\n\n      if (profilePhotoFileId) {\n        sections.push({\n          name: profilePhotoFileId,\n          queryParams: profilePhotoQueryParams,\n          resultOptions: baseResultOptions,\n        });\n\n        publicSections.push({\n          name: profilePhotoFileId,\n          queryParams: profilePhotoQueryParams,\n          resultOptions: {\n            ...baseResultOptions,\n            includeAdditionalThumbnails: true,\n          },\n        });\n      }\n\n      return await Promise.all([\n        await fileProvider.publishFile('profile.json', sections),\n        await fileProvider.publishFile('public.json', publicSections),\n      ]);\n    };\n\n    const publishChannels = async () => {\n      const blogMasterDrive = getBlogMasterContentTargetDrive();\n\n      const channelQueryParams: FileQueryParams = {\n        targetDrive: blogMasterDrive,\n        fileType: [BlogConfig.BlogChannelDefinitionFileType],\n      };\n\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const sections = [\n        {\n          name: 'channels',\n          queryParams: channelQueryParams,\n          resultOptions: baseResultOptions,\n        },\n      ];\n\n      return await fileProvider.publishFile('channels.json', sections);\n    };\n\n    const publishBlog = async () => {\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const channels = await client.blogDefinitionProvider.getChannelDefinitions();\n      const sections = channels.map((channel) => {\n        const channelDrive: TargetDrive = {\n          alias: channel.channelId,\n          type: BlogConfig.ChannelDriveType.toString(),\n        };\n\n        const blogOnChannelQuery: FileQueryParams = {\n          targetDrive: channelDrive,\n          fileType: [BlogConfig.BlogPostFileType],\n        };\n\n        return {\n          name: channel.channelId,\n          queryParams: blogOnChannelQuery,\n          resultOptions: baseResultOptions,\n        };\n      });\n\n      const imageSections = (\n        await client.blogPostReadonlyProvider.getRecentPosts('Article', channels.length * 6)\n      ).map((blog) => {\n        const params: FileQueryParams = {\n          targetDrive: client.blogDefinitionProvider.getPublishChannelDrive(blog.channelId),\n          fileType: [0],\n          tagsMatchAtLeastOne: [blog.primaryImageFileId],\n        };\n\n        return {\n          name: blog.primaryImageFileId,\n          queryParams: params,\n          resultOptions: baseResultOptions,\n        };\n      });\n\n      return await fileProvider.publishFile('blogs.json', [...sections, ...imageSections]);\n    };\n\n    await publishProfile();\n    await publishChannels();\n    await publishBlog();\n  };\n\n  return {\n    publish: useMutation(publishData, {\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useStaticFiles;\n"],"names":["convertTextToSlug","text","split","join","toLowerCase","stringify","obj","Object","keys","map","key","channelId","useAuth","getSharedSecret","client","Client","api","ApiType","sharedSecret","queryClient","useQueryClient","publishStaticFiles","useStaticFiles","publish","mutate","fetchData","blogDefinitionProvider","getChannelDefinition","foundAttribute","saveData","channelDef","saveChannelDefinition","removeChannel","removeChannelDefinition","fetch","useQuery","refetchOnWindowFocus","save","useMutation","onSuccess","_data","variables","removeQueries","remove","onMutate","toRemoveChannel","cancelQueries","previousChannels","getQueryData","newChannels","filter","channel","setQueryData","onError","err","newData","context","console","error","onSettled","invalidateQueries","profileId","sectionId","profileDataProvider","getProfileAttributes","foundAttributes","attr","typeDefinition","values","AttributeDefinitions","find","def","type","toString","removeAttributes","Promise","all","removeAttribute","fileId","data","homePageProvider","getAttributes","HomePageAttributes","foundHomettributes","name","description","foundThemeAttributes","home","theme","FileProvider","publishFile","fileName","sections","httpClient","createAxiosClient","fileRequest","filename","config","crossOriginalBehavior","contentType","section","queryParams","fixQueryParams","post","instance","ProviderBase","params","tagsMatchAtLeastOne","v","DataUtil","tagsMatchAll","sender","homeAtrributes","useHomeAttributes","profileAttributes","useAttributes","BuiltInProfiles","publishData","fileProvider","getInstance","publishProfile","homepageDrive","alias","HomePageConfig","ProfileConfig","profileDrive","personalInfoNameQueryParam","targetDrive","fileType","AttributeConfig","personalInfoPhotoQueryParam","SocialQueryParam","themeFileQueryParam","bioFileQueryParam","linkFileQueryParam","homeFileQueryParam","resultOptions","baseResultOptions","includeAdditionalThumbnails","includeJsonContent","includePayload","excludePreviewThumbnail","publicSections","homeFileId","homeTargetDrive","getTargetDriveFromProfileId","headerImageQueryParam","push","profilePhotoFileId","acl","requiredSecurityGroup","SecurityGroupType","profileTargetDrive","profilePhotoQueryParams","publishChannels","blogMasterDrive","getBlogMasterContentTargetDrive","channelQueryParams","BlogConfig","publishBlog","getChannelDefinitions","channels","blogOnChannelQuery","blogPostReadonlyProvider","getRecentPosts","length","imageSections","blog","getPublishChannelDrive","primaryImageFileId","ex"],"sourceRoot":""}