{"version":3,"file":"static/js/389.08c3a756.chunk.js","mappings":"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","sources":["hooks/blogs/useBlogs.ts","components/Channel/ChannelCreator/ChannelCreator.tsx","components/Blog/BlogTeaser/BlogTeaser.tsx","components/Channel/ChannelEditor/ChannelEditor.tsx","components/Channel/ChannelOverview/ChannelOverview.tsx","components/SubMenu/SubMenu.tsx","components/Templates/Blog/Blog.tsx","helpers/common.ts","hooks/blogs/useChannel.ts","hooks/blogs/useChannels.ts"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport { ApiType, BlogContent, BlogPostFile, Client } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsProps = {\n  channelId?: string;\n  page: string | undefined;\n};\n\nexport interface BlogContentVm extends BlogContent {\n  itemKey?: string;\n}\n\nconst useBlogs = ({ channelId, page }: useBlogPostsProps = { page: undefined }) => {\n  const pageSize = 50;\n  const { getSharedSecret } = useAuth();\n\n  const fetchBlogData = async ({ channelId, page }: useBlogPostsProps = { page: undefined }) => {\n    const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n    const foundBlogPosts: BlogPostFile<BlogContentVm>[] =\n      await client.blogPostProvider.getMasterPosts(page, pageSize);\n\n    let filteredBlogPosts = foundBlogPosts.filter((post) => {\n      if (!channelId) {\n        return true;\n      }\n      return post.publishTargets.some((channel) => channel.channelId === channelId);\n    });\n\n    // Process blog posts (Only until fixed in data upload)\n    filteredBlogPosts = filteredBlogPosts.map((item) => {\n      return {\n        ...item,\n        content: {\n          ...item.content,\n          itemKey: `${item.content.channelId}_${item.content.id}`,\n          slug: item.content.caption ? convertTextToSlug(item.content.caption) : item.content.id,\n        },\n      };\n    });\n\n    return filteredBlogPosts;\n  };\n\n  return useQuery(['blogs', channelId, page], () => fetchBlogData({ channelId, page }), {\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport default useBlogs;\n","import { ChannelDefinition, SecurityGroupType } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { convertTextToSlug } from '../../../helpers/common';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useChannel from '../../../hooks/blogs/useChannel';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Section from '../../Sections/Section';\n\nconst ChannelCreator = () => {\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const { mutate: saveChannel, status: saveStatus } = useChannel().save;\n  const navigate = useNavigate();\n\n  const createChannel: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    const newChannelDef: ChannelDefinition = {\n      channelId: '',\n      name: name,\n      description: description,\n      templateId: undefined,\n      acl: { requiredSecurityGroup: SecurityGroupType.Owner },\n    };\n\n    saveChannel(newChannelDef, {\n      onSuccess: () => {\n        navigate(`/owner/blog/${convertTextToSlug(newChannelDef.name)}`);\n      },\n    });\n\n    return false;\n  };\n\n  return (\n    <Section title=\"New: channel\" isOpaqueBg={true}>\n      <form onSubmit={createChannel}>\n        <div className=\"mb-5\">\n          <label htmlFor=\"channelName\">{t('Name')}</label>\n          <Input\n            id=\"name\"\n            name=\"channelName\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            required\n          />\n        </div>\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Description')}</label>\n          <Input\n            id=\"name\"\n            name=\"channelDescription\"\n            onChange={(e) => {\n              setDescription(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"flex flex-row\">\n          <ActionButton className=\"ml-auto\" state={saveStatus}>\n            {t('Add channel')}\n          </ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nexport default ChannelCreator;\n","import {\n  BlogArticle,\n  BlogPostFile,\n  BlogTypeUnion,\n  PublishTarget,\n} from '@youfoundation/transit-lib';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport { BlogContentVm } from '../../../hooks/blogs/useBlogs';\nimport useChannels from '../../../hooks/blogs/useChannels';\n\nconst BlogTeaser = ({\n  className,\n  blog,\n  linkRoot,\n}: {\n  className?: string;\n  blog: BlogPostFile<BlogContentVm>;\n  linkRoot: string;\n}) => {\n  return (\n    <Link to={`${linkRoot}${blog.content.slug ?? '#'}`} className=\"contents\">\n      <div\n        className={`flex flex-nowrap px-5 py-8 transition-colors duration-200 hover:bg-slate-50 hover:dark:bg-slate-800 ${\n          className ?? ''\n        }`}\n      >\n        <div className=\"flex flex-col md:flex-grow md:flex-row\">\n          <div className=\"flex flex-shrink-0 md:order-3 md:mb-0 md:mt-3 md:w-32 md:flex-col md:text-right lg:w-64\">\n            <span className=\"title-font font-semibold text-gray-700 dark:text-white\">\n              {(blog.content as BlogTypeUnion).type.toUpperCase()}\n            </span>\n            <span className=\"pl-2 text-gray-500 md:mt-1 md:pl-0 md:text-sm\">\n              {new Date(blog.content.dateUnixTime).toLocaleDateString()}\n            </span>\n          </div>\n          <div className=\"md:order-2 md:flex-grow\">\n            <h2 className=\"title-font mb-2 flex flex-row text-2xl font-medium text-gray-900 dark:text-white\">\n              {blog.content.caption}\n              <BlogPublishTags publishTargets={blog.publishTargets} />\n            </h2>\n            {'abstract' in blog.content ? (\n              <p className=\"leading-relaxed\">{(blog.content as BlogArticle).abstract}</p>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nconst BlogPublishTags = ({ publishTargets }: { publishTargets?: PublishTarget[] }) => {\n  const { data: channels } = useChannels().fetch;\n  if (!publishTargets?.length) {\n    return;\n  }\n\n  return (\n    <span className=\"my-auto ml-2 flex flex-row flex-wrap\">\n      {publishTargets.map((target) => {\n        const publishedChannel = channels.find((channel) => channel.channelId === target.channelId);\n        if (!publishedChannel) {\n          return null;\n        }\n        return (\n          <span\n            key={publishedChannel.channelId}\n            className=\"mr-2 bg-green-300 px-2 py-1 text-xs\"\n            title={`${t('Published to')}: ${publishedChannel.name}`}\n          >\n            {publishedChannel.name}\n          </span>\n        );\n      })}\n    </span>\n  );\n};\n\nexport default BlogTeaser;\n","import { ChannelTemplate } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { convertTextToSlug } from '../../../helpers/common';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useChannel from '../../../hooks/blogs/useChannel';\nimport { ChannelDefinitionVm } from '../../../hooks/blogs/useChannels';\nimport AclEditor from '../../AclEditor/AclEditor';\nimport ActionButton from '../../Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Select from '../../Form/Select';\nimport Textarea from '../../Form/Textarea';\nimport Section from '../../Sections/Section';\n\nconst ChannelEditor = ({\n  channel,\n  onCancel,\n}: {\n  channel: ChannelDefinitionVm;\n  onCancel: () => void;\n}) => {\n  const [channelData, setChannelData] = useState({ ...channel });\n  const { mutate: saveChannel, status: saveStatus } = useChannel().save;\n  const navigate = useNavigate();\n\n  if (!channel) {\n    return;\n  }\n\n  const handleChange = (e: { target: { value: unknown; name: string } }) => {\n    const newChannelData = { ...channelData };\n    newChannelData[e.target.name] = e.target.value;\n\n    setChannelData(newChannelData);\n  };\n\n  const tmpKeys = Object.keys(ChannelTemplate).filter((f) => !isNaN(Number(f)));\n  const tmpVals = Object.keys(ChannelTemplate).filter((f) => isNaN(Number(f)));\n\n  return (\n    <Section\n      title={\n        <>\n          <AclEditor\n            key={channelData.channelId}\n            acl={channelData.acl}\n            onChange={(acl) => {\n              handleChange({ target: { name: 'acl', value: acl } });\n            }}\n          />{' '}\n          {`${t('Edit')}: ${channel.name}`}\n        </>\n      }\n      isOpaqueBg={true}\n    >\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          saveChannel(channelData, {\n            onSuccess: () => {\n              navigate(`/owner/blog/${convertTextToSlug(channelData.name)}`);\n            },\n          });\n        }}\n      >\n        <div className=\"mb-5\">\n          <label htmlFor=\"name\">{t('Name')}</label>\n          <Input id=\"name\" name=\"name\" defaultValue={channel.name} onChange={handleChange} />\n        </div>\n        <div className=\"mb-5\">\n          <label htmlFor=\"description\">{t('Description')}</label>\n          <Textarea\n            id=\"description\"\n            name=\"description\"\n            defaultValue={channel.description}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"mb-5\">\n          <label htmlFor=\"template\">{t('Template')}</label>\n          <Select\n            id=\"template\"\n            name=\"templateId\"\n            defaultValue={channel.templateId}\n            onChange={handleChange}\n          >\n            <option>{t('Make a selection')}</option>\n            {tmpKeys.map((tmpKey, index) => {\n              return (\n                <option value={tmpKey} key={tmpKey}>\n                  {t(tmpVals[index])}\n                </option>\n              );\n            })}\n          </Select>\n        </div>\n        <div className=\"flex flex-row\">\n          <ActionButton\n            type=\"secondary\"\n            className=\"ml-auto\"\n            onClick={(e) => {\n              e.preventDefault();\n              onCancel();\n            }}\n          >\n            {t('Cancel')}\n          </ActionButton>\n          <ActionButton type=\"primary\" className=\"ml-2\" state={saveStatus}>\n            {t('Save')}\n          </ActionButton>\n        </div>\n      </form>\n    </Section>\n  );\n};\n\nexport default ChannelEditor;\n","import { BlogPostFile, ChannelTemplate } from '@youfoundation/transit-lib';\nimport { useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport { BlogContentVm } from '../../../hooks/blogs/useBlogs';\nimport { ChannelDefinitionVm } from '../../../hooks/blogs/useChannels';\nimport BlogTeaser from '../../Blog/BlogTeaser/BlogTeaser';\nimport ActionButton from '../../Buttons/ActionButton';\nimport ChannelEditor from '../ChannelEditor/ChannelEditor';\n\nconst ChannelOverview = ({\n  channel,\n  blogs,\n}: {\n  channel: ChannelDefinitionVm | undefined;\n  blogs: BlogPostFile<BlogContentVm>[];\n}) => {\n  const linkRoot = `/owner/blog/${channel ? channel.slug : 'all'}/`;\n  const [isEditActive, setIsEditActive] = useState(false);\n\n  return (\n    <>\n      {channel ? (\n        isEditActive ? (\n          <ChannelEditor\n            key={channel.channelId}\n            channel={channel}\n            onCancel={() => setIsEditActive(false)}\n          />\n        ) : (\n          <section className=\"items-center bg-slate-50 p-3 dark:bg-slate-800 sm:flex sm:flex-row\">\n            <p className=\"sm:mr-2\">{channel.description ? channel.description : channel.name}</p>\n\n            <p className=\"ml-auto\">\n              {t('Template')}:{' '}\n              {parseInt(channel.templateId + '') === ChannelTemplate.LargeCards\n                ? t('LargeCards')\n                : parseInt(channel.templateId + '') === ChannelTemplate.ClassicBlog\n                ? t('ClassicBlog')\n                : t('MasonryLayout')}\n            </p>\n            <ActionButton\n              type=\"secondary\"\n              className=\"sm:ml-2\"\n              onClick={() => setIsEditActive(true)}\n            >\n              {t('Edit Channel')}\n            </ActionButton>\n          </section>\n        )\n      ) : null}\n\n      {blogs.length ? (\n        <div className=\"-mx-5 divide-y-2 divide-gray-100 dark:divide-gray-800\">\n          {blogs.map((blog) => {\n            return <BlogTeaser key={blog.content.itemKey} blog={blog} linkRoot={linkRoot} />;\n          })}\n        </div>\n      ) : (\n        <div className=\"mt-4\">{t('no-data-found')}</div>\n      )}\n    </>\n  );\n};\n\nexport default ChannelOverview;\n","import { FC, ReactNode } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ninterface SubmenuProps {\n  className?: string;\n  items: { title: ReactNode; key: string; path: string; className?: string }[];\n}\n\nconst Submenu: FC<SubmenuProps> = ({ className, items }) => {\n  return (\n    <div className={`flex ${className}`}>\n      {items.map((item) => {\n        return (\n          // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n          <NavLink\n            className={({ isActive }) =>\n              `flex-grow cursor-pointer border-b-2 py-2 px-1 text-lg ${\n                isActive\n                  ? 'border-indigo-500 text-indigo-500 dark:text-indigo-400'\n                  : 'border-gray-300 transition-colors duration-300 hover:border-indigo-400 dark:border-gray-800 hover:dark:border-indigo-600'\n              } ${item.className ?? ''}`\n            }\n            to={item.path}\n            key={item.key}\n            end\n          >\n            {item.title}\n          </NavLink>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Submenu;\n","import { Link, useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useBlogs from '../../../hooks/blogs/useBlogs';\nimport useChannels from '../../../hooks/blogs/useChannels';\nimport ActionButton from '../../Buttons/ActionButton';\nimport ChannelCreator from '../../Channel/ChannelCreator/ChannelCreator';\nimport ChannelOverview from '../../Channel/ChannelOverview/ChannelOverview';\nimport Plus from '../../Icons/Plus/Plus';\nimport Quote from '../../Icons/Quote/Quote';\nimport PageMeta from '../../Layout/PageMeta/PageMeta';\nimport Submenu from '../../SubMenu/SubMenu';\n\nconst Blog = () => {\n  const { channelKey } = useParams();\n  const { data: channels, isLoading: isChannelsLoading } = useChannels().fetch;\n  const activeChannel = channels?.find((channel) => channel.slug === channelKey);\n  const { data: blogs, isLoading: isBlogsLoading } = useBlogs({\n    channelId: activeChannel?.channelId,\n    page: undefined,\n  });\n\n  if (!channels || !blogs || isChannelsLoading || isBlogsLoading) {\n    return <>Loading</>;\n  }\n\n  return (\n    <section>\n      <PageMeta\n        icon={Quote}\n        title={t('Blog')}\n        actions={\n          <Link className=\"contents\" to={`/owner/blog/draft/new`}>\n            <ActionButton type=\"primary\" icon=\"plus\" className=\"ml-auto\">\n              {t('New')}\n            </ActionButton>\n          </Link>\n        }\n      />\n\n      <Submenu\n        items={[\n          {\n            title: t('Drafts'),\n            key: '',\n            path: `/owner/blog`,\n          },\n          ...channels.map((channel) => {\n            return {\n              title: channel.name,\n              key: channel.channelId,\n              path: `/owner/blog/${channel.slug}`,\n            };\n          }),\n          {\n            title: <Plus className=\"h-5 w-5\" />,\n            key: 'new',\n            className: 'flex-grow-0',\n            path: `/owner/blog/new`,\n          },\n        ]}\n      />\n\n      <div className=\"pt-5\">\n        {channelKey === 'new' ? (\n          <ChannelCreator />\n        ) : (\n          <ChannelOverview channel={activeChannel} blogs={blogs} />\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Blog;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, ChannelDefinition, Client } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\nimport useStaticFiles from '../staticFiles/useStaticFiles';\n\nconst useChannel = ({ channelId }: { channelId?: string } = {}) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const queryClient = useQueryClient();\n  const { mutate: publishStaticFiles } = useStaticFiles().publish;\n\n  const fetchData = async (channelId?: string) => {\n    if (!channelId) {\n      return;\n    }\n    const foundAttribute = await client.blogDefinitionProvider.getChannelDefinition(channelId);\n\n    return foundAttribute;\n  };\n\n  const saveData = async (channelDef: ChannelDefinition) => {\n    await client.blogDefinitionProvider.saveChannelDefinition(channelDef);\n  };\n\n  return {\n    fetch: useQuery(['channel', channelId], () => fetchData(channelId), {\n      refetchOnWindowFocus: false,\n    }),\n    save: useMutation(saveData, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.channelId) {\n          queryClient.removeQueries(['channel', variables.channelId]);\n        } else {\n          queryClient.removeQueries(['channel']);\n        }\n        queryClient.removeQueries(['channels']);\n\n        publishStaticFiles();\n      },\n    }),\n  };\n};\n\nexport default useChannel;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, ChannelDefinition, Client } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\nexport interface ChannelDefinitionVm extends ChannelDefinition {\n  slug: string;\n}\n\nconst useChannels = () => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n  const fetchData = async () => {\n    const foundChannels = await client.blogDefinitionProvider.getChannelDefinitions();\n\n    return foundChannels.map((channel) => {\n      return {\n        ...channel,\n        slug: convertTextToSlug(channel.name),\n      } as ChannelDefinitionVm;\n    });\n  };\n\n  return {\n    fetch: useQuery(['channels'], () => fetchData(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useChannels;\n"],"names":["page","undefined","channelId","pageSize","useAuth","getSharedSecret","fetchBlogData","client","Client","api","ApiType","sharedSecret","blogPostProvider","getMasterPosts","foundBlogPosts","filteredBlogPosts","filter","post","publishTargets","some","channel","map","item","content","itemKey","id","slug","caption","convertTextToSlug","useQuery","refetchOnWindowFocus","useState","name","setName","description","setDescription","useChannel","save","saveChannel","mutate","saveStatus","status","navigate","useNavigate","Section","title","isOpaqueBg","onSubmit","e","preventDefault","newChannelDef","templateId","acl","requiredSecurityGroup","SecurityGroupType","onSuccess","className","htmlFor","t","Input","onChange","target","value","required","ActionButton","state","BlogPublishTags","channels","useChannels","fetch","data","length","publishedChannel","find","blog","linkRoot","to","type","toUpperCase","Date","dateUnixTime","toLocaleDateString","abstract","onCancel","channelData","setChannelData","handleChange","newChannelData","tmpKeys","Object","keys","ChannelTemplate","f","isNaN","Number","tmpVals","AclEditor","defaultValue","Textarea","Select","tmpKey","index","onClick","blogs","isEditActive","setIsEditActive","parseInt","items","isActive","path","end","key","channelKey","useParams","isChannelsLoading","isLoading","activeChannel","useBlogs","isBlogsLoading","PageMeta","icon","Quote","actions","Plus","text","split","join","toLowerCase","stringify","obj","queryClient","useQueryClient","publishStaticFiles","useStaticFiles","publish","fetchData","blogDefinitionProvider","getChannelDefinition","foundAttribute","saveData","channelDef","saveChannelDefinition","useMutation","_data","variables","removeQueries","getChannelDefinitions","foundChannels"],"sourceRoot":""}