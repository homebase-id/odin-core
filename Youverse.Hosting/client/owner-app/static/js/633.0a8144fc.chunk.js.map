{"version":3,"file":"static/js/633.0a8144fc.chunk.js","mappings":"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","sources":["components/Buttons/SaveStatus.tsx","components/Layout/PageMeta/PageMeta.tsx","helpers/common.ts","hooks/blogs/useChannel.ts","hooks/profiles/useAttributes.ts","hooks/profiles/useHomeAttributes.ts","provider/file/FileProvider.ts","hooks/staticFiles/useStaticFiles.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { FC, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n  breadCrumbs,\n  icon,\n}: {\n  title?: ReactNode;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n  breadCrumbs?: { title: string; href?: string }[];\n  icon?: FC;\n}) => {\n  return (\n    <section\n      className=\"-my-8 -mx-10 mb-10 border-b-2 border-gray-100 bg-slate-50 py-8\n    px-10 dark:border-gray-700 dark:bg-slate-800\"\n    >\n      <div className=\"flex flex-row\">\n        <div className=\"flex-col\">\n          {breadCrumbs && (\n            <ul className=\"mb-2 hidden flex-row sm:flex\">\n              {breadCrumbs.map((crumb, index) => {\n                return (\n                  <li key={index} className=\"mr-2\">\n                    {crumb.href ? (\n                      <Link to={crumb.href} className=\"\">\n                        {crumb.title}\n                        <span className=\"ml-2\">{'>'}</span>\n                      </Link>\n                    ) : (\n                      <span className=\"text-slate-500\">{crumb.title}</span>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {title && (\n            <h1 className=\"mb-5 flex flex-row text-4xl dark:text-white\">\n              {icon && icon({ className: 'h-8 w-8 my-auto mr-4' })} {title}\n            </h1>\n          )}\n        </div>\n        <div className=\"ml-auto \">\n          <div className=\"flex flex-row\">{actions}</div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: unknown) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, ChannelDefinition, Client } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\nimport useStaticFiles from '../staticFiles/useStaticFiles';\n\nconst useChannel = ({ channelId }: { channelId?: string } = {}) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const queryClient = useQueryClient();\n  const { mutate: publishStaticFiles } = useStaticFiles().publish;\n\n  const fetchData = async (channelId?: string) => {\n    if (!channelId) {\n      return;\n    }\n    const foundAttribute = await client.blogDefinitionProvider.getChannelDefinition(channelId);\n\n    return foundAttribute;\n  };\n\n  const saveData = async (channelDef: ChannelDefinition) => {\n    await client.blogDefinitionProvider.saveChannelDefinition(channelDef);\n  };\n\n  return {\n    fetch: useQuery(['channel', channelId], () => fetchData(channelId), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n    save: useMutation(saveData, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.channelId) {\n          queryClient.removeQueries(['channel', variables.channelId]);\n        } else {\n          queryClient.removeQueries(['channel']);\n        }\n        queryClient.removeQueries(['channels']);\n\n        publishStaticFiles();\n      },\n    }),\n  } as const;\n};\n\nexport default useChannel;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  ApiType,\n  AttributeDefinition,\n  AttributeDefinitions,\n  AttributeFile,\n  Client,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nexport interface AttributeVm extends AttributeFile {\n  typeDefinition: AttributeDefinition;\n}\n\nconst useAttributes = ({ profileId, sectionId }: { profileId: string; sectionId: string }) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n  const fetchData = async (profileId: string, sectionId: string) => {\n    const foundAttributes = await client.profileDataProvider.getProfileAttributes(\n      profileId,\n      sectionId,\n      100\n    );\n\n    return foundAttributes.map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: Object.values(AttributeDefinitions).find((def) => {\n          return def.type.toString() === attr.type;\n        }),\n      } as AttributeVm;\n    });\n  };\n\n  return [\n    useQuery(['attributes', profileId, sectionId], () => fetchData(profileId, sectionId), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n  ] as const;\n};\n\nexport default useAttributes;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, Client, HomePageAttributes } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useHomeAttributes = () => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n  const fetchData = async () => {\n    const foundHomettributes = (\n      await client.homePageProvider.getAttributes(HomePageAttributes.HomePage.toString())\n    ).map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: {\n          type: HomePageAttributes.HomePage.toString(),\n          name: 'Home Page',\n          description: '',\n        },\n      };\n    });\n\n    const foundThemeAttributes = (\n      await client.homePageProvider.getAttributes(HomePageAttributes.Theme.toString())\n    ).map((attr) => {\n      return {\n        ...attr,\n        typeDefinition: {\n          type: HomePageAttributes.Theme.toString(),\n          name: 'Theme',\n          description: '',\n        },\n      };\n    });\n\n    return { home: foundHomettributes, theme: foundThemeAttributes };\n  };\n\n  return {\n    fetch: useQuery(['homeAtrributes'], () => fetchData(), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useHomeAttributes;\n","import { ApiType, DataUtil, FileQueryParams, ProviderBase } from '@youfoundation/transit-lib';\n\nexport class FileProvider extends ProviderBase {\n  private static instance: FileProvider;\n\n  constructor(sharedSecret: Uint8Array) {\n    super({ api: ApiType.Owner, sharedSecret: sharedSecret });\n  }\n\n  publishFile = async (fileName: string, sections: QueryParamsSection[]) => {\n    const httpClient = this.createAxiosClient();\n\n    const fileRequest: PublishStaticFileRequest = {\n      filename: fileName,\n      config: {\n        crossOriginalBehavior: 'AllowAllOrigins',\n        contentType: 'string',\n      },\n      sections: sections.map((section) => {\n        return {\n          ...section,\n          queryParams: fixQueryParams(section.queryParams),\n        };\n      }),\n    };\n\n    return await httpClient.post('/optimization/cdn/publish', fileRequest);\n  };\n\n  public static getInstance(sharedSecret): FileProvider {\n    if (!FileProvider.instance) {\n      FileProvider.instance = new FileProvider(sharedSecret);\n    }\n\n    return FileProvider.instance;\n  }\n}\n\nconst fixQueryParams = (params: FileQueryParams): FileQueryParams => {\n  //HACK; convert all strings to byte arrays as base64 values; this is for a test\n\n  //HACK: until we decide where to handle byte arrays\n  if (params.tagsMatchAtLeastOne)\n    params.tagsMatchAtLeastOne = params.tagsMatchAtLeastOne.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n  if (params.tagsMatchAll)\n    params.tagsMatchAll = params.tagsMatchAll.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n  if (params.sender)\n    params.sender = params.sender.map((v) =>\n      DataUtil.uint8ArrayToBase64(DataUtil.stringToUint8Array(v))\n    );\n\n  return params;\n};\n\ntype QueryParamsSection = {\n  name: string;\n  queryParams: FileQueryParams;\n  resultOptions: {\n    includeAdditionalThumbnails: boolean;\n    includeJsonContent: boolean;\n    includePayload: boolean;\n    excludePreviewThumbnail: boolean;\n  };\n};\n\ntype PublishStaticFileRequest = {\n  filename: string;\n  config: { crossOriginalBehavior: 'Default' | 'AllowAllOrigins'; contentType: string };\n  sections: QueryParamsSection[];\n};\n","import { useMutation } from '@tanstack/react-query';\nimport {\n  ApiType,\n  AttributeConfig,\n  AttributeDefinitions,\n  BlogConfig,\n  BuiltInProfiles,\n  Client,\n  FileQueryParams,\n  getBlogMasterContentTargetDrive,\n  getTargetDriveFromProfileId,\n  HomePageAttributes,\n  HomePageConfig,\n  ProfileConfig,\n  SecurityGroupType,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport { FileProvider } from '../../provider/file/FileProvider';\nimport useAuth from '../auth/useAuth';\nimport useAttributes from '../profiles/useAttributes';\nimport useHomeAttributes from '../profiles/useHomeAttributes';\n\nconst useStaticFiles = () => {\n  const { getSharedSecret } = useAuth();\n  const { data: homeAtrributes } = useHomeAttributes().fetch;\n  const [{ data: profileAttributes }] = useAttributes({\n    profileId: BuiltInProfiles.StandardProfileId.toString(),\n    sectionId: BuiltInProfiles.PersonalInfoSectionId.toString(),\n  });\n\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const publishData = async () => {\n    const fileProvider = FileProvider.getInstance(getSharedSecret());\n\n    const publishPublicProfile = async () => {\n      const homepageDrive: TargetDrive = {\n        alias: HomePageConfig.DefaultDriveId.toString(),\n        type: ProfileConfig.ProfileDriveType.toString(),\n      };\n\n      const profileDrive: TargetDrive = {\n        alias: BuiltInProfiles.StandardProfileId.toString(),\n        type: ProfileConfig.ProfileDriveType.toString(),\n      };\n\n      const personalInfoNameQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAll: [\n          BuiltInProfiles.PersonalInfoSectionId.toString(),\n          AttributeDefinitions.Name.type.toString(),\n        ],\n      };\n\n      const personalInfoPhotoQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAll: [\n          BuiltInProfiles.PersonalInfoSectionId.toString(),\n          AttributeDefinitions.Photo.type.toString(),\n        ],\n      };\n\n      const SocialQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [BuiltInProfiles.SocialIdentitySectionId.toString()],\n      };\n\n      const themeFileQueryParam: FileQueryParams = {\n        targetDrive: homepageDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [HomePageAttributes.Theme.toString()],\n      };\n\n      const bioFileQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [AttributeDefinitions.FullBio.type.toString()],\n      };\n\n      const linkFileQueryParam: FileQueryParams = {\n        targetDrive: profileDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [AttributeDefinitions.Link.type.toString()],\n      };\n\n      const homeFileQueryParam: FileQueryParams = {\n        targetDrive: homepageDrive,\n        fileType: [AttributeConfig.AttributeFileType],\n        tagsMatchAtLeastOne: [HomePageAttributes.HomePage.toString()],\n      };\n\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const sections = [\n        {\n          name: 'socials',\n          queryParams: SocialQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'name',\n          queryParams: personalInfoNameQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'photo',\n          queryParams: personalInfoPhotoQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'bio',\n          queryParams: bioFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'link',\n          queryParams: linkFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'theme',\n          queryParams: themeFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n        {\n          name: 'home',\n          queryParams: homeFileQueryParam,\n          resultOptions: baseResultOptions,\n        },\n      ];\n\n      // Image fileId's discovery:\n      const homeFileId = homeAtrributes.home[0]?.data['headerImageUrl'];\n      const homeTargetDrive = getTargetDriveFromProfileId(HomePageConfig.DefaultDriveId.toString());\n      const headerImageQueryParam: FileQueryParams = {\n        targetDrive: homeTargetDrive,\n        fileType: [0],\n        tagsMatchAtLeastOne: [homeFileId],\n      };\n\n      if (homeFileId) {\n        sections.push({\n          name: homeFileId,\n          queryParams: headerImageQueryParam,\n          resultOptions: baseResultOptions,\n        });\n      }\n\n      const profilePhotoFileId = profileAttributes?.find(\n        (attr) =>\n          attr.acl.requiredSecurityGroup === SecurityGroupType.Anonymous &&\n          attr.type === AttributeDefinitions.Photo.type.toString()\n      )?.data?.['profileImageId'];\n      const profileTargetDrive = getTargetDriveFromProfileId(\n        BuiltInProfiles.StandardProfileId.toString()\n      );\n      const profilePhotoQueryParams: FileQueryParams = {\n        targetDrive: profileTargetDrive,\n        fileType: [0],\n        tagsMatchAtLeastOne: [profilePhotoFileId],\n      };\n\n      if (profilePhotoFileId) {\n        sections.push({\n          name: profilePhotoFileId,\n          queryParams: profilePhotoQueryParams,\n          resultOptions: baseResultOptions,\n        });\n      }\n\n      return await fileProvider.publishFile('profile.json', sections);\n    };\n\n    const publishChannels = async () => {\n      const blogMasterDrive = getBlogMasterContentTargetDrive();\n\n      const channelQueryParams: FileQueryParams = {\n        targetDrive: blogMasterDrive,\n        fileType: [BlogConfig.BlogChannelDefinitionFileType],\n      };\n\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const sections = [\n        {\n          name: 'channels',\n          queryParams: channelQueryParams,\n          resultOptions: baseResultOptions,\n        },\n      ];\n\n      return await fileProvider.publishFile('channels.json', sections);\n    };\n\n    const publishBlog = async () => {\n      const baseResultOptions = {\n        includeAdditionalThumbnails: false,\n        includeJsonContent: true,\n        includePayload: false,\n        excludePreviewThumbnail: false,\n      };\n\n      const channels = await client.blogDefinitionProvider.getChannelDefinitions();\n      const sections = channels.map((channel) => {\n        const channelDrive: TargetDrive = {\n          alias: channel.channelId,\n          type: BlogConfig.ChannelDriveType.toString(),\n        };\n\n        const blogOnChannelQuery: FileQueryParams = {\n          targetDrive: channelDrive,\n          fileType: [BlogConfig.BlogPostFileType],\n        };\n\n        return {\n          name: channel.channelId,\n          queryParams: blogOnChannelQuery,\n          resultOptions: baseResultOptions,\n        };\n      });\n\n      const imageSections = (\n        await client.blogPostReadonlyProvider.getRecentPosts('Article', channels.length * 6)\n      ).map((blog) => {\n        const params: FileQueryParams = {\n          targetDrive: client.blogDefinitionProvider.getPublishChannelDrive(blog.channelId),\n          fileType: [0],\n          tagsMatchAtLeastOne: [blog.primaryImageFileId],\n        };\n\n        return {\n          name: blog.primaryImageFileId,\n          queryParams: params,\n          resultOptions: baseResultOptions,\n        };\n      });\n\n      return await fileProvider.publishFile('blogs.json', [...sections, ...imageSections]);\n    };\n\n    await publishPublicProfile();\n    await publishChannels();\n    await publishBlog();\n  };\n\n  return {\n    publish: useMutation(publishData, {\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useStaticFiles;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["className","state","useState","lastSave","setLastSave","Date","now","setNow","useEffect","timer","setTimeout","clearTimeout","diff","getTime","text","toLocaleString","title","actions","saveStatus","breadCrumbs","icon","map","crumb","index","href","to","convertTextToSlug","split","join","toLowerCase","stringify","obj","Object","keys","key","channelId","useAuth","getSharedSecret","client","Client","api","ApiType","sharedSecret","queryClient","useQueryClient","publishStaticFiles","useStaticFiles","publish","mutate","fetchData","blogDefinitionProvider","getChannelDefinition","foundAttribute","saveData","channelDef","saveChannelDefinition","fetch","useQuery","refetchOnMount","refetchOnWindowFocus","save","useMutation","onSuccess","_data","variables","removeQueries","profileId","sectionId","profileDataProvider","getProfileAttributes","foundAttributes","attr","typeDefinition","values","AttributeDefinitions","find","def","type","toString","homePageProvider","getAttributes","HomePageAttributes","foundHomettributes","name","description","foundThemeAttributes","home","theme","FileProvider","publishFile","fileName","sections","httpClient","createAxiosClient","fileRequest","filename","config","crossOriginalBehavior","contentType","section","queryParams","fixQueryParams","post","instance","ProviderBase","params","tagsMatchAtLeastOne","v","DataUtil","tagsMatchAll","sender","homeAtrributes","useHomeAttributes","data","useAttributes","BuiltInProfiles","profileAttributes","publishData","fileProvider","getInstance","publishPublicProfile","homepageDrive","alias","HomePageConfig","ProfileConfig","profileDrive","personalInfoNameQueryParam","targetDrive","fileType","AttributeConfig","personalInfoPhotoQueryParam","SocialQueryParam","themeFileQueryParam","bioFileQueryParam","linkFileQueryParam","homeFileQueryParam","resultOptions","baseResultOptions","includeAdditionalThumbnails","includeJsonContent","includePayload","excludePreviewThumbnail","homeFileId","homeTargetDrive","getTargetDriveFromProfileId","headerImageQueryParam","push","profilePhotoFileId","acl","requiredSecurityGroup","SecurityGroupType","profileTargetDrive","profilePhotoQueryParams","publishChannels","blogMasterDrive","getBlogMasterContentTargetDrive","channelQueryParams","BlogConfig","publishBlog","getChannelDefinitions","channels","channel","blogOnChannelQuery","blogPostReadonlyProvider","getRecentPosts","length","imageSections","blog","getPublishChannelDrive","primaryImageFileId","onError","ex","console","error","_defineProperty","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}