{"version":3,"file":"static/js/460.6fc2a7f4.chunk.js","mappings":"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","sources":["components/Blog/Common/Card/BlogTeaserCard.tsx","components/Icons/Arrow/Arrow.tsx","hooks/intersection/useIntersection.ts","hooks/image/useImage.ts","hooks/image/useTinyThumb.ts","components/Image/Image.tsx","hooks/blog/useBlog.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/RichTextRendere/RichTextRenderer.tsx","components/Blog/Common/RelatedBlogs/RelatedBlogs.tsx","components/Templates/Blog/Detail/BlogDetail.tsx","helpers/common.ts","hooks/blog/useBlogPosts.ts"],"sourcesContent":["import {\n  BlogArticle,\n  BlogConfig,\n  BlogContent,\n  BlogTypeUnion,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../Image/Image';\nimport Arrow from '../../../Icons/Arrow/Arrow';\nimport { t } from '../../../../helpers/i18n/dictionary';\n\ninterface BlogTeaserProps {\n  className?: string;\n  blog: BlogContent;\n  linkRoot: string;\n}\n\nconst BlogTeaser: FC<BlogTeaserProps> = ({ className, blog, linkRoot }) => {\n  const imageTargetDrive: TargetDrive | undefined = blog.channelId\n    ? {\n        alias: blog.channelId,\n        type: BlogConfig.ChannelDriveType.toString(),\n      }\n    : undefined;\n\n  return (\n    <div className={`${className ?? ''}`}>\n      <Link to={`${linkRoot}${blog.slug ?? '#'}`} className=\"contents\">\n        <div className=\"h-full overflow-hidden rounded-lg border-2 border-gray-200 border-opacity-60 bg-white transition-colors duration-300 hover:bg-slate-50 dark:border-gray-800 dark:bg-gray-800 hover:dark:bg-slate-700\">\n          {blog.primaryImageFileId && imageTargetDrive ? (\n            <Image\n              className=\"h-64 w-full md:h-36 lg:h-48\"\n              fileId={blog.primaryImageFileId}\n              targetDrive={imageTargetDrive}\n              alt=\"blog\"\n              cover={true}\n            />\n          ) : null}\n          <div className=\"p-6\">\n            <h2 className=\"title-font mb-1 text-xs font-medium tracking-widest text-gray-400 dark:text-gray-600\">\n              {(blog as BlogTypeUnion).type.toUpperCase()}\n            </h2>\n            <span className=\"text-gray-500 md:mt-1 md:text-sm\">\n              {new Date(blog.dateUnixTime).toLocaleDateString()}\n            </span>\n            <h1 className=\"title-font mb-3 text-lg font-medium text-gray-900 dark:text-white\">\n              {blog.caption}\n            </h1>\n            {'abstract' in blog ? (\n              <p className=\"mb-3 leading-relaxed\">{(blog as BlogArticle).abstract}</p>\n            ) : null}\n            <div className=\"flex flex-wrap items-center \">\n              <span className=\"inline-flex items-center text-indigo-500 dark:text-indigo-400 md:mb-2 lg:mb-0\">\n                {t('learn more')}\n                <Arrow className=\"ml-2 h-4 w-4\" />\n              </span>\n            </div>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default BlogTeaser;\n","import { FC } from 'react';\n\nconst Arrow: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M5 12h14\"></path>\n      <path d=\"M12 5l7 7-7 7\"></path>\n    </svg>\n  );\n};\n\nexport default Arrow;\n","import React, { useEffect } from 'react';\n\nconst listenerCallbacks = new WeakMap();\n\nlet observer: IntersectionObserver;\n\nconst handleIntersections: IntersectionObserverCallback = (entries) => {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      const callback = listenerCallbacks.get(entry.target);\n\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        listenerCallbacks.delete(entry.target);\n        callback();\n      }\n    }\n  });\n};\n\nconst getIntersectionObserver = () => {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, {\n      rootMargin: '100px',\n      threshold: 0.15,\n    });\n  }\n  return observer;\n};\n\nexport const useIntersection = (elem: React.RefObject<HTMLElement>, callback: () => void) => {\n  useEffect(() => {\n    const target = elem.current;\n    const observer = getIntersectionObserver();\n\n    if (!target) {\n      return;\n    }\n\n    listenerCallbacks.set(target, callback);\n    observer.observe(target);\n\n    return () => {\n      listenerCallbacks.delete(target);\n      observer.unobserve(target);\n    };\n  }, []);\n};\n","import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  ApiType,\n  BlogConfig,\n  PublicClient,\n  HomePageConfig,\n  TargetDrive,\n  ThumbSize,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useImage = (imageFileId: string | undefined, imageDrive?: TargetDrive, size?: ThumbSize) => {\n  const { getSharedSecret } = useAuth();\n  const queryClient = useQueryClient();\n\n  const fetchImageData = async (\n    imageFileId: string | undefined,\n    imageDrive?: TargetDrive,\n    size?: ThumbSize\n  ) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n    return await client.mediaProvider.getDecryptedImageUrl(\n      imageDrive ?? defaultDrive,\n      imageFileId,\n      size\n    );\n  };\n\n  return {\n    fetch: useQuery(\n      ['image', imageFileId, imageDrive, size],\n      () => fetchImageData(imageFileId, imageDrive, size),\n      { refetchOnMount: false, refetchOnWindowFocus: false, staleTime: Infinity }\n    ),\n    testCache: (imageFileId: string, imageDrive: any) => {\n      const cache = queryClient.getQueryData(['image', imageFileId, imageDrive]);\n      return !!cache;\n    },\n  };\n};\n\nexport default useImage;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  ApiType,\n  BlogConfig,\n  PublicClient,\n  HomePageConfig,\n  TargetDrive,\n  DataUtil,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useTinyThumb = (imageFileId: string | undefined, imageDrive?: TargetDrive) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetchImageData = async (imageFileId: string | undefined, imageDrive?: TargetDrive) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    // Look for tiny thumb in already fetched data:\n    const thumbFromStaticFile = await client.fileReadOnlyProvider.getFileEntryFromCache(\n      imageFileId\n    );\n    if (thumbFromStaticFile?.[0]?.header.fileMetadata.appData.previewThumbnail) {\n      const previewThumbnail = thumbFromStaticFile[0].header.fileMetadata.appData.previewThumbnail;\n      const buffer = DataUtil.base64ToUint8Array(previewThumbnail.content);\n      const url = window.URL.createObjectURL(new Blob([buffer]));\n\n      return {\n        naturalSize: { width: previewThumbnail.pixelWidth, height: previewThumbnail.pixelHeight },\n        sizes: thumbFromStaticFile[0].header.fileMetadata.appData.additionalThumbnails ?? [],\n        url,\n      };\n    }\n\n    return await client.mediaProvider.getDecryptedThumbnailMeta(\n      imageDrive ?? defaultDrive,\n      imageFileId\n    );\n  };\n\n  return useQuery(\n    ['tinyThumb', imageFileId, imageDrive],\n    () => fetchImageData(imageFileId, imageDrive),\n    {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n    }\n  );\n};\n\nexport default useTinyThumb;\n","import { TargetDrive, ThumbSize } from '@youfoundation/transit-lib';\nimport { useEffect, useRef, useState } from 'react';\nimport useImage from '../../hooks/image/useImage';\nimport useTinyThumb from '../../hooks/image/useTinyThumb';\nimport { useIntersection } from '../../hooks/intersection/useIntersection';\n\ninterface ImageProps {\n  targetDrive: TargetDrive;\n  fileId: string | undefined;\n  cover?: boolean;\n  className?: string;\n  alt?: string;\n  title?: string;\n}\n\nconst Image = ({ targetDrive, fileId, cover, className, alt, title }: ImageProps) => {\n  const [isInView, setIsInView] = useState(false);\n  const [loadSize, setLoadSize] = useState<ThumbSize | 'full' | undefined>(undefined);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const { data: thumbMeta } = useTinyThumb(isInView ? fileId : undefined, targetDrive);\n  const {\n    fetch: { data: imageUrl },\n    testCache,\n  } = useImage(\n    loadSize !== undefined ? fileId : undefined,\n    targetDrive,\n    loadSize !== 'full' ? loadSize : undefined\n  );\n\n  useIntersection(imgRef, () => {\n    if (fileId && testCache(fileId, targetDrive)) {\n      findLoadOptimalSize();\n    }\n    setIsInView(true);\n  });\n\n  useEffect(() => {\n    if (thumbMeta && thumbMeta.url?.length) {\n      // Set to load full, with timeout to allow other tinies to load\n      setTimeout(() => {\n        findLoadOptimalSize();\n      }, 100);\n    }\n  }, [thumbMeta]);\n\n  const findLoadOptimalSize = () => {\n    if (!thumbMeta?.sizes?.length || !imgRef.current) {\n      setLoadSize('full');\n      return;\n    }\n\n    const targetWidth = imgRef.current?.clientWidth;\n    const targetHeight = imgRef.current?.clientHeight;\n\n    const matchingSize = thumbMeta.sizes.find((size) => {\n      return targetWidth < size.pixelWidth && targetHeight < size.pixelHeight;\n    });\n\n    setLoadSize(matchingSize ?? 'full');\n  };\n\n  const state: 'idle' | 'loading-tiny' | 'tiny' | 'loading-full' | 'loaded' = loadSize\n    ? imageUrl\n      ? 'loaded'\n      : 'loading-full'\n    : isInView\n    ? thumbMeta && thumbMeta.url?.length\n      ? 'tiny'\n      : 'loading-tiny'\n    : 'idle';\n\n  return (\n    <figure\n      className={`${\n        className?.indexOf('absolute') !== -1 ? '' : 'relative'\n      } overflow-hidden ${className}`}\n    >\n      {state !== 'loading-tiny' ? (\n        <img\n          src={state === 'loaded' ? imageUrl : thumbMeta?.url}\n          alt={isInView && thumbMeta?.url ? alt : ' '}\n          className={`${state !== 'loaded' && 'blur-[50px]'} ${\n            cover ? 'h-full w-full object-cover' : ''\n          }`}\n          title={\n            title ||\n            `${fileId}@${\n              loadSize !== undefined && loadSize !== 'full'\n                ? `${loadSize.pixelWidth}x${loadSize.pixelHeight}`\n                : loadSize\n            }`\n          }\n          ref={imgRef}\n          width={thumbMeta?.naturalSize?.width}\n          height={thumbMeta?.naturalSize?.height}\n        />\n      ) : null}\n    </figure>\n  );\n};\n\nexport default Image;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, ChannelTemplate, PublicClient } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\nimport { BlogContentVm } from './useBlogPosts';\nimport { ChannelDefinitionVm } from './useChannels';\n\ntype useBlogProps = {\n  channelSlug?: string;\n  blogSlug?: string;\n};\n\nconst useBlog = ({ channelSlug, blogSlug }: useBlogProps = {}) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetchBlog = async ({ channelSlug, blogSlug }: useBlogProps) => {\n    if (!channelSlug || !blogSlug) {\n      return;\n    }\n\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    // Channels\n    const channels = (await client.blogPostReadonlyProvider.getChannels()).map((item) => {\n      return {\n        ...item,\n        slug: convertTextToSlug(item.name),\n        template:\n          parseInt(item?.templateId + '') === ChannelTemplate.LargeCards\n            ? ChannelTemplate.LargeCards\n            : parseInt(item?.templateId + '') === ChannelTemplate.ClassicBlog\n            ? ChannelTemplate.ClassicBlog\n            : ChannelTemplate.MasonryLayout,\n      } as ChannelDefinitionVm;\n    });\n\n    const activeChannel = channels.find((channel) => channel.slug === channelSlug);\n\n    // Blogs\n    const pageSize = 100;\n    // Blog posts\n    const loadBlogs = async () => {\n      const foundBlogPosts = await client.blogPostReadonlyProvider.getRecentPosts(\n        'Article',\n        pageSize\n      );\n\n      // Process blog posts (Only until fixed in data upload)\n      return foundBlogPosts.map((item) => {\n        return {\n          ...item,\n          slug: convertTextToSlug(item.caption),\n          itemKey: `${item.channelId}_${item.id}`,\n        };\n      });\n    };\n    const blogs: BlogContentVm[] = await loadBlogs();\n\n    // TODOD: Active Post (Hacky way, as we don't have an implemented way to search on blog slug yet)\n    const activeBlog: BlogContentVm | undefined =\n      blogSlug && blogs ? blogs.find((blog) => blog.slug === blogSlug) ?? undefined : undefined;\n\n    return { activeBlog, activeChannel };\n  };\n\n  return useQuery(['blog', blogSlug], () => fetchBlog({ channelSlug, blogSlug }), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n  });\n};\n\nexport default useBlog;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { TargetDrive } from '@youfoundation/transit-lib';\nimport React, { ReactNode } from 'react';\nimport Image from '../Image/Image';\n\nconst RichTextRenderer = ({\n  body,\n  imageDrive,\n}: {\n  body: string | Record<string, unknown>[] | undefined;\n  imageDrive?: TargetDrive;\n}) => {\n  if (!body || typeof body === 'string') {\n    return <>{body}</>;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const render = (node: any): ReactNode => {\n    if ('text' in node) {\n      return renderLeaf(node, node.text, {});\n    } else {\n      const { type, ...attributes } = node;\n\n      return renderElement(\n        { type, attributes },\n        <>\n          {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            node.children?.map((childNode: any, index: number) => (\n              <React.Fragment key={index}>{render(childNode)}</React.Fragment>\n            ))\n          }\n        </>\n      );\n    }\n  };\n\n  const renderLeaf = (\n    leaf: { text?: string; bold?: boolean; italic?: boolean; underline?: boolean; code?: boolean },\n    children: ReactNode,\n    attributes: Record<string, unknown>\n  ) => {\n    if (leaf.bold) {\n      children = <strong className=\"font-bold\">{children}</strong>;\n    }\n\n    if (leaf.code) {\n      children = <code>{children}</code>;\n    }\n\n    if (leaf.italic) {\n      children = <em>{children}</em>;\n    }\n\n    if (leaf.underline) {\n      children = <u>{children}</u>;\n    }\n\n    return <span {...attributes}>{children}</span>;\n  };\n\n  const renderElement = (\n    node: {\n      type?: string;\n      attributes?: Record<string, unknown>;\n    },\n    children: ReactNode\n  ) => {\n    const { type, attributes } = node;\n\n    switch (type) {\n      case 'block-quote':\n        return (\n          <blockquote {...attributes} className=\"border-l-4 pl-2\">\n            {children}\n          </blockquote>\n        );\n      case 'bulleted-list':\n        return (\n          <ul {...attributes} className=\"list-disc pl-5\">\n            {children}\n          </ul>\n        );\n      case 'heading-one':\n        return (\n          <h1 {...attributes} className={'text-2xl'}>\n            {children}\n          </h1>\n        );\n      case 'heading-two':\n        return (\n          <h2 {...attributes} className={'text-xl'}>\n            {children}\n          </h2>\n        );\n      case 'list-item':\n        return <li {...attributes}>{children}</li>;\n      case 'numbered-list':\n        return (\n          <ol {...attributes} className=\"list-decimal pl-5\">\n            {children}\n          </ol>\n        );\n      case 'image':\n        if (attributes && 'imageFileId' in attributes && imageDrive) {\n          return (\n            <Image\n              targetDrive={imageDrive}\n              fileId={attributes.imageFileId as string}\n              className=\"my-4 max-w-md\"\n            />\n          );\n        }\n        return <></>;\n        break;\n      //     {\n      //     return <Image targetDrive={defaultDrive} fileId={element.imageFileId} className=\"max-w-md\" />;\n      //   }\n      default:\n        return <p {...attributes}>{children}</p>;\n    }\n  };\n\n  return (\n    <div>\n      {body.map((element, index) => {\n        return <React.Fragment key={index}>{render(element)}</React.Fragment>;\n      })}\n    </div>\n  );\n};\n\nexport default RichTextRenderer;\n","import { t } from '../../../../helpers/i18n/dictionary';\nimport useBlogPosts, { BlogContentVm } from '../../../../hooks/blog/useBlogPosts';\nimport { ChannelDefinitionVm } from '../../../../hooks/blog/useChannels';\nimport BlogTeaser from '../Card/BlogTeaserCard';\n\nconst relatedBlogs = ({\n  blog,\n  channel,\n}: {\n  blog: BlogContentVm;\n  channel: ChannelDefinitionVm | undefined;\n}) => {\n  const { blogPosts } = useBlogPosts(channel ? { channelId: channel.channelId } : {}).data ?? {};\n\n  if (!blogPosts) {\n    return <></>;\n  }\n\n  const filteredBlogPosts = blogPosts\n    .slice(0, 4)\n    .filter((relatedBlog) => relatedBlog.id !== blog.id)\n    .slice(0, 3);\n\n  return (\n    <section className=\"mt-10 bg-slate-50 pt-16 pb-10 dark:bg-slate-800 dark:bg-opacity-50\">\n      <div className=\"container mx-auto px-5\">\n        <h2 className=\"mb-10 text-2xl dark:text-white\">\n          {t('related blogs')} {channel && <small>| {channel.name}</small>}\n        </h2>\n        <div className=\"-m-1 flex flex-row flex-wrap\">\n          {filteredBlogPosts.map((blog) => {\n            return (\n              <BlogTeaser\n                blog={blog}\n                linkRoot={`/home/blog/${channel?.slug ?? 'all'}/`}\n                key={blog.id}\n                className={`p-1 sm:w-1/2 md:w-1/3`}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default relatedBlogs;\n","import { BlogArticle, BlogConfig, BlogTypeUnion, TargetDrive } from '@youfoundation/transit-lib';\nimport { useParams } from 'react-router-dom';\nimport useBlog from '../../../../hooks/blog/useBlog';\nimport Image from '../../../Image/Image';\nimport RichTextRenderer from '../../../RichTextRendere/RichTextRenderer';\nimport RelatedBlogs from '../../../Blog/Common/RelatedBlogs/RelatedBlogs';\n\nconst BlogDetail = () => {\n  const { channelKey, blogKey } = useParams();\n  const { activeBlog, activeChannel } =\n    useBlog(\n      channelKey && blogKey\n        ? {\n            channelSlug: channelKey,\n            blogSlug: blogKey,\n          }\n        : undefined\n    ).data ?? {};\n\n  const imageTargetDrive: TargetDrive | undefined = activeBlog?.channelId\n    ? {\n        alias: activeBlog.channelId,\n        type: BlogConfig.ChannelDriveType.toString(),\n      }\n    : undefined;\n\n  if (!activeBlog) {\n    return <></>;\n  }\n\n  const activeArticle: BlogArticle | undefined =\n    (activeBlog as BlogTypeUnion).type === 'Article' ? (activeBlog as BlogArticle) : undefined;\n\n  return (\n    <>\n      <section className=\"py-5\">\n        <div className=\"container mx-auto mb-10 flex flex-col items-center border-b-2 border-gray-100 px-5 pb-10 dark:border-gray-800 md:flex-row\">\n          <div className=\"flex w-full flex-col md:w-1/2 md:pr-16 lg:pr-24\">\n            <h2 className=\"title-font text-xs font-medium tracking-widest text-indigo-500 dark:text-indigo-400\">\n              {activeChannel?.name.toUpperCase()}\n            </h2>\n            <span className=\"pl-0 text-gray-500 md:mb-1 md:text-sm\">\n              {new Date(activeBlog.dateUnixTime).toLocaleDateString()}{' '}\n              {activeArticle?.readingTimeStats && (\n                <>\n                  | {Math.ceil(activeArticle.readingTimeStats.minutes)}\n                  min read\n                </>\n              )}\n            </span>\n            <h1 className=\"title-font mb-4 text-2xl font-medium text-gray-900 dark:text-white sm:text-3xl\">\n              {activeBlog.caption}\n            </h1>\n            <p className=\"mr-auto text-base  leading-relaxed\">{activeArticle?.abstract}</p>\n          </div>\n          <div className=\"w-5/6 md:w-1/2 lg:w-full lg:max-w-lg\">\n            {imageTargetDrive && activeBlog.primaryImageFileId ? (\n              <Image\n                className=\"rounded object-cover object-center\"\n                fileId={activeBlog.primaryImageFileId}\n                targetDrive={imageTargetDrive}\n                alt=\"blog\"\n              />\n            ) : null}\n          </div>\n        </div>\n        <div className=\"container mx-auto px-5\">\n          <div className=\"lg:w-2/3\">\n            <div className=\"rich-text-content\">\n              {/* {activeArticle?.body && (\n                <span dangerouslySetInnerHTML={{ __html: activeArticle?.body }}></span>\n              )} */}\n              <RichTextRenderer body={activeArticle?.body} imageDrive={imageTargetDrive} />\n            </div>\n          </div>\n        </div>\n      </section>\n      <RelatedBlogs blog={activeBlog} channel={activeChannel} />\n    </>\n  );\n};\n\nexport default BlogDetail;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: Record<string, unknown>) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, BlogContent, PublicClient } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsProps = {\n  channelId?: string;\n};\n\nexport interface BlogContentVm extends BlogContent {\n  itemKey?: string;\n}\n\nconst useBlogPosts = ({ channelId }: useBlogPostsProps) => {\n  const { getSharedSecret } = useAuth();\n  const pageSize = 10;\n\n  const fetchBlogData = async ({ channelId }: { channelId?: string }) => {\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    // Blog posts\n    let foundBlogPosts: BlogContentVm[];\n\n    // If located in a specific channel, only fetch those, otherwise fallback to recents;\n    if (channelId) {\n      const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n      if (fileData.has(channelId)) {\n        foundBlogPosts =\n          fileData.get(channelId)?.map((entry) => {\n            const item = entry.payload;\n\n            return {\n              ...item,\n              slug: convertTextToSlug(typeof item.caption === 'string' ? item.caption : ''),\n              itemKey: `${item.channelId}_${item.id}`,\n            } as BlogContentVm;\n          }) ?? [];\n      } else {\n        if (fileData.entries.length > 1) {\n          foundBlogPosts = [];\n\n          for (const channelId of fileData.keys()) {\n            foundBlogPosts = [\n              ...foundBlogPosts,\n              ...(fileData.get(channelId)?.map((entry) => {\n                const item = entry.payload;\n\n                return {\n                  ...item,\n                  slug: convertTextToSlug(typeof item.caption === 'string' ? item.caption : ''),\n                  itemKey: `${item.channelId}_${item.id}`,\n                } as BlogContentVm;\n              }) ?? []),\n            ];\n\n            // Sorted descending\n            foundBlogPosts.sort((a, b) => b.dateUnixTime - a.dateUnixTime);\n          }\n        } else {\n          foundBlogPosts = (\n            await client.blogPostReadonlyProvider.getPosts(\n              channelId,\n              'Article',\n              undefined,\n              pageSize\n            )\n          ).posts;\n        }\n      }\n    } else {\n      foundBlogPosts = await client.blogPostReadonlyProvider.getRecentPosts('Article', pageSize);\n    }\n\n    // Process blog posts (Only until fixed in data upload)\n    const blogPosts = clearDuplicateBlogs(foundBlogPosts).map((item) => {\n      return {\n        ...item,\n        slug: convertTextToSlug(item.caption),\n        itemKey: `${item.channelId}_${item.id}`,\n      };\n    });\n\n    return { blogPosts };\n  };\n\n  return useQuery(['blogs_recents', channelId], () => fetchBlogData({ channelId }), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    onError: (er) => {\n      console.log(er);\n    },\n  });\n};\n\n//// TODO Remove these temporary helpers:\nconst clearDuplicateBlogs = (blogs: BlogContent[]) => {\n  return blogs.reduce(\n    (returnVal, currBlog) =>\n      returnVal.some((blog) => blog.id === currBlog.id && blog.channelId === currBlog.channelId)\n        ? returnVal\n        : [...returnVal, currBlog],\n    <BlogContent[]>[]\n  );\n};\n\nexport default useBlogPosts;\n"],"names":["className","blog","linkRoot","imageTargetDrive","channelId","alias","type","BlogConfig","undefined","to","slug","primaryImageFileId","fileId","targetDrive","alt","cover","toUpperCase","Date","dateUnixTime","toLocaleDateString","caption","abstract","t","viewBox","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","d","observer","defaultDrive","HomePageConfig","imageFileId","imageDrive","size","getSharedSecret","useAuth","queryClient","useQueryClient","fetchImageData","client","PublicClient","api","ApiType","sharedSecret","mediaProvider","getDecryptedImageUrl","fetch","useQuery","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","testCache","getQueryData","fileReadOnlyProvider","getFileEntryFromCache","thumbFromStaticFile","header","fileMetadata","appData","previewThumbnail","buffer","DataUtil","content","url","window","URL","createObjectURL","Blob","naturalSize","width","pixelWidth","height","pixelHeight","sizes","additionalThumbnails","getDecryptedThumbnailMeta","listenerCallbacks","WeakMap","handleIntersections","entries","forEach","entry","has","target","callback","get","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","IntersectionObserver","rootMargin","threshold","elem","title","useState","isInView","setIsInView","loadSize","setLoadSize","imgRef","useRef","thumbMeta","useTinyThumb","data","useImage","imageUrl","findLoadOptimalSize","useEffect","current","set","observe","length","setTimeout","targetWidth","clientWidth","targetHeight","clientHeight","matchingSize","find","state","indexOf","src","ref","channelSlug","blogSlug","fetchBlog","blogPostReadonlyProvider","getChannels","channels","map","item","convertTextToSlug","name","template","parseInt","templateId","ChannelTemplate","activeChannel","channel","loadBlogs","getRecentPosts","foundBlogPosts","itemKey","id","blogs","activeBlog","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","body","render","node","renderLeaf","text","attributes","renderElement","children","childNode","index","leaf","bold","code","italic","underline","Image","element","blogPosts","useBlogPosts","filteredBlogPosts","slice","filter","relatedBlog","useParams","channelKey","blogKey","useBlog","activeArticle","readingTimeStats","Math","ceil","minutes","RelatedBlogs","split","join","toLowerCase","clearDuplicateBlogs","reduce","returnVal","currBlog","some","fetchBlogData","GetFile","fileData","payload","sort","a","b","getPosts","posts","onError","er","console","log"],"sourceRoot":""}