{"version":3,"file":"static/js/930.ed0173c2.chunk.js","mappings":"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","sources":["components/Blog/Common/List/BlogTeaserList.tsx","components/Blog/Overview/ListBlogOverview/ListBlogOverview.tsx","components/Icons/Arrow/Arrow.tsx","hooks/intersection/useIntersection.ts","hooks/image/useImage.ts","hooks/image/useTinyThumb.ts","components/Image/Image.tsx","components/Submenu/Submenu.tsx","components/Templates/Blog/Recents/BlogRecents.tsx","helpers/common.ts","hooks/blog/useBlogPosts.ts","hooks/blog/useChannels.ts"],"sourcesContent":["import {\n  BlogArticle,\n  BlogConfig,\n  BlogContent,\n  BlogTypeUnion,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport Arrow from '../../../Icons/Arrow/Arrow';\nimport Image from '../../../Image/Image';\n\ninterface BlogTeaserProps {\n  className?: string;\n  blog: BlogContent;\n  linkRoot: string;\n}\n\nconst BlogTeaser: FC<BlogTeaserProps> = ({ className, blog, linkRoot }) => {\n  const imageTargetDrive: TargetDrive | undefined = blog.channelId\n    ? {\n        alias: blog.channelId,\n        type: BlogConfig.ChannelDriveType.toString(),\n      }\n    : undefined;\n\n  return (\n    <div\n      className={`flex flex-nowrap px-5 py-8 transition-colors duration-200 hover:bg-slate-50 hover:dark:bg-slate-800 ${\n        className ?? ''\n      }`}\n    >\n      <Link to={`${linkRoot}${blog.slug ?? '#'}`} className=\"contents\">\n        <div className=\"w-32 flex-shrink-0 pr-4 md:w-64 md:pr-8\">\n          {imageTargetDrive && blog.primaryImageFileId ? (\n            <Image\n              className=\"aspect-square w-full\"\n              fileId={blog.primaryImageFileId}\n              targetDrive={imageTargetDrive}\n              alt=\"blog\"\n              cover={true}\n            />\n          ) : null}\n        </div>\n        <div className=\"flex flex-col md:flex-grow md:flex-row\">\n          <div className=\"flex flex-shrink-0 md:order-3 md:mb-0 md:mt-3 md:w-32 md:flex-col md:text-right lg:w-64\">\n            <span className=\"title-font font-semibold text-gray-700 dark:text-white\">\n              {(blog as BlogTypeUnion).type.toUpperCase()}\n            </span>\n            <span className=\"pl-2 text-gray-500 md:mt-1 md:pl-0 md:text-sm\">\n              {new Date(blog.dateUnixTime).toLocaleDateString()}\n            </span>\n          </div>\n          <div className=\"md:order-2 md:flex-grow\">\n            <h2 className=\"title-font mb-2 text-2xl font-medium text-gray-900 dark:text-white\">\n              {blog.caption}\n            </h2>\n            {'abstract' in blog ? (\n              <p className=\"leading-relaxed\">{(blog as BlogArticle).abstract}</p>\n            ) : null}\n            <span className=\"mt-4 inline-flex items-center text-indigo-500\">\n              {t('learn more')}\n              <Arrow className=\"ml-2 h-4 w-4\" />\n            </span>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default BlogTeaser;\n","import { BlogContentVm } from '../../../../hooks/blog/useBlogPosts';\nimport BlogTeaserList from '../../Common/List/BlogTeaserList';\n\nconst ListBlogOverview = ({\n  blogPosts,\n  linkRoot,\n}: {\n  blogPosts: BlogContentVm[];\n  linkRoot: string;\n}) => {\n  return (\n    <div className=\"-m-5 divide-y-2 divide-gray-100 dark:divide-gray-800\">\n      {blogPosts?.map((blog) => {\n        return <BlogTeaserList key={blog.itemKey} blog={blog} linkRoot={linkRoot} />;\n      })}\n    </div>\n  );\n};\n\nexport default ListBlogOverview;\n","import { FC } from 'react';\n\nconst Arrow: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M5 12h14\"></path>\n      <path d=\"M12 5l7 7-7 7\"></path>\n    </svg>\n  );\n};\n\nexport default Arrow;\n","import React, { useEffect } from 'react';\n\nconst listenerCallbacks = new WeakMap();\n\nlet observer: IntersectionObserver;\n\nconst handleIntersections: IntersectionObserverCallback = (entries) => {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      const callback = listenerCallbacks.get(entry.target);\n\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        listenerCallbacks.delete(entry.target);\n        callback();\n      }\n    }\n  });\n};\n\nconst getIntersectionObserver = () => {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, {\n      rootMargin: '100px',\n      threshold: 0.15,\n    });\n  }\n  return observer;\n};\n\nexport const useIntersection = (elem: React.RefObject<HTMLElement>, callback: () => void) => {\n  useEffect(() => {\n    const target = elem.current;\n    const observer = getIntersectionObserver();\n\n    if (!target) {\n      return;\n    }\n\n    listenerCallbacks.set(target, callback);\n    observer.observe(target);\n\n    return () => {\n      listenerCallbacks.delete(target);\n      observer.unobserve(target);\n    };\n  }, []);\n};\n","import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  ApiType,\n  BlogConfig,\n  PublicClient,\n  HomePageConfig,\n  TargetDrive,\n  ThumbSize,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useImage = (imageFileId: string | undefined, imageDrive?: TargetDrive, size?: ThumbSize) => {\n  const { getSharedSecret } = useAuth();\n  const queryClient = useQueryClient();\n\n  const fetchImageData = async (\n    imageFileId: string | undefined,\n    imageDrive?: TargetDrive,\n    size?: ThumbSize\n  ) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n    return await client.mediaProvider.getDecryptedImageUrl(\n      imageDrive ?? defaultDrive,\n      imageFileId,\n      size\n    );\n  };\n\n  return {\n    fetch: useQuery(\n      ['image', imageFileId, imageDrive, size],\n      () => fetchImageData(imageFileId, imageDrive, size),\n      { refetchOnMount: false, refetchOnWindowFocus: false, staleTime: Infinity }\n    ),\n    testCache: (imageFileId: string, imageDrive: any) => {\n      const cache = queryClient.getQueryData(['image', imageFileId, imageDrive]);\n      return !!cache;\n    },\n  };\n};\n\nexport default useImage;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  ApiType,\n  BlogConfig,\n  PublicClient,\n  HomePageConfig,\n  TargetDrive,\n  DataUtil,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useTinyThumb = (imageFileId: string | undefined, imageDrive?: TargetDrive) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetchImageData = async (imageFileId: string | undefined, imageDrive?: TargetDrive) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    // Look for tiny thumb in already fetched data:\n    const thumbFromStaticFile = await client.fileReadOnlyProvider.getFileEntryFromCache(\n      imageFileId\n    );\n    if (thumbFromStaticFile?.[0]?.header.fileMetadata.appData.previewThumbnail) {\n      const previewThumbnail = thumbFromStaticFile[0].header.fileMetadata.appData.previewThumbnail;\n      const buffer = DataUtil.base64ToUint8Array(previewThumbnail.content);\n      const url = window.URL.createObjectURL(new Blob([buffer]));\n\n      return {\n        naturalSize: { width: previewThumbnail.pixelWidth, height: previewThumbnail.pixelHeight },\n        sizes: thumbFromStaticFile[0].header.fileMetadata.appData.additionalThumbnails ?? [],\n        url,\n      };\n    }\n\n    return await client.mediaProvider.getDecryptedThumbnailMeta(\n      imageDrive ?? defaultDrive,\n      imageFileId\n    );\n  };\n\n  return useQuery(\n    ['tinyThumb', imageFileId, imageDrive],\n    () => fetchImageData(imageFileId, imageDrive),\n    {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n    }\n  );\n};\n\nexport default useTinyThumb;\n","import { TargetDrive, ThumbSize } from '@youfoundation/transit-lib';\nimport { useEffect, useRef, useState } from 'react';\nimport useImage from '../../hooks/image/useImage';\nimport useTinyThumb from '../../hooks/image/useTinyThumb';\nimport { useIntersection } from '../../hooks/intersection/useIntersection';\n\ninterface ImageProps {\n  targetDrive: TargetDrive;\n  fileId: string | undefined;\n  cover?: boolean;\n  className?: string;\n  alt?: string;\n  title?: string;\n}\n\nconst Image = ({ targetDrive, fileId, cover, className, alt, title }: ImageProps) => {\n  const [isInView, setIsInView] = useState(false);\n  const [loadSize, setLoadSize] = useState<ThumbSize | 'full' | undefined>(undefined);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const { data: thumbMeta } = useTinyThumb(isInView ? fileId : undefined, targetDrive);\n  const {\n    fetch: { data: imageUrl },\n    testCache,\n  } = useImage(\n    loadSize !== undefined ? fileId : undefined,\n    targetDrive,\n    loadSize !== 'full' ? loadSize : undefined\n  );\n\n  useIntersection(imgRef, () => {\n    if (fileId && testCache(fileId, targetDrive)) {\n      findLoadOptimalSize();\n    }\n    setIsInView(true);\n  });\n\n  useEffect(() => {\n    if (thumbMeta && thumbMeta.url?.length) {\n      // Set to load full, with timeout to allow other tinies to load\n      setTimeout(() => {\n        findLoadOptimalSize();\n      }, 100);\n    }\n  }, [thumbMeta]);\n\n  const findLoadOptimalSize = () => {\n    if (!thumbMeta?.sizes?.length || !imgRef.current) {\n      setLoadSize('full');\n      return;\n    }\n\n    const targetWidth = imgRef.current?.clientWidth;\n    const targetHeight = imgRef.current?.clientHeight;\n\n    const matchingSize = thumbMeta.sizes.find((size) => {\n      return targetWidth < size.pixelWidth && targetHeight < size.pixelHeight;\n    });\n\n    setLoadSize(matchingSize ?? 'full');\n  };\n\n  const state: 'idle' | 'loading-tiny' | 'tiny' | 'loading-full' | 'loaded' = loadSize\n    ? imageUrl\n      ? 'loaded'\n      : 'loading-full'\n    : isInView\n    ? thumbMeta && thumbMeta.url?.length\n      ? 'tiny'\n      : 'loading-tiny'\n    : 'idle';\n\n  return (\n    <figure\n      className={`${\n        className?.indexOf('absolute') !== -1 ? '' : 'relative'\n      } overflow-hidden ${className}`}\n    >\n      {state !== 'loading-tiny' ? (\n        <img\n          src={state === 'loaded' ? imageUrl : thumbMeta?.url}\n          alt={isInView && thumbMeta?.url ? alt : ' '}\n          className={`${state !== 'loaded' && 'blur-[50px]'} ${\n            cover ? 'h-full w-full object-cover' : ''\n          }`}\n          title={\n            title ||\n            `${fileId}@${\n              loadSize !== undefined && loadSize !== 'full'\n                ? `${loadSize.pixelWidth}x${loadSize.pixelHeight}`\n                : loadSize\n            }`\n          }\n          ref={imgRef}\n          width={thumbMeta?.naturalSize?.width}\n          height={thumbMeta?.naturalSize?.height}\n        />\n      ) : null}\n    </figure>\n  );\n};\n\nexport default Image;\n","import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ninterface SubmenuProps {\n  className?: string;\n  items: { title: string; key: string; path: string }[];\n}\n\nconst Submenu: FC<SubmenuProps> = ({ className, items }) => {\n  return (\n    <div className={`flex ${className}`}>\n      {items.map((item) => {\n        return (\n          // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n          <NavLink\n            className={({ isActive }) =>\n              `flex-grow cursor-pointer border-b-2 py-2 px-1 text-lg ${\n                isActive\n                  ? 'border-indigo-500 text-indigo-500 dark:text-indigo-400'\n                  : 'border-gray-300 transition-colors duration-300 hover:border-indigo-400 dark:border-gray-800 hover:dark:border-indigo-600'\n              }`\n            }\n            to={item.path}\n            key={item.key}\n            end\n          >\n            {item.title}\n          </NavLink>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Submenu;\n","import { Helmet } from 'react-helmet-async';\n\nimport Submenu from '../../../Submenu/Submenu';\nimport useBlogPosts from '../../../../hooks/blog/useBlogPosts';\nimport useChannels from '../../../../hooks/blog/useChannels';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport ListBlogOverview from '../../../Blog/Overview/ListBlogOverview/ListBlogOverview';\n\nconst BlogRecents = () => {\n  const { channels } = useChannels().data ?? {};\n  const { blogPosts } = useBlogPosts({}).data ?? {};\n  const linkRoot = `/home/blog/all/`;\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('blog')} | Youniverse</title>\n      </Helmet>\n\n      <section className=\"py-5\">\n        <div className=\"container mx-auto px-5\">\n          <section className=\"body-font text-gray-600 dark:text-gray-400\">\n            {channels?.length ? (\n              <Submenu\n                className=\"mb-8\"\n                items={[\n                  { key: '', title: t('Recents'), path: '/home/blog' },\n                  ...channels.map((channel) => {\n                    return {\n                      key: channel.channelId,\n                      title: channel.name,\n                      path: `/home/blog/${channel.slug}`,\n                    };\n                  }),\n                ]}\n              />\n            ) : null}\n\n            {blogPosts ? <ListBlogOverview blogPosts={blogPosts} linkRoot={linkRoot} /> : null}\n          </section>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default BlogRecents;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: Record<string, unknown>) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, BlogContent, PublicClient } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsProps = {\n  channelId?: string;\n};\n\nexport interface BlogContentVm extends BlogContent {\n  itemKey?: string;\n}\n\nconst useBlogPosts = ({ channelId }: useBlogPostsProps) => {\n  const { getSharedSecret } = useAuth();\n  const pageSize = 10;\n\n  const fetchBlogData = async ({ channelId }: { channelId?: string }) => {\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    // Blog posts\n    let foundBlogPosts: BlogContentVm[];\n\n    // If located in a specific channel, only fetch those, otherwise fallback to recents;\n    if (channelId) {\n      const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n      if (fileData.has(channelId)) {\n        foundBlogPosts =\n          fileData.get(channelId)?.map((entry) => {\n            const item = entry.payload;\n\n            return {\n              ...item,\n              slug: convertTextToSlug(typeof item.caption === 'string' ? item.caption : ''),\n              itemKey: `${item.channelId}_${item.id}`,\n            } as BlogContentVm;\n          }) ?? [];\n      } else {\n        if (fileData.entries.length > 1) {\n          foundBlogPosts = [];\n\n          for (const channelId of fileData.keys()) {\n            foundBlogPosts = [\n              ...foundBlogPosts,\n              ...(fileData.get(channelId)?.map((entry) => {\n                const item = entry.payload;\n\n                return {\n                  ...item,\n                  slug: convertTextToSlug(typeof item.caption === 'string' ? item.caption : ''),\n                  itemKey: `${item.channelId}_${item.id}`,\n                } as BlogContentVm;\n              }) ?? []),\n            ];\n\n            // Sorted descending\n            foundBlogPosts.sort((a, b) => b.dateUnixTime - a.dateUnixTime);\n          }\n        } else {\n          foundBlogPosts = (\n            await client.blogPostReadonlyProvider.getPosts(\n              channelId,\n              'Article',\n              undefined,\n              pageSize\n            )\n          ).posts;\n        }\n      }\n    } else {\n      foundBlogPosts = await client.blogPostReadonlyProvider.getRecentPosts('Article', pageSize);\n    }\n\n    // Process blog posts (Only until fixed in data upload)\n    const blogPosts = clearDuplicateBlogs(foundBlogPosts).map((item) => {\n      return {\n        ...item,\n        slug: convertTextToSlug(item.caption),\n        itemKey: `${item.channelId}_${item.id}`,\n      };\n    });\n\n    return { blogPosts };\n  };\n\n  return useQuery(['blogs_recents', channelId], () => fetchBlogData({ channelId }), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    onError: (er) => {\n      console.log(er);\n    },\n  });\n};\n\n//// TODO Remove these temporary helpers:\nconst clearDuplicateBlogs = (blogs: BlogContent[]) => {\n  return blogs.reduce(\n    (returnVal, currBlog) =>\n      returnVal.some((blog) => blog.id === currBlog.id && blog.channelId === currBlog.channelId)\n        ? returnVal\n        : [...returnVal, currBlog],\n    <BlogContent[]>[]\n  );\n};\n\nexport default useBlogPosts;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  ApiType,\n  ChannelDefinition,\n  ChannelTemplate,\n  PublicClient,\n} from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\ntype useChannelsProps = {\n  channelSlug: string;\n};\n\nexport interface ChannelDefinitionVm extends ChannelDefinition {\n  slug: string;\n  template: ChannelTemplate;\n}\n\nconst useChannels = ({ channelSlug }: useChannelsProps = { channelSlug: '' }) => {\n  const { getSharedSecret } = useAuth();\n\n  const parseTemplate = (templateId: number | undefined) => {\n    return parseInt(templateId + '') === ChannelTemplate.LargeCards\n      ? ChannelTemplate.LargeCards\n      : parseInt(templateId + '') === ChannelTemplate.ClassicBlog\n      ? ChannelTemplate.ClassicBlog\n      : ChannelTemplate.MasonryLayout;\n  };\n\n  const fetchChannelData = async (channelSlug: string | undefined) => {\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n    let channels: ChannelDefinitionVm[];\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('channels.json');\n\n    if (fileData.has('channels')) {\n      channels =\n        fileData.get('channels')?.map((entry: any) => {\n          const item = entry.payload;\n          return {\n            ...item,\n            slug: convertTextToSlug(item?.name),\n            template: parseTemplate(item?.templateId),\n          } as ChannelDefinitionVm;\n        }) ?? [];\n    } else {\n      channels = (await client.blogPostReadonlyProvider.getChannels()).map((item) => {\n        return {\n          ...item,\n          slug: convertTextToSlug(item?.name),\n          template: parseTemplate(item?.templateId),\n        } as ChannelDefinitionVm;\n      });\n    }\n\n    // Active Channel\n    const activeChannel = channelSlug\n      ? channels?.find((channel) => convertTextToSlug(channel.name) === channelSlug) ?? undefined\n      : undefined;\n\n    return { channels, activeChannel };\n  };\n\n  return useQuery(['channels', channelSlug], () => fetchChannelData(channelSlug), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n  });\n};\n\nexport default useChannels;\n"],"names":["className","blog","linkRoot","imageTargetDrive","channelId","alias","type","BlogConfig","undefined","to","slug","primaryImageFileId","Image","fileId","targetDrive","alt","cover","toUpperCase","Date","dateUnixTime","toLocaleDateString","caption","abstract","t","Arrow","blogPosts","map","BlogTeaserList","itemKey","viewBox","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","d","observer","defaultDrive","HomePageConfig","imageFileId","imageDrive","size","getSharedSecret","useAuth","queryClient","useQueryClient","fetchImageData","client","PublicClient","api","ApiType","sharedSecret","mediaProvider","getDecryptedImageUrl","fetch","useQuery","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","testCache","getQueryData","fileReadOnlyProvider","getFileEntryFromCache","thumbFromStaticFile","header","fileMetadata","appData","previewThumbnail","buffer","DataUtil","content","url","window","URL","createObjectURL","Blob","naturalSize","width","pixelWidth","height","pixelHeight","sizes","additionalThumbnails","getDecryptedThumbnailMeta","listenerCallbacks","WeakMap","handleIntersections","entries","forEach","entry","has","target","callback","get","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","IntersectionObserver","rootMargin","threshold","elem","title","useState","isInView","setIsInView","loadSize","setLoadSize","imgRef","useRef","thumbMeta","useTinyThumb","data","useImage","imageUrl","findLoadOptimalSize","useEffect","current","set","observe","length","setTimeout","targetWidth","clientWidth","targetHeight","clientHeight","matchingSize","find","state","indexOf","src","ref","items","item","isActive","path","end","key","channels","useChannels","useBlogPosts","channel","name","convertTextToSlug","text","split","join","toLowerCase","clearDuplicateBlogs","blogs","reduce","returnVal","currBlog","some","id","fetchBlogData","GetFile","fileData","foundBlogPosts","payload","keys","sort","a","b","blogPostReadonlyProvider","getPosts","posts","getRecentPosts","onError","er","console","log","channelSlug","parseTemplate","templateId","parseInt","ChannelTemplate","fetchChannelData","template","getChannels","activeChannel"],"sourceRoot":""}