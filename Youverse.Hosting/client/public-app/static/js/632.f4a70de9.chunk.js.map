{"version":3,"file":"static/js/632.f4a70de9.chunk.js","mappings":"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","sources":["components/Blog/Common/Card/BlogTeaserCard.tsx","components/Blog/Common/List/BlogTeaserList.tsx","components/Blog/Overview/ListBlogOverview/ListBlogOverview.tsx","components/Icons/Arrow/Arrow.tsx","hooks/intersection/useIntersection.ts","hooks/image/useImage.ts","hooks/image/useTinyThumb.ts","components/Image/Image.tsx","components/Submenu/Submenu.tsx","components/Templates/Blog/Overview/BlogOverview.tsx","hooks/blog/useBlogPostsInfinite.ts","components/Blog/Overview/CardBlogOverview/CardBlogOverview.tsx","components/Blog/Overview/MasonryBlogOverview/MasonryBlogOverview.tsx","helpers/common.ts","hooks/blog/useChannels.ts"],"sourcesContent":["import {\n  BlogArticle,\n  BlogConfig,\n  BlogContent,\n  BlogTypeUnion,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../Image/Image';\nimport Arrow from '../../../Icons/Arrow/Arrow';\nimport { t } from '../../../../helpers/i18n/dictionary';\n\ninterface BlogTeaserProps {\n  className?: string;\n  blog: BlogContent;\n  linkRoot: string;\n}\n\nconst BlogTeaser: FC<BlogTeaserProps> = ({ className, blog, linkRoot }) => {\n  const imageTargetDrive: TargetDrive | undefined = blog.channelId\n    ? {\n        alias: blog.channelId,\n        type: BlogConfig.ChannelDriveType.toString(),\n      }\n    : undefined;\n\n  return (\n    <div className={`${className ?? ''}`}>\n      <Link to={`${linkRoot}${blog.slug ?? '#'}`} className=\"contents\">\n        <div className=\"h-full overflow-hidden rounded-lg border-2 border-gray-200 border-opacity-60 bg-white transition-colors duration-300 hover:bg-slate-50 dark:border-gray-800 dark:bg-gray-800 hover:dark:bg-slate-700\">\n          {blog.primaryImageFileId && imageTargetDrive ? (\n            <Image\n              className=\"h-64 w-full md:h-36 lg:h-48\"\n              fileId={blog.primaryImageFileId}\n              targetDrive={imageTargetDrive}\n              alt=\"blog\"\n              cover={true}\n            />\n          ) : null}\n          <div className=\"p-6\">\n            <h2 className=\"title-font mb-1 text-xs font-medium tracking-widest text-gray-400 dark:text-gray-600\">\n              {(blog as BlogTypeUnion).type.toUpperCase()}\n            </h2>\n            <span className=\"text-gray-500 md:mt-1 md:text-sm\">\n              {new Date(blog.dateUnixTime).toLocaleDateString()}\n            </span>\n            <h1 className=\"title-font mb-3 text-lg font-medium text-gray-900 dark:text-white\">\n              {blog.caption}\n            </h1>\n            {'abstract' in blog ? (\n              <p className=\"mb-3 leading-relaxed\">{(blog as BlogArticle).abstract}</p>\n            ) : null}\n            <div className=\"flex flex-wrap items-center \">\n              <span className=\"inline-flex items-center text-indigo-500 dark:text-indigo-400 md:mb-2 lg:mb-0\">\n                {t('learn more')}\n                <Arrow className=\"ml-2 h-4 w-4\" />\n              </span>\n            </div>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default BlogTeaser;\n","import {\n  BlogArticle,\n  BlogConfig,\n  BlogContent,\n  BlogTypeUnion,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport Arrow from '../../../Icons/Arrow/Arrow';\nimport Image from '../../../Image/Image';\n\ninterface BlogTeaserProps {\n  className?: string;\n  blog: BlogContent;\n  linkRoot: string;\n}\n\nconst BlogTeaser: FC<BlogTeaserProps> = ({ className, blog, linkRoot }) => {\n  const imageTargetDrive: TargetDrive | undefined = blog.channelId\n    ? {\n        alias: blog.channelId,\n        type: BlogConfig.ChannelDriveType.toString(),\n      }\n    : undefined;\n\n  return (\n    <div\n      className={`flex flex-nowrap px-5 py-8 transition-colors duration-200 hover:bg-slate-50 hover:dark:bg-slate-800 ${\n        className ?? ''\n      }`}\n    >\n      <Link to={`${linkRoot}${blog.slug ?? '#'}`} className=\"contents\">\n        <div className=\"w-32 flex-shrink-0 pr-4 md:w-64 md:pr-8\">\n          {imageTargetDrive && blog.primaryImageFileId ? (\n            <Image\n              className=\"aspect-square w-full\"\n              fileId={blog.primaryImageFileId}\n              targetDrive={imageTargetDrive}\n              alt=\"blog\"\n              cover={true}\n            />\n          ) : null}\n        </div>\n        <div className=\"flex flex-col md:flex-grow md:flex-row\">\n          <div className=\"flex flex-shrink-0 md:order-3 md:mb-0 md:mt-3 md:w-32 md:flex-col md:text-right lg:w-64\">\n            <span className=\"title-font font-semibold text-gray-700 dark:text-white\">\n              {(blog as BlogTypeUnion).type.toUpperCase()}\n            </span>\n            <span className=\"pl-2 text-gray-500 md:mt-1 md:pl-0 md:text-sm\">\n              {new Date(blog.dateUnixTime).toLocaleDateString()}\n            </span>\n          </div>\n          <div className=\"md:order-2 md:flex-grow\">\n            <h2 className=\"title-font mb-2 text-2xl font-medium text-gray-900 dark:text-white\">\n              {blog.caption}\n            </h2>\n            {'abstract' in blog ? (\n              <p className=\"leading-relaxed\">{(blog as BlogArticle).abstract}</p>\n            ) : null}\n            <span className=\"mt-4 inline-flex items-center text-indigo-500\">\n              {t('learn more')}\n              <Arrow className=\"ml-2 h-4 w-4\" />\n            </span>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default BlogTeaser;\n","import { BlogContentVm } from '../../../../hooks/blog/useBlogPosts';\nimport BlogTeaserList from '../../Common/List/BlogTeaserList';\n\nconst ListBlogOverview = ({\n  blogPosts,\n  linkRoot,\n}: {\n  blogPosts: BlogContentVm[];\n  linkRoot: string;\n}) => {\n  return (\n    <div className=\"-m-5 divide-y-2 divide-gray-100 dark:divide-gray-800\">\n      {blogPosts?.map((blog) => {\n        return <BlogTeaserList key={blog.itemKey} blog={blog} linkRoot={linkRoot} />;\n      })}\n    </div>\n  );\n};\n\nexport default ListBlogOverview;\n","import { FC } from 'react';\n\nconst Arrow: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M5 12h14\"></path>\n      <path d=\"M12 5l7 7-7 7\"></path>\n    </svg>\n  );\n};\n\nexport default Arrow;\n","import React, { useEffect } from 'react';\n\nconst listenerCallbacks = new WeakMap();\n\nlet observer: IntersectionObserver;\n\nconst handleIntersections: IntersectionObserverCallback = (entries) => {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      const callback = listenerCallbacks.get(entry.target);\n\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        listenerCallbacks.delete(entry.target);\n        callback();\n      }\n    }\n  });\n};\n\nconst getIntersectionObserver = () => {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, {\n      rootMargin: '100px',\n      threshold: 0.15,\n    });\n  }\n  return observer;\n};\n\nexport const useIntersection = (elem: React.RefObject<HTMLElement>, callback: () => void) => {\n  useEffect(() => {\n    const target = elem.current;\n    const observer = getIntersectionObserver();\n\n    if (!target) {\n      return;\n    }\n\n    listenerCallbacks.set(target, callback);\n    observer.observe(target);\n\n    return () => {\n      listenerCallbacks.delete(target);\n      observer.unobserve(target);\n    };\n  }, []);\n};\n","import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  ApiType,\n  BlogConfig,\n  PublicClient,\n  HomePageConfig,\n  TargetDrive,\n  ThumbSize,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useImage = (imageFileId: string | undefined, imageDrive?: TargetDrive, size?: ThumbSize) => {\n  const { getSharedSecret } = useAuth();\n  const queryClient = useQueryClient();\n\n  const fetchImageData = async (\n    imageFileId: string | undefined,\n    imageDrive?: TargetDrive,\n    size?: ThumbSize\n  ) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n    return await client.mediaProvider.getDecryptedImageUrl(\n      imageDrive ?? defaultDrive,\n      imageFileId,\n      size\n    );\n  };\n\n  return {\n    fetch: useQuery(\n      ['image', imageFileId, imageDrive, size],\n      () => fetchImageData(imageFileId, imageDrive, size),\n      { refetchOnMount: false, refetchOnWindowFocus: false, staleTime: Infinity }\n    ),\n    testCache: (imageFileId: string, imageDrive: any) => {\n      const cache = queryClient.getQueryData(['image', imageFileId, imageDrive]);\n      return !!cache;\n    },\n  };\n};\n\nexport default useImage;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  ApiType,\n  BlogConfig,\n  PublicClient,\n  HomePageConfig,\n  TargetDrive,\n  DataUtil,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useTinyThumb = (imageFileId: string | undefined, imageDrive?: TargetDrive) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetchImageData = async (imageFileId: string | undefined, imageDrive?: TargetDrive) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    // Look for tiny thumb in already fetched data:\n    const thumbFromStaticFile = await client.fileReadOnlyProvider.getFileEntryFromCache(\n      imageFileId\n    );\n    if (thumbFromStaticFile?.[0]?.header.fileMetadata.appData.previewThumbnail) {\n      const previewThumbnail = thumbFromStaticFile[0].header.fileMetadata.appData.previewThumbnail;\n      const buffer = DataUtil.base64ToUint8Array(previewThumbnail.content);\n      const url = window.URL.createObjectURL(new Blob([buffer]));\n\n      return {\n        naturalSize: { width: previewThumbnail.pixelWidth, height: previewThumbnail.pixelHeight },\n        sizes: thumbFromStaticFile[0].header.fileMetadata.appData.additionalThumbnails ?? [],\n        url,\n      };\n    }\n\n    return await client.mediaProvider.getDecryptedThumbnailMeta(\n      imageDrive ?? defaultDrive,\n      imageFileId\n    );\n  };\n\n  return useQuery(\n    ['tinyThumb', imageFileId, imageDrive],\n    () => fetchImageData(imageFileId, imageDrive),\n    {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n    }\n  );\n};\n\nexport default useTinyThumb;\n","import { TargetDrive, ThumbSize } from '@youfoundation/transit-lib';\nimport { useEffect, useRef, useState } from 'react';\nimport useImage from '../../hooks/image/useImage';\nimport useTinyThumb from '../../hooks/image/useTinyThumb';\nimport { useIntersection } from '../../hooks/intersection/useIntersection';\n\ninterface ImageProps {\n  targetDrive: TargetDrive;\n  fileId: string | undefined;\n  cover?: boolean;\n  className?: string;\n  alt?: string;\n  title?: string;\n}\n\nconst Image = ({ targetDrive, fileId, cover, className, alt, title }: ImageProps) => {\n  const [isInView, setIsInView] = useState(false);\n  const [loadSize, setLoadSize] = useState<ThumbSize | 'full' | undefined>(undefined);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const { data: thumbMeta } = useTinyThumb(isInView ? fileId : undefined, targetDrive);\n  const {\n    fetch: { data: imageUrl },\n    testCache,\n  } = useImage(\n    loadSize !== undefined ? fileId : undefined,\n    targetDrive,\n    loadSize !== 'full' ? loadSize : undefined\n  );\n\n  useIntersection(imgRef, () => {\n    if (fileId && testCache(fileId, targetDrive)) {\n      findLoadOptimalSize();\n    }\n    setIsInView(true);\n  });\n\n  useEffect(() => {\n    if (thumbMeta && thumbMeta.url?.length) {\n      // Set to load full, with timeout to allow other tinies to load\n      setTimeout(() => {\n        findLoadOptimalSize();\n      }, 100);\n    }\n  }, [thumbMeta]);\n\n  const findLoadOptimalSize = () => {\n    if (!thumbMeta?.sizes?.length || !imgRef.current) {\n      setLoadSize('full');\n      return;\n    }\n\n    const targetWidth = imgRef.current?.clientWidth;\n    const targetHeight = imgRef.current?.clientHeight;\n\n    const matchingSize = thumbMeta.sizes.find((size) => {\n      return targetWidth < size.pixelWidth && targetHeight < size.pixelHeight;\n    });\n\n    setLoadSize(matchingSize ?? 'full');\n  };\n\n  const state: 'idle' | 'loading-tiny' | 'tiny' | 'loading-full' | 'loaded' = loadSize\n    ? imageUrl\n      ? 'loaded'\n      : 'loading-full'\n    : isInView\n    ? thumbMeta && thumbMeta.url?.length\n      ? 'tiny'\n      : 'loading-tiny'\n    : 'idle';\n\n  return (\n    <figure\n      className={`${\n        className?.indexOf('absolute') !== -1 ? '' : 'relative'\n      } overflow-hidden ${className}`}\n    >\n      {state !== 'loading-tiny' ? (\n        <img\n          src={state === 'loaded' ? imageUrl : thumbMeta?.url}\n          alt={isInView && thumbMeta?.url ? alt : ' '}\n          className={`${state !== 'loaded' && 'blur-[50px]'} ${\n            cover ? 'h-full w-full object-cover' : ''\n          }`}\n          title={\n            title ||\n            `${fileId}@${\n              loadSize !== undefined && loadSize !== 'full'\n                ? `${loadSize.pixelWidth}x${loadSize.pixelHeight}`\n                : loadSize\n            }`\n          }\n          ref={imgRef}\n          width={thumbMeta?.naturalSize?.width}\n          height={thumbMeta?.naturalSize?.height}\n        />\n      ) : null}\n    </figure>\n  );\n};\n\nexport default Image;\n","import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ninterface SubmenuProps {\n  className?: string;\n  items: { title: string; key: string; path: string }[];\n}\n\nconst Submenu: FC<SubmenuProps> = ({ className, items }) => {\n  return (\n    <div className={`flex ${className}`}>\n      {items.map((item) => {\n        return (\n          // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n          <NavLink\n            className={({ isActive }) =>\n              `flex-grow cursor-pointer border-b-2 py-2 px-1 text-lg ${\n                isActive\n                  ? 'border-indigo-500 text-indigo-500 dark:text-indigo-400'\n                  : 'border-gray-300 transition-colors duration-300 hover:border-indigo-400 dark:border-gray-800 hover:dark:border-indigo-600'\n              }`\n            }\n            to={item.path}\n            key={item.key}\n            end\n          >\n            {item.title}\n          </NavLink>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Submenu;\n","import { Helmet } from 'react-helmet-async';\n\nimport Submenu from '../../../Submenu/Submenu';\nimport { useParams } from 'react-router-dom';\nimport { BlogContentVm } from '../../../../hooks/blog/useBlogPosts';\nimport { ChannelTemplate } from '@youfoundation/transit-lib';\nimport { useEffect, useRef, useState } from 'react';\nimport useChannels from '../../../../hooks/blog/useChannels';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport useBlogPostsInfinite from '../../../../hooks/blog/useBlogPostsInfinite';\nimport CardBlogOverview from '../../../Blog/Overview/CardBlogOverview/CardBlogOverview';\nimport ListBlogOverview from '../../../Blog/Overview/ListBlogOverview/ListBlogOverview';\nimport MasonryBlogOverview from '../../../Blog/Overview/MasonryBlogOverview/MasonryBlogOverview';\n\nlet observer: IntersectionObserver | null;\n\nconst Overview = () => {\n  const { channelKey } = useParams();\n  const [pageIndex, setPageIndex] = useState(1);\n\n  const { channels, activeChannel } =\n    useChannels(channelKey ? { channelSlug: channelKey } : undefined).data ?? {};\n\n  const { data, isLoading, fetchNextPage } = useBlogPostsInfinite({\n    channelId: activeChannel?.channelId,\n  });\n\n  const loadMoreRef = useRef<HTMLAnchorElement>(null);\n\n  const ListComponent = activeChannel\n    ? activeChannel.template === ChannelTemplate.LargeCards\n      ? CardBlogOverview\n      : activeChannel.template === ChannelTemplate.MasonryLayout\n      ? MasonryBlogOverview\n      : ListBlogOverview\n    : ListBlogOverview;\n  const linkRoot = `/home/blog/${activeChannel?.slug ? activeChannel.slug + '/' : 'all/'}`;\n\n  useEffect(() => {\n    if (!observer) {\n      observer = new IntersectionObserver(\n        (entries) => {\n          const first = entries[0];\n          if (first.isIntersecting) {\n            fetchNextPage();\n          }\n        },\n        { rootMargin: '0px 0px 200px 0px' } // Load the next when the \"Load more\" button comes in at 200px below the viewport\n      );\n    }\n\n    if (loadMoreRef.current) {\n      observer.observe(loadMoreRef.current);\n    }\n\n    return () => {\n      observer?.disconnect();\n      observer = null;\n    };\n  }, [loadMoreRef, loadMoreRef.current]);\n\n  const blogPosts = data?.pages?.reduce<BlogContentVm[]>((currArray, page) => {\n    if (page?.posts) {\n      return [...currArray, ...page.posts];\n    } else {\n      return currArray;\n    }\n  }, []);\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('blog')} | Youniverse</title>\n      </Helmet>\n\n      <section className=\"py-5\">\n        <div className=\"container mx-auto px-5\">\n          <section className=\"body-font text-gray-600 dark:text-gray-400\">\n            {channels?.length ? (\n              <Submenu\n                className=\"mb-8\"\n                items={[\n                  { key: '', title: t('Recents'), path: '/home/blog' },\n                  ...channels.map((channel) => {\n                    return {\n                      key: channel.channelId,\n                      title: channel.name,\n                      path: `/home/blog/${channel.slug}`,\n                    };\n                  }),\n                ]}\n              />\n            ) : null}\n            {blogPosts ? <ListComponent blogPosts={blogPosts} linkRoot={linkRoot} /> : null}\n\n            <a\n              onClick={(e) => {\n                e.preventDefault();\n                if (!isLoading) {\n                  setPageIndex(pageIndex + 1);\n                }\n                return false;\n              }}\n              className={`my-10 block w-full cursor-pointer rounded border-0 bg-indigo-500 py-2 px-4 text-center text-white hover:bg-indigo-600 focus:outline-none ${\n                !blogPosts?.length ? 'hidden' : ''\n              }`}\n              ref={loadMoreRef}\n            >\n              {isLoading ? t('loading') + '...' : t('load more')}\n            </a>\n          </section>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Overview;\n","import { useInfiniteQuery } from '@tanstack/react-query';\nimport { ApiType, BlogContent, PublicClient } from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\nimport { BlogContentVm } from './useBlogPosts';\n\ntype useBlogPostsInfiniteProps = {\n  channelId?: string;\n};\n\nconst useBlogPostsInfinite = ({ channelId }: useBlogPostsInfiniteProps) => {\n  const { getSharedSecret } = useAuth();\n  const pageSize = 10;\n\n  const fetchBlogData = async ({\n    channelId,\n    pageParam,\n  }: {\n    channelId?: string;\n    pageParam: string | undefined;\n  }) => {\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    if (!channelId) {\n      return;\n    }\n\n    // Blog posts\n    let foundBlogPosts: BlogContentVm[];\n\n    const response = await client.blogPostReadonlyProvider.getPosts(\n      channelId,\n      'Article',\n      pageParam,\n      pageSize\n    );\n\n    // Process blog posts (Only until fixed in data upload)\n    // eslint-disable-next-line prefer-const\n    foundBlogPosts = clearDuplicateBlogs(response.posts).map((item) => {\n      return {\n        ...item,\n        slug: convertTextToSlug(item.caption),\n        itemKey: `${item.channelId}_${item.id}`,\n      };\n    });\n\n    // Process blog posts (Only until fixed in data upload)\n    foundBlogPosts = clearDuplicateBlogs(foundBlogPosts).map((item) => {\n      return { ...item, slug: convertTextToSlug(item.caption) };\n    });\n\n    return { posts: foundBlogPosts, cursorState: response.cursorState };\n  };\n\n  return useInfiniteQuery(\n    ['blogs', channelId],\n    ({ pageParam }) => fetchBlogData({ channelId, pageParam }),\n    {\n      getNextPageParam: (lastPage) => lastPage?.cursorState ?? undefined,\n      // refetchOnMount: false,\n      // refetchOnWindowFocus: false,\n      // // staleTime: Infinity,\n      // onError: (er) => {\n      //   console.log(er);\n      // },\n    }\n  );\n};\n\n//// TODO Remove these temporary helpers:\nconst clearDuplicateBlogs = (blogs: BlogContent[]) => {\n  return blogs.reduce(\n    (returnVal, currBlog) =>\n      returnVal.some((blog) => blog.id === currBlog.id && blog.channelId === currBlog.channelId)\n        ? returnVal\n        : [...returnVal, currBlog],\n    <BlogContent[]>[]\n  );\n};\n\nexport default useBlogPostsInfinite;\n","import { BlogContentVm } from '../../../../hooks/blog/useBlogPosts';\nimport BlogTeaserCard from '../../Common/Card/BlogTeaserCard';\n\nconst CardBlogOverview = ({\n  blogPosts,\n  linkRoot,\n}: {\n  blogPosts: BlogContentVm[];\n  linkRoot: string;\n}) => {\n  return (\n    <div className=\"-m-4 flex flex-wrap\">\n      {blogPosts?.map((blog) => {\n        return (\n          <BlogTeaserCard\n            key={blog.itemKey}\n            blog={blog}\n            className=\"p-4 md:w-1/2 lg:w-1/3 \"\n            linkRoot={linkRoot}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardBlogOverview;\n","import { useCallback, useEffect, useState } from 'react';\nimport { BlogContentVm } from '../../../../hooks/blog/useBlogPosts';\nimport BlogTeaserCard from '../../Common/Card/BlogTeaserCard';\n\nconst MasonryBlogOverview = ({\n  blogPosts,\n  linkRoot,\n}: {\n  blogPosts: BlogContentVm[];\n  linkRoot: string;\n}) => {\n  const [cols, setCols] = useState(1);\n\n  /// Function to reorder the array to make it fit in the masonry layout which by\n  ///  default is ordered from top to bottom, instead of left to right\n  ///  credit: https://github.com/jessekorzan/masonry-css-js/blob/master/src/App.js\n  const reorder = (arr: BlogContentVm[], columns: number) => {\n    const cols = columns;\n    const out = [];\n    let col = 0;\n    while (col < cols) {\n      for (let i = 0; i < arr.length; i += cols) {\n        const _val = arr[i + col];\n        if (_val !== undefined) out.push(_val);\n      }\n      col++;\n    }\n    return out;\n  };\n\n  const calculateCols = useCallback(() => {\n    const windowWidth = document.documentElement.clientWidth;\n    const cols = windowWidth >= 1280 ? 4 : windowWidth >= 1024 ? 3 : windowWidth >= 640 ? 2 : 1;\n    setCols(cols);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', calculateCols);\n\n    calculateCols();\n\n    return () => {\n      window.removeEventListener('resize', calculateCols);\n    };\n  }, [calculateCols]);\n\n  return (\n    <div className=\"-my-4 gap-4 sm:columns-2 lg:columns-3 xl:columns-4\">\n      {reorder(blogPosts, cols).map((blog) => {\n        return (\n          <BlogTeaserCard className=\"py-2\" key={blog.itemKey} blog={blog} linkRoot={linkRoot} />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MasonryBlogOverview;\n","export const convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport const stringify = (obj: Record<string, unknown>) => {\n  return Object.keys(obj)\n    .map((key) => key + '=' + obj[key])\n    .join('&');\n};\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  ApiType,\n  ChannelDefinition,\n  ChannelTemplate,\n  PublicClient,\n} from '@youfoundation/transit-lib';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\ntype useChannelsProps = {\n  channelSlug: string;\n};\n\nexport interface ChannelDefinitionVm extends ChannelDefinition {\n  slug: string;\n  template: ChannelTemplate;\n}\n\nconst useChannels = ({ channelSlug }: useChannelsProps = { channelSlug: '' }) => {\n  const { getSharedSecret } = useAuth();\n\n  const parseTemplate = (templateId: number | undefined) => {\n    return parseInt(templateId + '') === ChannelTemplate.LargeCards\n      ? ChannelTemplate.LargeCards\n      : parseInt(templateId + '') === ChannelTemplate.ClassicBlog\n      ? ChannelTemplate.ClassicBlog\n      : ChannelTemplate.MasonryLayout;\n  };\n\n  const fetchChannelData = async (channelSlug: string | undefined) => {\n    const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n    let channels: ChannelDefinitionVm[];\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('channels.json');\n\n    if (fileData.has('channels')) {\n      channels =\n        fileData.get('channels')?.map((entry: any) => {\n          const item = entry.payload;\n          return {\n            ...item,\n            slug: convertTextToSlug(item?.name),\n            template: parseTemplate(item?.templateId),\n          } as ChannelDefinitionVm;\n        }) ?? [];\n    } else {\n      channels = (await client.blogPostReadonlyProvider.getChannels()).map((item) => {\n        return {\n          ...item,\n          slug: convertTextToSlug(item?.name),\n          template: parseTemplate(item?.templateId),\n        } as ChannelDefinitionVm;\n      });\n    }\n\n    // Active Channel\n    const activeChannel = channelSlug\n      ? channels?.find((channel) => convertTextToSlug(channel.name) === channelSlug) ?? undefined\n      : undefined;\n\n    return { channels, activeChannel };\n  };\n\n  return useQuery(['channels', channelSlug], () => fetchChannelData(channelSlug), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n  });\n};\n\nexport default useChannels;\n"],"names":["className","blog","linkRoot","imageTargetDrive","channelId","alias","type","BlogConfig","undefined","to","slug","primaryImageFileId","fileId","targetDrive","alt","cover","toUpperCase","Date","dateUnixTime","toLocaleDateString","caption","abstract","t","Image","Arrow","blogPosts","map","BlogTeaserList","itemKey","viewBox","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","d","observer","defaultDrive","HomePageConfig","imageFileId","imageDrive","size","getSharedSecret","useAuth","queryClient","useQueryClient","fetchImageData","client","PublicClient","api","ApiType","sharedSecret","mediaProvider","getDecryptedImageUrl","fetch","useQuery","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","testCache","getQueryData","fileReadOnlyProvider","getFileEntryFromCache","thumbFromStaticFile","header","fileMetadata","appData","previewThumbnail","buffer","DataUtil","content","url","window","URL","createObjectURL","Blob","naturalSize","width","pixelWidth","height","pixelHeight","sizes","additionalThumbnails","getDecryptedThumbnailMeta","listenerCallbacks","WeakMap","handleIntersections","entries","forEach","entry","has","target","callback","get","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","IntersectionObserver","rootMargin","threshold","elem","title","useState","isInView","setIsInView","loadSize","setLoadSize","imgRef","useRef","thumbMeta","useTinyThumb","data","useImage","imageUrl","findLoadOptimalSize","useEffect","current","set","observe","length","setTimeout","targetWidth","clientWidth","targetHeight","clientHeight","matchingSize","find","state","indexOf","src","ref","items","item","isActive","path","end","key","clearDuplicateBlogs","blogs","reduce","returnVal","currBlog","some","id","fetchBlogData","pageParam","blogPostReadonlyProvider","getPosts","response","foundBlogPosts","posts","convertTextToSlug","cursorState","useInfiniteQuery","getNextPageParam","lastPage","BlogTeaserCard","cols","setCols","calculateCols","useCallback","windowWidth","document","documentElement","addEventListener","removeEventListener","arr","columns","out","col","i","_val","push","reorder","channelKey","useParams","pageIndex","setPageIndex","useChannels","channelSlug","channels","activeChannel","useBlogPostsInfinite","isLoading","fetchNextPage","loadMoreRef","ListComponent","template","ChannelTemplate","CardBlogOverview","MasonryBlogOverview","ListBlogOverview","disconnect","pages","currArray","page","Submenu","channel","name","onClick","e","preventDefault","text","split","join","toLowerCase","parseTemplate","templateId","parseInt","fetchChannelData","GetFile","fileData","payload","getChannels"],"sourceRoot":""}