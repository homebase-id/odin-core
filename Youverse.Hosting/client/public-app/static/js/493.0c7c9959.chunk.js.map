{"version":3,"file":"static/js/493.0c7c9959.chunk.js","mappings":"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","sources":["components/Icons/Arrow/Arrow.tsx","hooks/intersection/useIntersection.ts","components/Image/Image.tsx","components/Templates/Blog/Common/Card/BlogTeaserCard.tsx","hooks/blog/useBlog.ts","components/Templates/Blog/Common/RelatedBlogs/RelatedBlogs.tsx","components/Templates/Blog/Detail/BlogDetail.tsx","hooks/blog/useBlogPosts.ts","hooks/image/useImage.ts","webpack://public-app/./src/components/Templates/Blog/Detail/BlogDetail.css?d35f","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { FC } from 'react';\n\nconst Arrow: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M5 12h14\"></path>\n      <path d=\"M12 5l7 7-7 7\"></path>\n    </svg>\n  );\n};\n\nexport default Arrow;\n","import React, { useEffect } from 'react';\n\nconst listenerCallbacks = new WeakMap();\n\nlet observer: IntersectionObserver;\n\nconst handleIntersections: IntersectionObserverCallback = (entries) => {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      const callback = listenerCallbacks.get(entry.target);\n\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        listenerCallbacks.delete(entry.target);\n        callback();\n      }\n    }\n  });\n};\n\nconst getIntersectionObserver = () => {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, {\n      rootMargin: '100px',\n      threshold: 0.15,\n    });\n  }\n  return observer;\n};\n\nexport const useIntersection = (elem: React.RefObject<HTMLElement>, callback: () => void) => {\n  useEffect(() => {\n    const target = elem.current;\n    const observer = getIntersectionObserver();\n\n    if (!target) {\n      return;\n    }\n\n    listenerCallbacks.set(target, callback);\n    observer.observe(target);\n\n    return () => {\n      listenerCallbacks.delete(target);\n      observer.unobserve(target);\n    };\n  }, []);\n};\n","import { TargetDrive } from '@youfoundation/transit-lib';\nimport { useRef, useState } from 'react';\nimport useImage from '../../hooks/image/useImage';\nimport { useIntersection } from '../../hooks/intersection/useIntersection';\n\ninterface ImageProps {\n  targetDrive: TargetDrive;\n  fileId: string | undefined;\n  className?: string;\n  alt?: string;\n  title?: string;\n}\n\nconst Image = ({ targetDrive, fileId, className, alt, title }: ImageProps) => {\n  const [isInView, setIsInView] = useState(false);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const { data: imageUrl } = useImage(isInView ? fileId : undefined, targetDrive);\n\n  useIntersection(imgRef, () => {\n    setIsInView(true);\n  });\n\n  return (\n    <img\n      src={imageUrl}\n      alt={isInView && imageUrl ? alt : ' '}\n      className={`${className} ${\n        (!isInView || !imageUrl) && 'h-full w-full animate-pulse bg-slate-100'\n      }`}\n      title={title}\n      ref={imgRef}\n    />\n  );\n};\n\nexport default Image;\n","import { BlogArticle, BlogConfig, BlogContent, TargetDrive } from '@youfoundation/transit-lib';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../../Image/Image';\nimport Arrow from '../../../../Icons/Arrow/Arrow';\nimport { t } from '../../../../../helpers/i18n/dictionary';\n\ninterface BlogTeaserProps {\n  className?: string;\n  blog: BlogContent;\n  linkRoot: string;\n}\n\nconst BlogTeaser: FC<BlogTeaserProps> = ({ className, blog, linkRoot }) => {\n  const imageTargetDrive: TargetDrive | undefined = blog.channelId\n    ? {\n        alias: blog.channelId,\n        type: BlogConfig.ChannelDriveType.toString(),\n      }\n    : undefined;\n\n  return (\n    <div className={`${className ?? ''}`}>\n      <Link to={`${linkRoot}${blog.slug ?? '#'}`} className=\"contents\">\n        <div className=\"h-full overflow-hidden rounded-lg border-2 border-gray-200 border-opacity-60 bg-white transition-colors duration-300 hover:bg-slate-50 dark:border-gray-800 dark:bg-gray-800 hover:dark:bg-slate-700\">\n          {blog.primaryImageFileId && imageTargetDrive ? (\n            <Image\n              className=\"h-64 w-full object-cover object-center md:h-36 lg:h-48\"\n              title={blog.primaryImageFileId}\n              fileId={blog.primaryImageFileId}\n              targetDrive={imageTargetDrive}\n              alt=\"blog\"\n            />\n          ) : null}\n          <div className=\"p-6\">\n            <h2 className=\"title-font mb-1 text-xs font-medium tracking-widest text-gray-400 dark:text-gray-600\">\n              {blog.type.toUpperCase()}\n            </h2>\n            <span className=\"text-gray-500 md:mt-1 md:text-sm\">\n              {new Date(blog.dateUnixTime).toLocaleDateString()}\n            </span>\n            <h1 className=\"title-font mb-3 text-lg font-medium text-gray-900 dark:text-white\">\n              {blog.caption}\n            </h1>\n            {'abstract' in blog ? (\n              <p className=\"mb-3 leading-relaxed\">{(blog as BlogArticle).abstract}</p>\n            ) : null}\n            <div className=\"flex flex-wrap items-center \">\n              <span className=\"inline-flex items-center text-indigo-500 dark:text-indigo-400 md:mb-2 lg:mb-0\">\n                {t('learn more')}\n                <Arrow className=\"ml-2 h-4 w-4\" />\n              </span>\n            </div>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default BlogTeaser;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, ChannelTemplate, DeliveryClient } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\nimport { BlogContentVm } from './useBlogPosts';\nimport { ChannelDefinitionVm } from './useChannels';\n\ntype useBlogProps = {\n  channelSlug?: string;\n  blogSlug?: string;\n};\n\nconst useBlog = ({ channelSlug, blogSlug }: useBlogProps = {}) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetchBlog = async ({ channelSlug, blogSlug }: useBlogProps) => {\n    if (!channelSlug || !blogSlug) {\n      return;\n    }\n\n    const client = new DeliveryClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    // Channels\n    const channels = (await client.blogPostReadonlyProvider.getChannels()).map((item) => {\n      return {\n        ...item,\n        slug: convertTextToSlug(item.name),\n        template:\n          parseInt(item?.templateId + '') === ChannelTemplate.LargeCards\n            ? ChannelTemplate.LargeCards\n            : parseInt(item?.templateId + '') === ChannelTemplate.ClassicBlog\n            ? ChannelTemplate.ClassicBlog\n            : ChannelTemplate.MasonryLayout,\n      } as ChannelDefinitionVm;\n    });\n\n    const activeChannel = channels.find((channel) => channel.slug === channelSlug);\n\n    // Blogs\n    const pageSize = 100;\n    // Blog posts\n    const loadBlogs = async () => {\n      const foundBlogPosts = await client.blogPostReadonlyProvider.getRecentPosts(\n        'Article',\n        1,\n        pageSize\n      );\n\n      // Process blog posts (Only until fixed in data upload)\n      return foundBlogPosts.map((item) => {\n        return {\n          ...item,\n          slug: convertTextToSlug(item.caption),\n          itemKey: `${item.channelId}_${item.id}`,\n        };\n      });\n    };\n    const blogs: BlogContentVm[] = await loadBlogs();\n\n    // Active Post (Hacky way, as we don't have an implemented way to search on blog slug yet)\n    const activeBlog: BlogContentVm | undefined =\n      blogSlug && blogs ? blogs.find((blog) => blog.slug === blogSlug) ?? undefined : undefined;\n\n    return { activeBlog, activeChannel };\n  };\n\n  return useQuery(['blog', blogSlug], () => fetchBlog({ channelSlug, blogSlug }), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n  });\n};\n\n//// TODO Remove these temporary helpers:\nconst convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport default useBlog;\n","import { t } from '../../../../../helpers/i18n/dictionary';\nimport useBlogPosts, { BlogContentVm } from '../../../../../hooks/blog/useBlogPosts';\nimport { ChannelDefinitionVm } from '../../../../../hooks/blog/useChannels';\nimport BlogTeaser from '../Card/BlogTeaserCard';\n\nconst relatedBlogs = ({\n  blog,\n  channel,\n}: {\n  blog: BlogContentVm;\n  channel: ChannelDefinitionVm | undefined;\n}) => {\n  const { blogPosts } =\n    useBlogPosts(channel ? { channelId: channel.channelId, page: 1 } : undefined).data ?? {};\n\n  if (!blogPosts) {\n    return <></>;\n  }\n\n  const filteredBlogPosts = blogPosts\n    .slice(0, 4)\n    .filter((relatedBlog) => relatedBlog.id !== blog.id)\n    .slice(0, 3);\n\n  return (\n    <section className=\"mt-10 bg-slate-50 pt-16 pb-10 dark:bg-slate-800 dark:bg-opacity-50\">\n      <div className=\"container mx-auto px-5\">\n        <h2 className=\"mb-10 text-2xl dark:text-white\">\n          {t('related blogs')} {channel && <small>| {channel.name}</small>}\n        </h2>\n        <div className=\"-m-1 flex flex-row flex-wrap\">\n          {filteredBlogPosts.map((blog) => {\n            return (\n              <BlogTeaser\n                blog={blog}\n                linkRoot={`/home/blog/${channel?.slug ?? 'all'}/`}\n                key={blog.id}\n                className={`p-1 sm:w-1/2 md:w-1/3`}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default relatedBlogs;\n","import { BlogArticle, BlogConfig, TargetDrive } from '@youfoundation/transit-lib';\nimport { useParams } from 'react-router-dom';\nimport useBlog from '../../../../hooks/blog/useBlog';\nimport Image from '../../../Image/Image';\nimport RelatedBlogs from '../Common/RelatedBlogs/RelatedBlogs';\n\nrequire('./BlogDetail.css');\n\nconst BlogDetail = () => {\n  const { channelKey, blogKey } = useParams();\n  const { activeBlog, activeChannel } =\n    useBlog(\n      channelKey && blogKey\n        ? {\n            channelSlug: channelKey,\n            blogSlug: blogKey,\n          }\n        : undefined\n    ).data ?? {};\n\n  const imageTargetDrive: TargetDrive | undefined = activeBlog?.channelId\n    ? {\n        alias: activeBlog.channelId,\n        type: BlogConfig.ChannelDriveType.toString(),\n      }\n    : undefined;\n\n  if (!activeBlog) {\n    return <></>;\n  }\n\n  const activeArticle: BlogArticle | undefined =\n    activeBlog.type === 'Article' ? (activeBlog as BlogArticle) : undefined;\n\n  return (\n    <>\n      <section className=\"py-5\">\n        <div className=\"container mx-auto mb-10 flex flex-col items-center border-b-2 border-gray-100 px-5 pb-10 dark:border-gray-800 md:flex-row\">\n          <div className=\"flex w-full flex-col md:w-1/2 md:pr-16 lg:pr-24\">\n            <h2 className=\"title-font text-xs font-medium tracking-widest text-indigo-500 dark:text-indigo-400\">\n              {activeChannel?.name.toUpperCase()}\n            </h2>\n            <span className=\"pl-0 text-gray-500 md:mb-1 md:text-sm\">\n              {new Date(activeBlog.dateUnixTime).toLocaleDateString()}{' '}\n              {activeArticle?.readingTimeStats && (\n                <>\n                  | {Math.ceil(activeArticle.readingTimeStats.minutes)}\n                  min read\n                </>\n              )}\n            </span>\n            <h1 className=\"title-font mb-4 text-2xl font-medium text-gray-900 dark:text-white sm:text-3xl\">\n              {activeBlog.caption}\n            </h1>\n            <p className=\"mr-auto text-base  leading-relaxed\">{activeArticle?.abstract}</p>\n          </div>\n          <div className=\"w-5/6 md:w-1/2 lg:w-full lg:max-w-lg\">\n            {imageTargetDrive && activeBlog.primaryImageFileId ? (\n              <Image\n                className=\"rounded object-cover object-center\"\n                title={activeBlog.primaryImageFileId}\n                fileId={activeBlog.primaryImageFileId}\n                targetDrive={imageTargetDrive}\n                alt=\"blog\"\n              />\n            ) : null}\n          </div>\n        </div>\n        <div className=\"container mx-auto px-5\">\n          <div className=\"lg:w-2/3\">\n            <div className=\"rich-text-content\">\n              {/* {activeArticle?.body && (\n                <span dangerouslySetInnerHTML={{ __html: activeArticle?.body }}></span>\n              )} */}\n            </div>\n          </div>\n        </div>\n      </section>\n      <RelatedBlogs blog={activeBlog} channel={activeChannel} />\n    </>\n  );\n};\n\nexport default BlogDetail;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, BlogContent, DeliveryClient } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsProps = {\n  channelId?: string;\n  page: number;\n};\n\nexport interface BlogContentVm extends BlogContent {\n  itemKey?: string;\n}\n\nconst useBlogPosts = ({ channelId, page }: useBlogPostsProps = { page: 1 }) => {\n  const { getSharedSecret } = useAuth();\n  const pageSize = 10;\n\n  const fetchBlogData = async ({ channelId, page }: useBlogPostsProps = { page: 1 }) => {\n    const client = new DeliveryClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    // Blog posts\n    const loadBlogs = async (nextPage: number, channelId: string | undefined) => {\n      let foundBlogPosts: BlogContentVm[];\n\n      // If located in a specific channel, only fetch those, otherwise fallback to recents;\n      if (channelId) {\n        foundBlogPosts = await client.blogPostReadonlyProvider.getPosts(\n          channelId,\n          'Article',\n          nextPage,\n          pageSize\n        );\n      } else {\n        foundBlogPosts = await client.blogPostReadonlyProvider.getRecentPosts(\n          'Article',\n          nextPage,\n          pageSize\n        );\n      }\n\n      // Process blog posts (Only until fixed in data upload)\n      foundBlogPosts = clearDuplicateBlogs(foundBlogPosts).map((item) => {\n        return {\n          ...item,\n          slug: convertTextToSlug(item.caption),\n          itemKey: `${item.channelId}_${item.id}_page-${nextPage}`,\n        };\n      });\n\n      return foundBlogPosts;\n    };\n    let blogPosts = await loadBlogs(page, channelId);\n\n    // Process blog posts (Only until fixed in data upload)\n    blogPosts = clearDuplicateBlogs(blogPosts).map((item) => {\n      return { ...item, slug: convertTextToSlug(item.caption) };\n    });\n\n    return { blogPosts };\n  };\n\n  return useQuery(['blogs', channelId, page], () => fetchBlogData({ channelId, page }), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    // staleTime: Infinity,\n  });\n};\n\n//// TODO Remove these temporary helpers:\nconst clearDuplicateBlogs = (blogs: BlogContent[]) => {\n  return blogs.reduce(\n    (returnVal, currBlog) =>\n      returnVal.some((blog) => blog.id === currBlog.id && blog.channelId === currBlog.channelId)\n        ? returnVal\n        : [...returnVal, currBlog],\n    <BlogContent[]>[]\n  );\n};\n\nconst convertTextToSlug = (text: string) => {\n  return text.split(' ').join('-').toLowerCase();\n};\n\nexport default useBlogPosts;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  ApiType,\n  BlogConfig,\n  DeliveryClient,\n  HomePageConfig,\n  TargetDrive,\n} from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst defaultDrive: TargetDrive = {\n  alias: HomePageConfig.BlogMainContentDriveId.toString(),\n  type: BlogConfig.DriveType.toString(),\n};\n\nconst useImage = (imageFileId: string | undefined, imageDrive?: TargetDrive) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetchImageData = async (imageFileId: string | undefined, imageDrive?: TargetDrive) => {\n    if (imageFileId === undefined || imageFileId === '') {\n      return;\n    }\n\n    // Doesn't work as only allowed for owner:\n    // const thumbUrl = await client.mediaProvider.getDecryptedThumbnailUrl(imageDrive ?? defaultDrive, imageFileId);\n    // console.log(thumbUrl);\n\n    const client = new DeliveryClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n\n    return await client.mediaProvider.getDecryptedImageUrl(imageDrive ?? defaultDrive, imageFileId);\n  };\n\n  return useQuery(\n    ['image', imageFileId, imageDrive],\n    () => fetchImageData(imageFileId, imageDrive),\n    { refetchOnMount: false, refetchOnWindowFocus: false, staleTime: Infinity }\n  );\n};\n\nexport default useImage;\n","// extracted by mini-css-extract-plugin\nexport default {};","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["className","viewBox","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","d","observer","listenerCallbacks","WeakMap","handleIntersections","entries","forEach","entry","has","target","callback","get","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","undefined","IntersectionObserver","rootMargin","threshold","elem","targetDrive","fileId","alt","title","useState","isInView","setIsInView","imgRef","useRef","imageUrl","useImage","data","useEffect","current","set","observe","src","ref","blog","linkRoot","imageTargetDrive","channelId","alias","type","BlogConfig","to","slug","primaryImageFileId","toUpperCase","Date","dateUnixTime","toLocaleDateString","caption","abstract","t","convertTextToSlug","text","split","join","toLowerCase","channelSlug","blogSlug","useAuth","getSharedSecret","fetchBlog","client","DeliveryClient","api","ApiType","sharedSecret","blogPostReadonlyProvider","getChannels","channels","map","item","name","template","parseInt","templateId","ChannelTemplate","activeChannel","find","channel","loadBlogs","getRecentPosts","foundBlogPosts","itemKey","id","blogs","activeBlog","useQuery","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","blogPosts","useBlogPosts","page","filteredBlogPosts","slice","filter","relatedBlog","require","useParams","channelKey","blogKey","useBlog","activeArticle","readingTimeStats","Math","ceil","minutes","Image","RelatedBlogs","clearDuplicateBlogs","reduce","returnVal","currBlog","some","pageSize","fetchBlogData","nextPage","getPosts","defaultDrive","HomePageConfig","imageFileId","imageDrive","fetchImageData","mediaProvider","getDecryptedImageUrl","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","i","arguments","length","source","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}