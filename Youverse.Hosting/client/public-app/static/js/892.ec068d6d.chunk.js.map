{"version":3,"file":"static/js/892.ec068d6d.chunk.js","mappings":"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","sources":["components/Templates/Connections/Connections.tsx","hooks/connections/useConnectionDetails.ts","components/Templates/Home/Common/ConnectionTeaser/ConnectionTeaserItem/ConnectionTeaserItem.tsx","hooks/connections/useConnections.ts","hooks/intersection/useIntersection.ts"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useConnections from '../../../hooks/connections/useConnections';\nimport ConnectionTeaser from '../Home/Common/ConnectionTeaser/ConnectionTeaserItem/ConnectionTeaserItem';\n\nconst Connections = () => {\n  const { data: connections } = useConnections({ pageSize: 100 }).fetch;\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('Connections')} | Youniverse</title>\n      </Helmet>\n\n      <section className=\"py-5\">\n        <div className=\"container mx-auto px-5\">\n          {connections?.length ? (\n            <div className=\"-m-3 flex flex-wrap\">\n              {connections.map((item, index) => {\n                return <ConnectionTeaser key={index} dotYouId={item} />;\n              })}\n            </div>\n          ) : null}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Connections;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  ApiType,\n  // AttributeDefinitions,\n  // BuiltInProfiles,\n  DataUtil,\n  PublicClient,\n} from '@youfoundation/transit-lib';\n\nconst useConnectionDetails = ({ dotYouId }: { dotYouId?: string }) => {\n  const client = new PublicClient({ api: ApiType.YouAuth, root: dotYouId });\n\n  const fetchSingle = async ({ dotYouId }: { dotYouId?: string }) => {\n    if (!dotYouId) {\n      return;\n    }\n\n    // const bestNameAttr = await client.profileDataProvider.getBestAttributeVersion(\n    //   BuiltInProfiles.StandardProfileId.toString(),\n    //   BuiltInProfiles.PersonalInfoSectionId.toString(),\n    //   AttributeDefinitions.Name.type.toString()\n    // );\n    // console.log(bestNameAttr);\n\n    const rawData = await client.fileReadOnlyProvider.GetFile('public.json');\n\n    const nameAttr = rawData.get('name')?.[0];\n    const photoRefAttr = rawData.get('photo')?.[0];\n    const photoAttr = rawData.get(photoRefAttr?.payload?.data?.profileImageId)?.[0];\n\n    const previewThumbnail = photoAttr?.additionalThumbnails?.reduce(\n      (prevVal, curValue) => {\n        if (prevVal.pixelWidth < curValue.pixelWidth && curValue.pixelWidth <= 250) {\n          return curValue;\n        }\n        return prevVal;\n      },\n      { ...photoAttr.header.fileMetadata.appData.previewThumbnail, pixelWidth: 20, pixelHeight: 20 }\n    );\n\n    const buffer = previewThumbnail?.content\n      ? DataUtil.base64ToUint8Array(previewThumbnail.content)\n      : undefined;\n    const url = buffer ? window.URL.createObjectURL(new Blob([buffer])) : undefined;\n\n    const returnVal = {\n      name: {\n        ...nameAttr?.payload.data,\n      },\n      profileImage: {\n        naturalSize: { width: previewThumbnail?.pixelWidth, height: previewThumbnail?.pixelHeight },\n        contentType: previewThumbnail?.contentType,\n        url,\n      },\n    };\n\n    return returnVal;\n  };\n\n  return {\n    fetch: useQuery(['connectionDetails', dotYouId], () => fetchSingle({ dotYouId }), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useConnectionDetails;\n","import { useRef, useState } from 'react';\nimport useConnectionDetails from '../../../../../../hooks/connections/useConnectionDetails';\nimport { useIntersection } from '../../../../../../hooks/intersection/useIntersection';\n\nconst ConnectionTeaser = ({ dotYouId }: { dotYouId: string }) => {\n  const [isInView, setIsInView] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  const { data: connectionDetails } = useConnectionDetails({\n    dotYouId: isInView ? dotYouId : undefined,\n  }).fetch;\n\n  const fullName = connectionDetails?.name?.givenName\n    ? `${connectionDetails.name?.givenName ?? ''} ${connectionDetails.name?.surname ?? ''}`\n    : undefined;\n  const title = undefined;\n\n  useIntersection(wrapperRef, () => {\n    setIsInView(true);\n  });\n\n  return (\n    <div className=\"w-full p-2 md:w-1/2 lg:w-1/3\" ref={wrapperRef}>\n      <a\n        href={`https://${dotYouId}`}\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n        className=\"contents\"\n      >\n        <div className=\"flex h-full items-center rounded-lg border border-gray-200 p-4 hover:bg-gray-200 dark:border-gray-700 dark:hover:bg-gray-800\">\n          {connectionDetails?.profileImage ? (\n            <img\n              src={connectionDetails.profileImage.url}\n              width={connectionDetails.profileImage.naturalSize.width}\n              height={connectionDetails.profileImage.naturalSize.height}\n              className=\"mr-4 h-16 w-16 flex-shrink-0 rounded-full bg-gray-100 object-cover object-center\"\n            />\n          ) : (\n            <div className=\"mr-4 h-16 w-16 flex-shrink-0 rounded-full bg-gray-100 object-cover object-center\"></div>\n          )}\n\n          <div className=\"flex-grow\">\n            <h2 className=\"title-font font-medium text-gray-900 dark:text-white\">\n              {fullName ?? dotYouId}\n            </h2>\n            <p className=\"text-gray-500\">{title ?? ''}</p>\n            <p className=\"text-right text-sm text-gray-500\">{dotYouId}</p>\n          </div>\n        </div>\n      </a>\n    </div>\n  );\n};\n\nexport default ConnectionTeaser;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, PublicClient } from '@youfoundation/transit-lib';\nimport useAuth from '../auth/useAuth';\n\nconst useConnections = ({ pageSize }: { pageSize?: number }) => {\n  const { getSharedSecret } = useAuth();\n\n  const client = new PublicClient({ api: ApiType.YouAuth, sharedSecret: getSharedSecret() });\n  const fetchConnections = async ({ pageSize }: { pageSize?: number }) => {\n    if (!getSharedSecret()) {\n      return;\n    }\n    return (\n      await client.circleNetworkReadOnlyProvider.getConnections({\n        pageNumber: 1,\n        pageSize: pageSize ?? 10,\n      })\n    ).results;\n  };\n\n  return {\n    fetch: useQuery(['connections', pageSize], () => fetchConnections({ pageSize }), {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useConnections;\n","import React, { useEffect } from 'react';\n\nconst listenerCallbacks = new WeakMap();\n\nlet observer: IntersectionObserver;\n\nconst handleIntersections: IntersectionObserverCallback = (entries) => {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      const callback = listenerCallbacks.get(entry.target);\n\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        listenerCallbacks.delete(entry.target);\n        callback();\n      }\n    }\n  });\n};\n\nconst getIntersectionObserver = () => {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, {\n      rootMargin: '100px',\n      threshold: 0.15,\n    });\n  }\n  return observer;\n};\n\nexport const useIntersection = (elem: React.RefObject<HTMLElement>, callback: () => void) => {\n  useEffect(() => {\n    const target = elem.current;\n    const observer = getIntersectionObserver();\n\n    if (!target) {\n      return;\n    }\n\n    listenerCallbacks.set(target, callback);\n    observer.observe(target);\n\n    return () => {\n      listenerCallbacks.delete(target);\n      observer.unobserve(target);\n    };\n  }, []);\n};\n"],"names":["connections","useConnections","pageSize","fetch","data","t","className","length","map","item","index","dotYouId","client","PublicClient","api","ApiType","root","fetchSingle","fileReadOnlyProvider","GetFile","rawData","nameAttr","get","photoRefAttr","photoAttr","payload","profileImageId","previewThumbnail","additionalThumbnails","reduce","prevVal","curValue","pixelWidth","header","fileMetadata","appData","pixelHeight","buffer","content","DataUtil","undefined","url","window","URL","createObjectURL","Blob","returnVal","name","profileImage","naturalSize","width","height","contentType","useQuery","refetchOnWindowFocus","useState","isInView","setIsInView","wrapperRef","useRef","connectionDetails","useConnectionDetails","fullName","givenName","surname","useIntersection","ref","href","target","rel","src","getSharedSecret","useAuth","sharedSecret","fetchConnections","circleNetworkReadOnlyProvider","getConnections","pageNumber","results","refetchOnMount","observer","listenerCallbacks","WeakMap","handleIntersections","entries","forEach","entry","has","callback","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","IntersectionObserver","rootMargin","threshold","elem","useEffect","current","set","observe"],"sourceRoot":""}