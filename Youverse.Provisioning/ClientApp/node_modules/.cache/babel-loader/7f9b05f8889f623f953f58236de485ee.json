{"ast":null,"code":"// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nfunction dehydrate(client) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\n\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}\n\nexport { dehydrate, hydrate };","map":{"version":3,"mappings":"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","names":["dehydrateMutation","mutation","mutationKey","options","state","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","dehydrateQueries","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","build","defaultOptions","_options$defaultOptio","dehydratedQuery","get","dataUpdatedAt","setState","_options$defaultOptio2"],"sources":["/Users/toddmitchell/src/youfoundation/dyc/dotyoucore/Youverse.Provisioning/ClientApp/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach((mutation) => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach((query) => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach((dehydratedQuery) => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state,\n    )\n  })\n}\n"]},"metadata":{},"sourceType":"module"}