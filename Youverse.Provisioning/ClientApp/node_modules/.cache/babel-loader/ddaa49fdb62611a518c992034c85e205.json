{"ast":null,"code":"import { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { sleep } from './utils.mjs';\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\n\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\n\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\n\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value);\n        }\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay; // Stop if the fetch is already resolved\n\n\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn == null ? void 0 : continueFn();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };","map":{"version":3,"mappings":"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","names":["defaultRetryDelay","failureCount","Math","min","canFetch","networkMode","onlineManager","isOnline","CancelledError","constructor","options","revert","silent","isCancelledError","value","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","Promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","focusManager","isFocused","resolve","onSuccess","onError","pause","continueResolve","onPause","then","undefined","onContinue","run","promiseOrValue","fn","error","catch","retry","_config$retry","retryDelay","_config$retryDelay","delay","shouldRetry","onFail","sleep","continue"],"sources":["/Users/toddmitchell/src/youfoundation/dyc/dotyoucore/Youverse.Provisioning/ClientApp/node_modules/@tanstack/query-core/src/retryer.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport type { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => void\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}