@inject HttpClient _http
@inject IContactManagementClient _contactManagementClient
@inject NavigationManager _nav
@inject AppState _state

<BlazoredTypeahead SearchMethod="FindRecipient"
                   @bind-Values="ContactList"
                   EnableDropDown="false"
                   MinimumLength="2"
                   placeholder="Search by name or identifier...">
    <SelectedTemplate Context="contact">
        @contact.DotYouId (@contact.GivenName @contact.Surname)
    </SelectedTemplate>
    <HelpTemplate>
        Please enter a minimum of 2 characters to perform a search.
    </HelpTemplate>
    <NotFoundTemplate Context="searchText">
        Add "@searchText" as a recipient<br />
    </NotFoundTemplate>
    <ResultTemplate Context="contact">
        @contact.DotYouId
    </ResultTemplate>
</BlazoredTypeahead>

@code {

    [Parameter]
    public IList<Contact> ContactList { get; set; }

    protected override void OnInitialized()
    {
        this.ContactList = new List<Contact>();
    }

    private async Task<IEnumerable<Contact>> FindRecipient(string text)
    {
        var response = await _contactManagementClient.Find(Uri.EscapeDataString(text), PageOptions.Default);
        var page = response.Content;
        return page.Results;
    }

    private Task<Contact> NewRecipientAdded(string searchText)
    {
        var contact = new Contact()
        {
            DotYouId = (DotYouIdentity)searchText
        };

        ContactList.Add(contact);
        return Task.FromResult(contact);
    }
}