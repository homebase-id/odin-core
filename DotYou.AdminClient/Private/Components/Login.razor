@using Refit
@using DotYou.Types
@using BlazorState
@using DotYou.Types.Cryptography
@inject IOwnerAuthenticationClient _authClient
@inject NavigationManager nav
@inject AppState appState

<ContentMain>
    <Row>
        <Column Classes="col.sm._5"></Column>
        <Column Classes="col.sm._2">
            <div class="mt-5"></div>
            <EditForm Model="@model">
                <FormGroup>
                    <Input @bind-Value="password"/>
                </FormGroup>
                <div style="max-width:100px">
                    <Button Size="ButtonSize.Normal" @onclick="@login">Login</Button>
                </div>

                <div style="max-width:100px">
                    <Button Size="ButtonSize.Normal" @onclick="@setPassword">Force Set New Password</Button>
                </div>
            </EditForm>
        </Column>
        <Column Classes="col.sm._5"></Column>

    </Row>
</ContentMain>

@code {


    private InputState password = new InputState()
    {
        Identifier = "password",
        Label = "Password",
        Placeholder = "Enter your password"
    };

    private DummyModel model = new DummyModel();

    public class DummyModel
    {
    }

    private async void login()
    {
        var success = await appState.Login(password.Value);
        if (success)
        {
            nav.NavigateTo(nav.Uri, false);
        }
    }

    private async void setPassword()
    {
        var response = await _authClient.GenerateNewSalts();
        var salts = response.Content;

        var reply = AuthState.PreparePassword<PasswordReply>(password.Value, salts);
        
        await _authClient.SetNewPassword((PasswordReply)reply);
    }

}