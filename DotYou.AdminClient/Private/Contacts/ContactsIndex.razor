@page "/private/contacts"

@using DotYou.Types
@using DotYou.Types.Circle

@inject HttpClient Http
@inject NavigationManager nav
@inject AppState state
@inject NavBarLeftInjectableMenu menu
@inject IContactManagementClient _contactManagementClient
@inject ICircleNetworkClient _circleNetworkClient

@menu.SetContent(@<ContactsTopNavContextMenu/>, false);

<ContentHeader>
    <Header>
        <PageTitle Title="Contacts"/>
    </Header>
</ContentHeader>
<ContentMain>
    <Row>
        <Column Classes="col.sm._2">
            <div class="list-group">
                <a class="list-group-item list-group-item-action" @onclick="@(() => ApplyTagFilter(null))" @onclick:preventDefault>All Tags</a>

                @foreach (var tag in this.tags)
                {
                    <a class="list-group-item list-group-item-action @(IsTagApplied(tag) ? "list-group-item-info" : "")" @onclick="@(() => ApplyTagFilter(tag))" @onclick:preventDefault>@tag</a>
                }

            </div>
        </Column>
        <Column Classes="col.sm._10">

            <Table>
                <TableHead>
                    <TableRow>
                        <TableHeadCell></TableHeadCell>
                        <TableHeadCell>Identity</TableHeadCell>
                        <TableHeadCell>Name</TableHeadCell>
                        <TableHeadCell>Email</TableHeadCell>
                        <TableHeadCell>Tag</TableHeadCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    @foreach (var contact in this.contacts)
                    {
                        <TableRow>
                            <TableCell>
                                @if (contact.SystemCircle == SystemCircle.Connected)
                                {
                                    <i class="right fas fa-user-check"></i>
                                }
                                else if (contact.DotYouId.HasValue)
                                {
                                    <Button OnClick="@(() => InviteToConnect(contact.DotYouId.GetValueOrDefault()))">
                                        <i class="right fas fa-link"></i>
                                    </Button>
                                }
                                else
                                {
                                    <i class="right fas fa-question-circle"></i>
                                }

                            </TableCell>
                            <TableCell>@contact.DotYouId.GetValueOrDefault().Id</TableCell>
                            <TableCell>@contact.ToString()</TableCell>
                            <TableCell>@contact.PrimaryEmail</TableCell>
                            <TableCell>
                                <Badge Classes="badge.info">@contact.Tag</Badge>
                            </TableCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </Column>
    </Row>

</ContentMain>

@code {

    private List<string> tags;
    //private List<string> appliedTags;
    private string appliedTag;
    private List<Contact> contacts;
    private PageOptions page = PageOptions.Default;

    protected async override Task OnInitializedAsync()
    {
        this.tags = new List<string>();
        this.contacts = new List<Contact>();
    //this.appliedTags = new List<string>();

    //TODO: need to pull tags from the db and let the user configure their own
        this.tags.Add("Close Friends");
        this.tags.Add("Acquaintance");
        this.tags.Add("Family");
        this.tags.Add("Lead");
        this.tags.Add("Prospect");
        this.tags.Add("Fellowship");

        RefreshData();

        await base.OnInitializedAsync();
    }

    private void ApplyTagFilter(string tag)
    {
    //if (tag == null)
    //{
    //    this.appliedTags.Clear();
    //}
    //else
    //{
    //    if (this.appliedTags.Contains(tag))
    //    {
    //        this.appliedTags.Remove(tag);
    //    }
    //    else
    //    {
    //        this.appliedTags.Add(tag);
    //    }
    //}

        this.appliedTag = tag;

        RefreshData();
    }

    private bool IsTagApplied(string tag)
    {
        return string.Equals(this.appliedTag, tag, StringComparison.InvariantCultureIgnoreCase);
    //return this.appliedTags.Contains(tag);
    }

    private async void InviteToConnect(DotYouIdentity identity)
    {

        var requestHeader = new ConnectionRequestHeader()
        {
            Id = Guid.NewGuid(),
            Recipient = identity,
            Message = "Please add me to your network."
        };

        await _circleNetworkClient.SendConnectionRequest(requestHeader);
    }

    private async void RefreshData()
    {
        PagedResult<Contact> pagedResult = null;
        if (appliedTag == null)
        {
            var response = await _contactManagementClient.GetContactsList(PageOptions.Default);
            pagedResult = response.Content;
        }
    // else
    // {
    //     pagedResult = await Http.GetFromJsonAsync<PagedResult<Contact>>($"/api/contacts/filterbytag?tag={appliedTag}&{page.ToQueryStringParams()}");
    // }

        if (null != pagedResult)
        {
            this.contacts = pagedResult.Results.ToList();
        }
        StateHasChanged();
    }

}