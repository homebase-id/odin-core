@page "/private/messaging/chat"

@inject HttpClient _http
@inject NavigationManager _nav
@inject IJSRuntime _jsRuntime

<ContentMain>
    <Row>
        @*class="col-12 col-lg-7 col-xl-9"*@
        <Column Classes="col.sm._9">

            <div class="py-2 px-4 border-bottom d-none d-lg-block bg-white">
                <ContactCardMini Contact="@_currentSession?.Contact" />
            </div>

            <div class="position-relative bg-white">
                <div @ref="chatWindow" class="chat-window p-4">
                    @foreach (var message in _currentSession?.Messages ?? new List<ChatMessagePayload>())
                    {
                        <ChatMessage Message="@message" />
                    }
                </div>
            </div>

            <div class="flex-grow-0 py-3 px-4 border-top bg-white">
                <div class="input-group">
                    <input type="text" class="form-control" @bind-value="messageToSend" placeholder="Type your message">
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="@SendMessage">Send</button>
                    </div>
                </div>
            </div>
        </Column>
        <Column Classes="col.sm._3">
            <div class="px-4 d-none d-md-block bg-white">
                <div class="media align-items-center">
                    <div class="media-body">
                        <input type="text" class="form-control my-3" placeholder="Search...">
                    </div>
                </div>
            </div>

            @foreach (var contact in this._availableContacts)
            {
                <ContactCardMicro Contact="@contact" />
            }

            <hr class="d-block d-lg-none mt-1 mb-0">
        </Column>
    </Row>
</ContentMain>

@code {

    private ElementReference chatWindow;
    private string messageToSend;

    private class ChatSession
    {
        public Contact Contact { get; set; }
        public List<ChatMessagePayload> Messages { get; set; } = new List<ChatMessagePayload>();
    }

    private ChatSession _currentSession = new ChatSession();
    private List<ChatSession> Sessions = new List<ChatSession>();

    private List<Contact> _availableContacts = new List<Contact>();

    private void HandleIdentityClicked(string id)
    {
        Console.WriteLine($"clicked: {id}");
    }

    private void HandleMessageReceived()
    {
        ChatInterop.AnchorScrollAtBottom(_jsRuntime, chatWindow);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //base.OnAfterRender(firstRender);
        ChatInterop.AnchorScrollAtBottom(_jsRuntime, chatWindow);

    }

    private void SendMessage()
    {

        var cm = new ChatMessagePayload()
        {
            Id = Guid.NewGuid(),
            Sent = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),
            Sender = new Contact() { DotYouId = (DotYouIdentity)"frodo", GivenName = "Charlie", Surname = "Daniels" },
            Recipient = new Contact() { DotYouId = (DotYouIdentity)"sam" },
            Body = messageToSend
        };
        this._currentSession.Messages.Add(cm);

        StateHasChanged();
    }

}
