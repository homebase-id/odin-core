@using DotYou.AdminClient.Private.Components
@using DotYou.AdminClient.Services
@using System.Transactions
@page "/private/messaging/chat"

@inject IChatClient _chat
@inject IClientNotificationEvents _notificationEvents
@inject NavigationManager _nav
@inject IJSRuntime _jsRuntime

<ContentMain>
    <Row>
        @*class="col-12 col-lg-7 col-xl-9"*@
        <Column Classes="col.sm._9">

            <div class="py-2 px-4 border-bottom d-none d-lg-block bg-white">

                @if (this._currentSession != null)
                {
                    <div class="media align-items-center py-1">
                        <div class="position-relative">
                            <img src="/api/images/avatar/@this._currentSession.DotYouId" class="rounded mr-1" alt="" width="40" height="40">
                        </div>
                        <div class="media-body pl-3">
                            <strong>@_currentSession.DotYouId</strong>
                            <div>@(this.IsTypingMessage ? "typing..." : "")</div>
                        </div>
                        <div>
                            @* <button class="btn btn-primary btn-lg mr-1 px-3"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-phone feather-lg"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg></button> *@
                            @* <button class="btn btn-info btn-lg mr-1 px-3 d-none d-md-inline-block"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video feather-lg"><polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect></svg></button> *@
                            @* <button class="btn btn-light border btn-lg px-3"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-more-horizontal feather-lg"><circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle></svg></button> *@
                        </div>
                    </div>
                }

            </div>

            <div class="position-relative bg-white">
                <div @ref="_chatWindow" class="chat-window p-4">
                    @foreach (var message in _currentSession?.Messages ?? new List<ChatMessageEnvelope>())
                    {
                        <ChatMessageView Message="@message"/>
                    }
                </div>
            </div>

            <div class="flex-grow-0 py-3 px-4 border-top bg-white">
                <div class="input-group">
                    <input @ref="_messageText" type="text" class="form-control" @bind-value="_messageToSend" placeholder="Type your message" @onkeydown="Enter" oninput="(this.dispatchEvent(new CustomEvent('change', { bubbles: true })))">
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="@SendMessage">Send</button>
                    </div>
                </div>
            </div>
        </Column>
        <Column Classes="col.sm._3">
            <div class="px-4 d-none d-md-block bg-white">
                <div class="media align-items-center">
                    <div class="media-body">
                        <input type="text" class="form-control my-3" placeholder="Search...">
                    </div>
                </div>
            </div>

            <OnlineContacts @ref="_contacts" OnClick="@HandleContactClicked"/>

            <hr class="d-block d-lg-none mt-1 mb-0">
        </Column>
    </Row>
</ContentMain>

@code {

    private ElementReference _messageText;
    private ElementReference _chatWindow;
    private OnlineContacts _contacts;
    private string _messageToSend;

    private class ChatSession
    {
        public DotYouIdentity DotYouId { get; set; }
        public List<ChatMessageEnvelope> Messages { get; set; } = new List<ChatMessageEnvelope>();

        public DateRangeOffset GetSessionDateRange()
        {
            // var minRcvd = Messages.Min(msg => msg.ReceivedTimestampMilliseconds);
            // var minSent = Messages.Min(msg => msg.SentTimestampMilliseconds);
            //
            // var maxRcvd = Messages.Max(msg => msg.ReceivedTimestampMilliseconds);
            // var maxSent = Messages.Max(msg => msg.SentTimestampMilliseconds);
            //
            // var result = new DateRangeOffset()
            // {
            //     StartDateTimeOffsetSeconds = Math.Min(minRcvd, minSent),
            //     EndDateTimeOffsetSeconds = Math.Max(maxRcvd, maxSent)
            // };
            
            var minRcvd = Messages.Min(msg => msg.ReceivedTimestampMilliseconds);
            var maxRcvd = Messages.Max(msg => msg.ReceivedTimestampMilliseconds);
            
            var result = new DateRangeOffset()
            {
                StartDateTimeOffsetSeconds = minRcvd,
                EndDateTimeOffsetSeconds = maxRcvd
            };
            
            return result;
        }
    }

    private ChatSession _currentSession;
    private Dictionary<string, ChatSession> _sessions = new Dictionary<string, ChatSession>(StringComparer.InvariantCultureIgnoreCase);

    protected override Task OnInitializedAsync()
    {
        _notificationEvents.NewChatMessageReceived += NewChatMessageReceived;
        _notificationEvents.NewChatMessageSent += NewChatMessageSent;
        
        return Task.CompletedTask;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ChatInterop.Focus(_jsRuntime, _messageText);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async void NewChatMessageSent(ChatMessageEnvelope msg)
    {
        Console.WriteLine($"You send a message to {msg.Recipient}");
        var session = await EnsureGetSession(msg.Recipient);
        session.Messages.Add(msg);

        HandleMessageReceived();
        StateHasChanged();
    }

    private async void NewChatMessageReceived(ChatMessageEnvelope msg)
    {
        Console.WriteLine($"{msg.SenderDotYouId} sent you a message");
        var session = await EnsureGetSession(msg.SenderDotYouId);
        session.Messages.Add(msg);
        if (_currentSession?.DotYouId != session.DotYouId)
        {
            //update the count because the session is hidden
            var cc = _contacts.GetNotificationCount(session.DotYouId);
            _contacts.SetNotificationCount(session.DotYouId, cc + 1);
        }

        HandleMessageReceived();
        StateHasChanged();
    }

    private async void HandleContactClicked(Contact contact)
    {
        DotYouIdentity dotYouId = contact.DotYouId.GetValueOrDefault();
        _currentSession = await EnsureGetSession(dotYouId);
        _contacts.SetNotificationCount(dotYouId, 0);
        await ChatInterop.AnchorScrollAtBottom(_jsRuntime, _chatWindow);
        await ChatInterop.Focus(_jsRuntime, _messageText);
        StateHasChanged();
    }

    private async Task<ChatSession> EnsureGetSession(DotYouIdentity dotYou)
    {
        ChatSession session;
        if (!_sessions.ContainsKey(dotYou))
        {
        
            session = new ChatSession()
            {
                DotYouId = dotYou,
            };
            
            //load the day of chat
            var startSeconds = DateTimeOffset.UtcNow.Subtract(TimeSpan.FromHours(24)).ToUnixTimeMilliseconds();
            var endSeconds = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
            var historyResponse = await _chat.GetHistory(dotYou, startSeconds, endSeconds, 1, 300);
            if (historyResponse.IsSuccessStatusCode && historyResponse.Content != null)
            {
                var messages = historyResponse.Content.Results.ToList();
                session.Messages = messages;
            }

            _sessions.Add(dotYou, session);
        }

        return _sessions[dotYou];
    }

    private void HandleMessageReceived()
    {
    //TODO: detect if the user has manually scrolled up.  in this case, don't auto scroll but rather show a little message 
        ChatInterop.AnchorScrollAtBottom(_jsRuntime, _chatWindow);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        ChatInterop.AnchorScrollAtBottom(_jsRuntime, _chatWindow);
    }

    private async void SendMessage()
    {
        if (null == _currentSession)
        {
            return;
        }

        var msg = new ChatMessageEnvelope()
        {
            Id = Guid.NewGuid(),
            Recipient = _currentSession.DotYouId,
            Body = _messageToSend
        };

        var response = await _chat.SendMessage(msg);

        if (response.IsSuccessStatusCode == false || response.Content.Success == false)
        {
            Console.WriteLine("Failed to send message"); //TODO: need to bake in proper error handling
        }

        _messageToSend = "";
        StateHasChanged();
    }

    private bool IsTypingMessage { get; set; }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            SendMessage();
        }
    }

}