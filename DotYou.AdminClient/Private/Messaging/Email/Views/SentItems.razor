@* @using BlazorStrap.Extensions.BSDataTable *@
@inject HttpClient _http

@*<BSNav IsList="true" IsPills="true" IsFill="true">
    <BSNavItem>
        <BSNavLink @onclick="@(()=>currentView = View.Inbox)" IsActive="@(currentView == View.Inbox)">Inbox</BSNavLink>
    </BSNavItem>
    <BSNavItem>
        <BSNavLink @onclick="@(()=>currentView = View.Circles)" IsActive="@(currentView == View.Circles)">Circles</BSNavLink>
    </BSNavItem>
    <BSNavItem>
        <BSNavLink @onclick="@(()=>currentView = View.Groups)" IsActive="@(currentView == View.Groups)">Groups</BSNavLink>
    </BSNavItem>
    <BSNavItem>
        <BSNavLink @onclick="@(()=>currentView = View.Verified)" IsActive="@(currentView == View.Verified)">Verified</BSNavLink>
    </BSNavItem>
    <BSNavItem>
        <BSNavLink @onclick="@(()=>currentView = View.External)" IsActive="@(currentView == View.External)">External</BSNavLink>
    </BSNavItem>
</BSNav>*@

@*<BSDataListGroup Items="messages" ListGroupType="ListGroupType.Link" Context="message" Class="mt-3">
    <NoDataTemplate>
        <h4>It's lonely in here...</h4>
    </NoDataTemplate>
    <ItemTemplate>
        <BSListGroupItem ListGroupType="ListGroupType.Link" Href="#">
            <BSListGroupItemHeading>
                <h5 class="mb-1">@message.Topic</h5>
                <small>@message.Received.ToRelative()</small>
            </BSListGroupItemHeading>
            <BlazorStrap.BSListGroupItemText>
                <small>From: @message.Sender</small>
            </BlazorStrap.BSListGroupItemText>
            <p class="mb-1">@((MarkupString)FormatBody(message))</p>
        </BSListGroupItem>
    </ItemTemplate>
</BSDataListGroup>*@

@code {
    enum View
    {
        Inbox = 0,
        Circles = 1,
        Groups = 2,
        Verified = 3,
        External = 4
    }

    private IList<Message> _messages = new List<Message>();
    private View _currentView = View.Inbox;

    private string FormatBody(Message message)
    {
        var body = message.Body.Length > 250 ? $"{message.Body.Substring(0, 300)}..." : message.Body;
        return body;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var page = await _http.GetFromJsonAsync<PagedResult<Message>>("api/messages");
            _messages = page.Results.OrderByDescending(m => m.Received).ToList();
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }
}
