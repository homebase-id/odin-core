@using Blazored.Toast.Configuration
@using DotYou.AdminClient.Services
@using DotYou.Types.SignalR
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@inherits LayoutComponentBase
@inject ILayoutManager _layoutManager
@inject NavigationManager _nav
@inject AuthState _authState
@inject IClientNotificationEvents notificationEvents


@if (_authState.IsAuthenticated == false)
{
    <DotYou.AdminClient.Private.Components.Login />
}

@if (_authState.IsAuthenticated)
{
    <TopNavbar/>
    <DotYouSidebar/>
    <ContentWrapper>
        @Body
    </ContentWrapper>
    @*<ControlSideBar>notifications here</ControlSideBar>*@
    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout="10"
                    IconType="IconType.FontAwesome"/>
    <MainFooter>
        <Default>
            <strong>Copyright &copy; 2021 dotYou.</strong> All rights reserved.
        </Default>
        <Right>
            Legal
        </Right>
    </MainFooter>
}

@code
{
    private HubConnection connection;
    
    protected override async Task OnInitializedAsync()
    {
        UriBuilder b = new UriBuilder(_nav.BaseUri);
        b.Path = "live/notifications";

        connection = new HubConnectionBuilder()
            .WithUrl(b.Uri.AbsoluteUri, options =>
            {
                options.SkipNegotiation = true;
                options.Transports = HttpTransportType.WebSockets;
                options.AccessTokenProvider= ()=> Task.FromResult(_authState.Token.ToString());
            })
            .WithAutomaticReconnect()
            .Build();

        // connection.On<CircleInvite>(nameof(INotificationHub.NotificationOfCircleInvite), (invite) =>
        // {
        //     notificationEvents.BroadcastCircleInviteReceived(invite);
        // });

        connection.On<ConnectionRequest>(nameof(INotificationHub.ConnectionRequestReceived), (request) =>
        {
            Console.WriteLine("connection request came in.");
            notificationEvents.BroadcastConnectionRequestRecieved(request);
        });

        connection.On<EstablishConnectionRequest>(nameof(INotificationHub.ConnectionRequestAccepted), (acceptedRequest) =>
        {
            notificationEvents.BroadcastConnectionRequestAccepted(acceptedRequest);
        });

        await connection.StartAsync();
    }


    protected override void OnAfterRender(bool isFirstRender)
    {
        _layoutManager.IsFooterFixed = true;
        _layoutManager.IsNavBarFixed = true;
        _layoutManager.IsSideBarFixed = true;
        base.OnAfterRender(isFirstRender);
    }
}