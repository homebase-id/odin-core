@using Identity.DataType
@using DotYou.AdminClient.Services

@inject IToastService _toastService
@inject IClientNotificationEvents _notificationEvents
@inject NavigationManager _nav
@*<NavBarDropDown>
        <NavBarBadge Color="Color.Danger" Icon="far fa-comments">4</NavBarBadge>
        <NavBarDropDownMenu>
            <NavBarDropDownMenuItem>
                <UserMessage DateTime="DateTime.Now.AddMinutes(-2)" ProfilePicture="/api/avatar?identifier=samwisegamgee.me" Icon="fas fa-star">
                    <UserName>Samwise Gamgee</UserName>
                    <Message>Beers with Rosie Cotton</Message>
                </UserMessage>
            </NavBarDropDownMenuItem>
            <DropdownDivider />
            <DropdownFooter OnClick="SeeAllMessages">See All Messages</DropdownFooter>
        </NavBarDropDownMenu>
    </NavBarDropDown>*@

<NavBarDropDown>
    <NavBarBadge Color="Color.Info" Icon="far fa-bell">@(_notifications.Count()>0 ? _notifications.Count() : "")</NavBarBadge>
    <NavBarDropDownMenu>
        <DropdownHeader>@_notifications.Count() Notifications</DropdownHeader>
        <DropdownDivider></DropdownDivider>

        @foreach (var n in _notifications)
        {
            <NotificationMessage DateTime="DateTimeOffset.FromUnixTimeSeconds(n.DateTimeReceived).DateTime" Icon="fas fa-envelope mr-2">
                <Message>@n.MessageText</Message>
            </NotificationMessage>
        }

        <DropdownDivider></DropdownDivider>
        <DropdownFooter OnClick="SeeAllNotifications">See All Notifications</DropdownFooter>
    </NavBarDropDownMenu>
</NavBarDropDown>
@code {

    private class Notification
    {
        public Guid Id = Guid.NewGuid();
        public Int64 DateTimeReceived;
        public string MessageText;
    }

    private List<Notification> _notifications = new List<Notification>();

    private void SeeAllMessages(Tuple<IDropdownFooter, MouseEventArgs> args)
    {
        _nav.NavigateTo("private/messaging/chat");
    }

    private void SeeAllNotifications(Tuple<IDropdownFooter, MouseEventArgs> args)
    {
        //nav.NavigateTo("private/notifications/");
    }

    protected override async Task OnInitializedAsync()
    {
        _notificationEvents.ConnectionRequestReceived += ConnectionRequestReceived;
        //notificationEvents.CircleInviteReceived += CircleInviteReceived;
        _notificationEvents.NewEmailReceived += NewEmailReceived;
        _notificationEvents.ConnectionRequestAccepted += ConnectionRequestAccepted;
    }

    private void NewEmailReceived(Message msg)
    {
        this._notifications.Add(new Notification()
        {
            MessageText = $"{msg.SenderDotYouId} sent you an email",
            DateTimeReceived = msg.Received
        });

        string message = $"{msg.Topic}";
        _toastService.ShowInfo(message, "New Email");

        StateHasChanged();
    }


    // void CircleInviteReceieved(CircleInvite invite)
    // {
    //     string message = $"{invite.Sender} has invited you to join {invite.CircleName}";
    //     //update
    //     this.notifications.Add(new Notification()
    //     {
    //
    //         MessageText = message,
    //         DateTimeReceived = invite.DateSent
    //     });
    //
    //     toastService.ShowInfo(message, "Invitation");
    //
    //     StateHasChanged();
    // }

    void ConnectionRequestReceived(ConnectionRequest request)
    {
        
        //update notifications bar
        this._notifications.Add(new Notification()
        {
            MessageText = $"{request.SenderDotYouId} invited you to connect",
            DateTimeReceived = request.DateSent
        });

        string message = $"{request.SenderDotYouId} ({request.SenderGivenName} {request.SenderSurname}) has invited you to connect";
        _toastService.ShowInfo(message, "Connect!");

        StateHasChanged();
    }

    void ConnectionRequestAccepted(EstablishConnectionRequest request)
    {
        //update notifications bar
        this._notifications.Add(new Notification()
        {
            MessageText = $"{request.RecipientGivenName} {request.RecipientSurname} accepted your connection!",
            //DateTimeReceived = acceptedRequest.
        });
        
        string message = $"{request.SenderDotYouId} ({request.RecipientGivenName} {request.RecipientSurname}) accepted your request!";
        _toastService.ShowInfo(message, "You are Connected!");
        
        StateHasChanged();

    }
}