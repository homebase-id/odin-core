@using System;
@using Identity.Client.Model
@inject NavBarLeftInjectableMenu contextMenu
@inject NavigationManager nav
@inject IJSRuntime JS
@inject ILayoutManager layoutManager

<NavBar>
    <NavBarLeft>
        @if (!contextMenu.OverrideParentContent)
        {
            @*<NavBarMenuItem Link="/">Home</NavBarMenuItem>
                <NavBarMenuItem OnClick="HandleContentMenuClick">Content</NavBarMenuItem>*@
        }
        @contextMenu.content <!-- Injectable for custom menu content per page -->

    </NavBarLeft>
    <NavBarRight>
        <NavBarSearch></NavBarSearch>
        <Notifications/>
        @*<NavBarSideBarControl></NavBarSideBarControl>*@
    </NavBarRight>
</NavBar>

@code {
    private NavbarSearchForm searchModel = new NavbarSearchForm();

    protected override void OnInitialized()
    {
        nav.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }


    private void handleSearch()
    {
        Console.WriteLine($"Perform search for text [{searchModel.QueryText}]");
    }

    protected override void OnParametersSet()
    {
    // content = null; for refreshing custom menu injectables per page.
    // no override; reset default to show parent menu content items.
    //contextMenu.SetContent(null, false);
    }

    private DateTime dt = DateTime.Now;

    private void HandleContentMenuClick(Tuple<INavBarMenuItem, MouseEventArgs> args)
    {
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        layoutManager.IsFooterFixed = true;
        layoutManager.IsNavBarFixed = true;
        layoutManager.IsSideBarFixed = true;

        base.OnAfterRender(isFirstRender);
    }

}