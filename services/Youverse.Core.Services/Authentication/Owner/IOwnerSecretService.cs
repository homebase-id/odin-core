using System.Threading.Tasks;
using Youverse.Core.Cryptography;
using Youverse.Core.Cryptography.Data;

namespace Youverse.Core.Services.Authentication.Owner
{
    public interface IOwnerSecretService
    {
        /// <summary>
        /// Generates two 16 byte crypto-random numbers used for salting passwords
        /// </summary>
        /// <returns></returns>
        Task<NonceData> GenerateNewSalts();

        Task SetNewPassword(PasswordReply reply);

        /// <summary>
        /// Returns true if the master password has set
        /// </summary>
        Task<bool> IsMasterPasswordSet();

        /// <summary>
        /// Returns the stored salts for the tenant
        /// </summary>
        /// <returns></returns>
        Task<SaltsPackage> GetStoredSalts();

        /// <summary>
        /// Generates RSA keys to be used for encrypting data where the private key is not
        /// encrypted on the server. (i.e. it should be stored securely in the same way you
        /// store the private key for an SSL cert)
        /// </summary>
        /// <returns></returns>
        Task<RsaFullKeyListData> GenerateRsaKeyList();

        /// <summary>
        /// Gets the current RSA Keys generated by <see cref="GenerateRsaKeyList"/>.
        /// </summary>
        /// <returns></returns>
        Task<RsaFullKeyListData> GetRsaKeyList();
        
        /// <summary>
        /// Checks if the nonce-hashed password matches the stored
        /// <see cref="PasswordData.HashPassword"/> (hashed with a <param name="nonce64">nonce</param>
        /// </summary>
        /// <param name="nonceHashedPassword64"></param>
        /// <param name="nonce64"></param>
        /// <returns></returns>
        Task TryPasswordKeyMatch(string nonceHashedPassword64, string nonce64);

        /// <summary>
        /// Returns the encrypted version of the data encryption key.  This is generated when you set
        /// the initial password
        /// </summary>
        /// <returns></returns>
        Task<SensitiveByteArray> GetMasterKey(OwnerConsoleToken loginToken, SensitiveByteArray key);

        /// <summary>
        /// Gets the current RSA to be used for Authentication
        /// </summary>
        /// <returns></returns>
        Task<(uint publicKeyCrc32C, string publicKeyPem)> GetCurrentAuthenticationRsaKey();
    }
}