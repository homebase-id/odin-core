{"version":3,"file":"static/js/102.6bc69413.chunk.js","mappings":"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","sources":["components/Blog/Common/Blocks/ImageGallery/ImageGallery.tsx","provider/transit/ExternalMediaProvider.ts","hooks/socialFeed/media/useExternalImage.ts","hooks/socialFeed/media/useExternalTinyThumb.ts","components/SocialFeed/media/ExternalImage.tsx","components/Blog/Common/Blocks/PrimaryImage/PrimaryImage.tsx","components/ui/Icons/Bubble/Bubble.tsx","components/ui/Icons/Triangle/Triangle.tsx","hooks/blog/useChannel.ts","provider/transit/TransitProvider.ts"],"sourcesContent":["import { DataUtil, EmbeddedThumb } from '@youfoundation/dotyoucore-js';\nimport { useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useIntersection } from '../../../../../hooks/intersection/useIntersection';\nimport { PostImage } from '../PrimaryImage/PrimaryImage';\n\ninterface ImageGalleryProps {\n  dotYouId?: string;\n  fileIds: string[];\n  channelId: string;\n  className?: string;\n  maxVisible?: number;\n  postUrl: string;\n  previewThumbnail?: EmbeddedThumb;\n}\n\nconst getEmbeddedThumbUrl = (previewThumbnail: EmbeddedThumb) => {\n  const buffer = DataUtil.base64ToUint8Array(previewThumbnail.content);\n  return window.URL.createObjectURL(new Blob([buffer], { type: previewThumbnail.contentType }));\n};\n\nconst ImageGallery = ({\n  dotYouId,\n  fileIds,\n  channelId,\n  className,\n  maxVisible = 4,\n  postUrl,\n  previewThumbnail,\n}: ImageGalleryProps) => {\n  const [isInView, setIsInView] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const slicedFileIds = fileIds.length > maxVisible ? fileIds.slice(0, maxVisible) : fileIds;\n  const countExcludedFromView = fileIds.length - slicedFileIds.length;\n  const navigate = useNavigate();\n\n  const doNavigate = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, index: number) => {\n    e.stopPropagation();\n    if (dotYouId && dotYouId !== window.location.hostname) {\n      window.location.href = `${postUrl}/${index}`;\n    } else {\n      navigate(`${postUrl}/${index}`);\n    }\n    return false;\n  };\n\n  useIntersection(containerRef, () => {\n    setIsInView(true);\n  });\n\n  const tinyThumbUrl = previewThumbnail ? getEmbeddedThumbUrl(previewThumbnail) : undefined;\n\n  return (\n    <div className={`overflow-hidden sm:rounded-lg ${className ?? ''}`} ref={containerRef}>\n      {!isInView && tinyThumbUrl ? (\n        <ImageGalleryLoading tinyThumbUrl={tinyThumbUrl} totalCount={slicedFileIds.length} />\n      ) : (\n        <div className={`-m-[2px] flex flex-row flex-wrap`}>\n          {slicedFileIds.map((fileId, index) => (\n            <div className=\"p-[2px] md:w-1/2\" key={fileId}>\n              <div\n                className=\"relative aspect-square h-auto w-full cursor-pointer\"\n                onClick={(e) => doNavigate(e, index)}\n              >\n                <PostImage\n                  dotYouId={dotYouId}\n                  className={`h-full w-auto`}\n                  fileId={fileId}\n                  channelId={channelId}\n                  fit=\"cover\"\n                />\n                {index === maxVisible - 1 && countExcludedFromView > 0 ? (\n                  <div className=\"absolute inset-0 flex flex-col justify-center bg-black bg-opacity-40 text-6xl font-light text-white\">\n                    <span className=\"block text-center\">+{countExcludedFromView}</span>\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst ImageGalleryLoading = ({\n  tinyThumbUrl,\n  totalCount,\n}: {\n  tinyThumbUrl: string;\n  totalCount: number;\n}) => {\n  const singleRow = totalCount === 2;\n\n  return (\n    <div className={`relative ${singleRow ? 'aspect-[2/1]' : 'aspect-square'} h-auto w-full`}>\n      <img src={tinyThumbUrl} className=\"h-full w-full blur-[50px]\" />\n      <div\n        className=\"absolute inset-0\"\n        style={{\n          backgroundSize: '52% 52%',\n          backgroundImage: `linear-gradient(to right, white 4px, transparent 1px)${\n            !singleRow ? ', linear-gradient(to bottom, white 4px, transparent 1px)' : ''\n          }`,\n          backgroundPositionX: '-5%',\n          backgroundPositionY: '-5%',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ImageGallery;\n","import { DataUtil, DriveSearchResult, TargetDrive, ThumbSize } from '@youfoundation/dotyoucore-js';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\nimport TransitProvider from './TransitProvider';\n\nexport type ThumbnailMeta = {\n  naturalSize: { width: number; height: number };\n  sizes?: ThumbSize[];\n  url: string;\n};\n\nexport class ExternalMediaProvider extends OwnerProviderBase {\n  private static instance: ExternalMediaProvider;\n  private transitProvider: TransitProvider;\n\n  constructor(sharedSecret: Uint8Array) {\n    super(sharedSecret);\n\n    this.transitProvider = TransitProvider.getInstance(sharedSecret);\n  }\n\n  async getDecryptedMetadata(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string\n  ): Promise<DriveSearchResult> {\n    return await this.transitProvider.GetFileHeader(dotYouId, targetDrive, fileId);\n  }\n\n  async getDecryptedThumbnailMeta(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string\n  ): Promise<ThumbnailMeta | undefined> {\n    //it seems these will be fine for images but for video and audio we must stream decrypt\n    return this.getDecryptedMetadata(dotYouId, targetDrive, fileId).then((header) => {\n      if (!header.fileMetadata.appData.previewThumbnail) {\n        return;\n      }\n\n      const previewThumbnail = header.fileMetadata.appData.previewThumbnail;\n      const buffer = DataUtil.base64ToUint8Array(previewThumbnail.content);\n      const url = window.URL.createObjectURL(\n        new Blob([buffer], { type: previewThumbnail.contentType })\n      );\n\n      return {\n        naturalSize: { width: previewThumbnail.pixelWidth, height: previewThumbnail.pixelHeight },\n        sizes: header.fileMetadata.Thumbnails ?? [],\n        url: url,\n      };\n    });\n  }\n\n  // Retrieves an image/thumb, decrypts, then returns a url to be passed to an image control\n  async getDecryptedImageUrl(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string,\n    size?: ThumbSize\n  ): Promise<string> {\n    return this.getDecryptedImageData(dotYouId, targetDrive, fileId, size).then((data) => {\n      const url = window.URL.createObjectURL(new Blob([data.content], { type: data.contentType }));\n      return url;\n    });\n  }\n\n  async getDecryptedImageData(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string,\n    size?: ThumbSize\n  ): Promise<{\n    pixelHeight?: number;\n    pixelWidth?: number;\n    contentType: string;\n    content: ArrayBuffer;\n  }> {\n    const data = await (size\n      ? this.transitProvider.GetThumbBytesNoPriorHeader(\n          dotYouId,\n          targetDrive,\n          fileId,\n          size.pixelWidth,\n          size.pixelHeight\n        )\n      : this.transitProvider.GetPayloadBytesNoPriorHeader(dotYouId, targetDrive, fileId));\n\n    return {\n      contentType: data.contentType,\n      content: data.bytes,\n    };\n  }\n\n  public static getInstance(sharedSecret?: Uint8Array): ExternalMediaProvider {\n    if (!sharedSecret) {\n      throw new Error('Shared Secret not set for OwnerProvider');\n    }\n\n    if (!ExternalMediaProvider.instance) {\n      ExternalMediaProvider.instance = new ExternalMediaProvider(sharedSecret);\n    }\n\n    return ExternalMediaProvider.instance;\n  }\n}\n","import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { TargetDrive, ThumbSize } from '@youfoundation/dotyoucore-js';\nimport { ExternalMediaProvider } from '../../../provider/transit/ExternalMediaProvider';\nimport useAuth from '../../auth/useAuth';\n\nconst useExternalImage = (\n  dotYouId: string,\n  imageFileId: string | undefined,\n  imageDrive?: TargetDrive,\n  size?: ThumbSize\n) => {\n  const { getSharedSecret } = useAuth();\n  const queryClient = useQueryClient();\n\n  const fetchImageData = async (\n    dotYouId: string,\n    imageFileId: string | undefined,\n    imageDrive?: TargetDrive,\n    size?: ThumbSize\n  ) => {\n    if (imageFileId === undefined || imageFileId === '' || !imageDrive) {\n      return;\n    }\n\n    const externalMediaProvider = ExternalMediaProvider.getInstance(getSharedSecret());\n    return await externalMediaProvider.getDecryptedImageUrl(\n      dotYouId,\n      imageDrive,\n      imageFileId,\n      size\n    );\n  };\n\n  return {\n    fetch: useQuery(\n      ['external-image', dotYouId, imageFileId, imageDrive, size],\n      () => fetchImageData(dotYouId, imageFileId, imageDrive, size),\n      {\n        refetchOnMount: false,\n        refetchOnWindowFocus: false,\n        staleTime: Infinity,\n        enabled: !!dotYouId && !!imageFileId && !!imageDrive,\n      }\n    ),\n    testCache: (imageFileId: string, imageDrive: TargetDrive) => {\n      const cache = queryClient.getQueryData(['image', imageFileId, imageDrive]);\n      return !!cache;\n    },\n  };\n};\n\nexport default useExternalImage;\n","import { useQuery } from '@tanstack/react-query';\nimport { TargetDrive } from '@youfoundation/dotyoucore-js';\nimport { ExternalMediaProvider } from '../../../provider/transit/ExternalMediaProvider';\nimport useAuth from '../../auth/useAuth';\n\nconst useExternalTinyThumb = (\n  dotYouId: string,\n  imageFileId: string | undefined,\n  imageDrive?: TargetDrive\n) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetchImageData = async (\n    dotYouId: string,\n    imageFileId: string | undefined,\n    imageDrive?: TargetDrive\n  ) => {\n    if (!dotYouId || imageFileId === undefined || imageFileId === '' || !imageDrive) {\n      return;\n    }\n\n    const externalMediaProvider = ExternalMediaProvider.getInstance(getSharedSecret());\n    return await externalMediaProvider.getDecryptedThumbnailMeta(dotYouId, imageDrive, imageFileId);\n  };\n\n  return useQuery(\n    ['tinyThumb', dotYouId, imageFileId, imageDrive],\n    () => fetchImageData(dotYouId, imageFileId, imageDrive),\n    {\n      enabled: !!dotYouId && !!imageFileId && !!imageDrive,\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      onError: (err) => console.error(err),\n    }\n  );\n};\n\nexport default useExternalTinyThumb;\n","import { DataUtil, EmbeddedThumb, TargetDrive, ThumbSize } from '@youfoundation/dotyoucore-js';\nimport { useEffect, useRef, useState } from 'react';\nimport { useIntersection } from '../../../hooks/intersection/useIntersection';\nimport useExternalImage from '../../../hooks/socialFeed/media/useExternalImage';\nimport useExternalTinyThumb from '../../../hooks/socialFeed/media/useExternalTinyThumb';\nimport LoadingParagraph from '../../ui/LoadingParagraph/LoadingParagraph';\n\ninterface ExternalImageProps {\n  dotYouId: string;\n  targetDrive: TargetDrive;\n  fileId: string | undefined;\n  fit?: 'cover' | 'contain';\n  className?: string;\n  alt?: string;\n  title?: string;\n  previewThumbnail?: EmbeddedThumb;\n}\n\nconst getEmbeddedThumbUrl = (previewThumbnail: EmbeddedThumb) => {\n  const buffer = DataUtil.base64ToUint8Array(previewThumbnail.content);\n  return window.URL.createObjectURL(new Blob([buffer], { type: previewThumbnail.contentType }));\n};\n\n// TODO: merge with Image;\nconst ExternalImage = ({\n  dotYouId,\n  targetDrive,\n  fileId,\n  fit,\n  className,\n  alt,\n  title,\n  previewThumbnail,\n}: ExternalImageProps) => {\n  // // Temp disabled previewThumbnail usage\n  // previewThumbnail = undefined as any;\n\n  const [isInView, setIsInView] = useState(false);\n  const [loadSize, setLoadSize] = useState<ThumbSize | 'full' | undefined>(undefined);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const { data: thumbMeta } = useExternalTinyThumb(\n    dotYouId,\n    isInView && !previewThumbnail ? fileId : undefined,\n    targetDrive\n  );\n  const embeddedThumbUrl = previewThumbnail ? getEmbeddedThumbUrl(previewThumbnail) : undefined;\n  const {\n    fetch: { data: imageUrl },\n    testCache,\n  } = useExternalImage(\n    dotYouId,\n    loadSize !== undefined ? fileId : undefined,\n    targetDrive,\n    loadSize !== 'full' ? loadSize : undefined\n  );\n\n  useIntersection(imgRef, () => {\n    if ((fileId && testCache(fileId, targetDrive)) || previewThumbnail) {\n      findLoadOptimalSize();\n    }\n    setIsInView(true);\n  });\n\n  useEffect(() => {\n    if ((thumbMeta && thumbMeta.url?.length) || previewThumbnail) {\n      // Set to load full, with timeout to allow other tinies to load\n      setTimeout(() => {\n        findLoadOptimalSize();\n      }, 100);\n    }\n  }, [thumbMeta, previewThumbnail]);\n\n  const findLoadOptimalSize = () => {\n    if (!imgRef.current || (!thumbMeta?.sizes?.length && !previewThumbnail)) {\n      setLoadSize('full');\n      return;\n    }\n\n    const targetWidth = imgRef.current?.clientWidth;\n    const targetHeight = imgRef.current?.clientHeight;\n\n    if (!thumbMeta?.sizes?.length || !imgRef.current) {\n      setLoadSize({\n        contentType: previewThumbnail?.contentType ?? 'image/webp',\n        pixelWidth: targetWidth,\n        pixelHeight: targetHeight,\n      });\n      return;\n    }\n\n    const matchingSize = thumbMeta.sizes.find((size) => {\n      return targetWidth < size.pixelWidth && targetHeight < size.pixelHeight;\n    });\n\n    setLoadSize(matchingSize ?? 'full');\n  };\n\n  const state: 'idle' | 'loading-tiny' | 'tiny' | 'loading-full' | 'loaded' = loadSize\n    ? imageUrl\n      ? 'loaded'\n      : 'loading-full'\n    : isInView\n    ? thumbMeta && thumbMeta.url?.length\n      ? 'tiny'\n      : 'loading-tiny'\n    : 'idle';\n\n  return (\n    <figure\n      className={`${\n        className?.indexOf('absolute') !== -1 ? '' : 'relative'\n      } overflow-hidden ${className}`}\n    >\n      {state !== 'loading-tiny' || previewThumbnail ? (\n        <img\n          src={state === 'loaded' ? imageUrl : thumbMeta?.url ?? embeddedThumbUrl}\n          alt={isInView && thumbMeta?.url ? alt : ' '}\n          className={`${state !== 'loaded' ? 'blur-[50px]' : ''} ${\n            fit === 'cover'\n              ? 'h-full w-full object-cover'\n              : fit === 'contain'\n              ? 'm-auto max-h-full max-w-full object-contain'\n              : 'h-auto max-h-[inherit] w-full'\n          }`}\n          title={\n            title ||\n            `${fileId}@${\n              loadSize !== undefined && loadSize !== 'full'\n                ? `${loadSize.pixelWidth}x${loadSize.pixelHeight}`\n                : loadSize\n            }`\n          }\n          ref={imgRef}\n          width={thumbMeta?.naturalSize?.width ?? previewThumbnail?.pixelWidth}\n          height={thumbMeta?.naturalSize?.height ?? previewThumbnail?.pixelHeight}\n        />\n      ) : (\n        <LoadingParagraph className=\"aspect-square h-full w-full\" />\n      )}\n    </figure>\n  );\n};\n\nexport default ExternalImage;\n","import { EmbeddedThumb, getChannelDrive, PostContent } from '@youfoundation/dotyoucore-js';\nimport ExternalImage from '../../../../SocialFeed/media/ExternalImage';\nimport Image, { ImageProps } from '../../../../Image/Image';\nimport { useNavigate } from 'react-router-dom';\n\nconst PrimaryImage = ({\n  dotYouId,\n  post,\n  className,\n  postUrl,\n  previewThumbnail,\n}: {\n  dotYouId?: string;\n  post: PostContent;\n  className?: string;\n  postUrl: string;\n  previewThumbnail?: EmbeddedThumb;\n}) => {\n  const navigate = useNavigate();\n\n  const doNavigate = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n    if (dotYouId && dotYouId !== window.location.hostname) {\n      window.location.href = `${postUrl}/${0}`;\n    } else {\n      navigate(`${postUrl}/${0}`);\n    }\n    return false;\n  };\n\n  return (\n    <div onClick={doNavigate}>\n      <PostImage\n        dotYouId={dotYouId}\n        channelId={post.channelId}\n        fileId={post.primaryImageFileId}\n        className={className}\n        previewThumbnail={previewThumbnail}\n      />\n    </div>\n  );\n};\n\ninterface PostImageProps extends Omit<ImageProps, 'targetDrive'> {\n  channelId: string;\n  dotYouId?: string;\n  previewThumbnail?: EmbeddedThumb;\n}\n\nexport const PostImage = ({ channelId, dotYouId, ...props }: PostImageProps) => {\n  const targetDrive = getChannelDrive(channelId);\n\n  if (dotYouId && dotYouId !== window.location.hostname) {\n    return <ExternalImage dotYouId={dotYouId} {...props} targetDrive={targetDrive} />;\n  } else {\n    return <Image {...props} targetDrive={targetDrive} />;\n  }\n};\n\nexport default PrimaryImage;\n","import { FC } from 'react';\n\nconst Bubble: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z\"></path>\n    </svg>\n  );\n};\n\nexport default Bubble;\n","import { FC } from 'react';\n\nconst Triangle: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 384 512\"\n      fill=\"currentColor\"\n      className={className}\n    >\n      <path d=\"M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z\" />\n    </svg>\n  );\n};\n\nexport default Triangle;\n","import { useQuery } from '@tanstack/react-query';\nimport { BlogConfig, ChannelDefinition, PublicClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\nimport { ChannelDefinitionVm, parseChannelTemplate } from './useChannels';\n\ntype useChannelsProps = {\n  channelSlug?: string;\n  channelId?: string;\n};\n\nconst useChannel = ({ channelSlug, channelId }: useChannelsProps) => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchChannelData = async ({ channelSlug, channelId }: useChannelsProps) => {\n    if (!channelSlug && !channelId) {\n      return;\n    }\n\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n    let channel: ChannelDefinition | undefined = undefined;\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n    if (fileData) {\n      fileData.forEach((entry) => {\n        const foundEntry = entry.find(\n          (possibleChannel) =>\n            possibleChannel.header.fileMetadata.appData.fileType ===\n              BlogConfig.ChannelDefinitionFileType &&\n            (channelSlug\n              ? possibleChannel.payload.slug === channelSlug\n              : possibleChannel.payload.channelId === channelId)\n        );\n        if (foundEntry) {\n          channel = foundEntry.payload as ChannelDefinition;\n        }\n      });\n    }\n\n    if (!channel) {\n      channel = channelSlug\n        ? await client.blogPostReadonlyProvider.getChannelDefinitionBySlug(channelSlug)\n        : channelId\n        ? await client.blogPostReadonlyProvider.getChannelDefinition(channelId)\n        : undefined;\n    }\n\n    if (channel) {\n      return {\n        ...channel,\n        template: parseChannelTemplate(channel?.templateId),\n      } as ChannelDefinitionVm;\n    }\n    return;\n  };\n\n  return useQuery(\n    ['channel', channelSlug || channelId],\n    () => fetchChannelData({ channelSlug, channelId }),\n    {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n    }\n  );\n};\n\nexport default useChannel;\n","import {\n  ApiType,\n  FileQueryParams,\n  GetBatchQueryResultOptions,\n  QueryBatchResponse,\n  TargetDrive,\n  KeyHeader,\n  EncryptedKeyHeader,\n  FileMetadata,\n  DriveProvider,\n  DataUtil,\n  DriveSearchResult,\n  PagedResult,\n  DriveDefinition,\n} from '@youfoundation/dotyoucore-js';\nimport { AxiosRequestConfig } from 'axios';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\ninterface TransitProviderOptions {\n  driveProvider: DriveProvider;\n  sharedSecret: Uint8Array | undefined | null;\n}\n\ninterface GetFileRequest {\n  dotYouId: string;\n  file: {\n    targetDrive: TargetDrive;\n    fileId: string;\n  };\n}\n\ninterface TransitQueryBatchRequest {\n  queryParams: FileQueryParams;\n  resultOptionsRequest: GetBatchQueryResultOptions;\n  dotYouId: string;\n}\n\nconst _internalMetadataCache = new Map<string, Promise<DriveSearchResult>>();\n\nexport default class TransitProvider extends OwnerProviderBase {\n  private static instance: TransitProvider;\n  private driveProvider: DriveProvider;\n\n  constructor(options: TransitProviderOptions) {\n    super(options.sharedSecret);\n\n    this.driveProvider = options.driveProvider;\n  }\n\n  async QueryBatch(\n    dotYouId: string,\n    params: FileQueryParams,\n    ro?: GetBatchQueryResultOptions\n  ): Promise<QueryBatchResponse> {\n    const client = this.createAxiosClient();\n\n    if (!ro) {\n      ro = {\n        cursorState: undefined,\n        maxRecords: 10,\n        includeMetadataHeader: true,\n      };\n    }\n\n    const request: TransitQueryBatchRequest = {\n      queryParams: params,\n      resultOptionsRequest: ro,\n      dotYouId: dotYouId,\n    };\n\n    return client.post<QueryBatchResponse>('/transit/query/batch', request).then((response) => {\n      return response.data;\n    });\n  }\n\n  async GetPayload<T>(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string,\n    fileMetadata: FileMetadata,\n    sharedSecretEncryptedKeyHeader: EncryptedKeyHeader,\n    includesJsonContent: boolean\n  ): Promise<T> {\n    const keyheader = fileMetadata.payloadIsEncrypted\n      ? await this.DecryptKeyHeader(sharedSecretEncryptedKeyHeader)\n      : undefined;\n\n    if (fileMetadata.appData.contentIsComplete && includesJsonContent) {\n      return await this.driveProvider.DecryptJsonContent<T>(fileMetadata, keyheader);\n    } else {\n      return await this.GetPayloadAsJson<T>(dotYouId, targetDrive, fileId, keyheader);\n    }\n  }\n\n  async GetPayloadAsJson<T>(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string,\n    keyHeader: KeyHeader | undefined\n  ): Promise<T> {\n    return this.GetPayloadBytes(dotYouId, targetDrive, fileId, keyHeader).then((bytes) => {\n      const json = DataUtil.byteArrayToString(new Uint8Array(bytes));\n      try {\n        const o = JSON.parse(json);\n        return o;\n      } catch (ex) {\n        console.warn('base JSON.parse failed');\n        const replaceAll = (str: string, find: string, replace: string) => {\n          return str.replace(new RegExp(find, 'g'), replace);\n        };\n\n        const jsonWithRemovedQuote = replaceAll(json, '\\u0019', '');\n        const jsonWithRemovedEmDash = replaceAll(jsonWithRemovedQuote, '\\u0014', '');\n\n        const o = JSON.parse(jsonWithRemovedEmDash);\n\n        console.warn('... but we fixed it');\n        return o;\n      }\n    });\n  }\n\n  async GetPayloadBytesNoPriorHeader(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string\n  ): Promise<{ bytes: ArrayBuffer; contentType: string }> {\n    const client = this.createAxiosClient();\n\n    const request: GetFileRequest = {\n      dotYouId: dotYouId,\n      file: {\n        targetDrive: targetDrive,\n        fileId: fileId,\n      },\n    };\n\n    const config: AxiosRequestConfig = {\n      responseType: 'arraybuffer',\n    };\n\n    return client\n      .post('/transit/query/payload', request, config)\n      .then(async (response) => {\n        // TODO Move to a new providerBase\n        const isEncrypted = response.headers.payloadencrypted === 'True';\n        if (isEncrypted && response.headers.sharedsecretencryptedheader64) {\n          const encryptedKeyHeader = DataUtil.splitSharedSecretEncryptedKeyHeader(\n            response.headers.sharedsecretencryptedheader64\n          );\n\n          const keyHeader = await this.driveProvider.DecryptKeyHeader(encryptedKeyHeader);\n          const cipher = new Uint8Array(response.data);\n\n          const bytes = await this.driveProvider.DecryptUsingKeyHeader(cipher, keyHeader);\n          return { bytes, contentType: `${response.headers.decryptedcontenttype}` };\n        }\n\n        return {\n          bytes: new Uint8Array(response.data),\n          contentType: `${response.headers.decryptedcontenttype}`,\n        };\n      })\n      .catch((error) => {\n        console.error(error);\n        throw error;\n      });\n  }\n\n  async GetPayloadBytes(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string,\n    keyHeader: KeyHeader | undefined\n  ): Promise<ArrayBuffer> {\n    const client = this.createAxiosClient();\n\n    const request: GetFileRequest = {\n      dotYouId: dotYouId,\n      file: {\n        targetDrive: targetDrive,\n        fileId: fileId,\n      },\n    };\n\n    const config: AxiosRequestConfig = {\n      responseType: 'arraybuffer',\n    };\n\n    return client\n      .post('/transit/query/payload', request, config)\n      .then((response) => {\n        if (keyHeader) {\n          const cipher = new Uint8Array(response.data);\n          return this.driveProvider.DecryptUsingKeyHeader(cipher, keyHeader).then((bytes) => {\n            return bytes;\n          });\n        } else {\n          return new Uint8Array(response.data);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n        throw error;\n      });\n  }\n\n  async GetThumbBytes(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string,\n    keyHeader: KeyHeader | undefined,\n    width: number,\n    height: number\n  ): Promise<ArrayBuffer> {\n    const client = this.createAxiosClient();\n    const request: GetFileRequest = {\n      dotYouId: dotYouId,\n      file: {\n        targetDrive: targetDrive,\n        fileId: fileId,\n      },\n    };\n    const config: AxiosRequestConfig = {\n      responseType: 'arraybuffer',\n    };\n\n    return client\n      .post('/transit/query/thumb', { ...request, width: width, height: height }, config)\n      .then((response) => {\n        if (keyHeader) {\n          const cipher = new Uint8Array(response.data);\n          return this.driveProvider.DecryptUsingKeyHeader(cipher, keyHeader).then((bytes) => {\n            return bytes;\n          });\n        } else {\n          return new Uint8Array(response.data);\n        }\n      })\n      .catch((error) => {\n        // console.error(error);\n        throw error;\n      });\n  }\n\n  async GetThumbBytesNoPriorHeader(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string,\n    width: number,\n    height: number\n  ): Promise<{ bytes: ArrayBuffer; contentType: string }> {\n    const client = this.createAxiosClient();\n    const request: GetFileRequest = {\n      dotYouId: dotYouId,\n      file: {\n        targetDrive: targetDrive,\n        fileId: fileId,\n      },\n    };\n    const config: AxiosRequestConfig = {\n      responseType: 'arraybuffer',\n    };\n\n    return client\n      .post('/transit/query/thumb', { ...request, width: width, height: height }, config)\n      .then(async (response) => {\n        // TODO Move to a new providerBase\n        const isEncrypted = response.headers.payloadencrypted === 'True';\n        if (isEncrypted && response.headers.sharedsecretencryptedheader64) {\n          const encryptedKeyHeader = DataUtil.splitSharedSecretEncryptedKeyHeader(\n            response.headers.sharedsecretencryptedheader64\n          );\n\n          const keyHeader = await this.driveProvider.DecryptKeyHeader(encryptedKeyHeader);\n          const cipher = new Uint8Array(response.data);\n\n          const bytes = await this.driveProvider.DecryptUsingKeyHeader(cipher, keyHeader);\n          return { bytes, contentType: `${response.headers.decryptedcontenttype}` };\n        }\n\n        return {\n          bytes: new Uint8Array(response.data),\n          contentType: `${response.headers.decryptedcontenttype}`,\n        };\n      })\n      .catch((error) => {\n        throw error;\n      });\n  }\n\n  async GetFileHeader(\n    dotYouId: string,\n    targetDrive: TargetDrive,\n    fileId: string\n  ): Promise<DriveSearchResult> {\n    const cacheKey = `${dotYouId}+${targetDrive.alias}-${targetDrive.type}+${fileId}`;\n    if (_internalMetadataCache.has(cacheKey)) {\n      const cacheData = await _internalMetadataCache.get(cacheKey);\n      if (cacheData) {\n        return cacheData;\n      }\n    }\n\n    const client = this.createAxiosClient();\n\n    const request: GetFileRequest = {\n      dotYouId: dotYouId,\n      file: {\n        targetDrive: targetDrive,\n        fileId: fileId,\n      },\n    };\n\n    const promise = client\n      .post('/transit/query/header', request)\n      .then((response) => {\n        return response.data as DriveSearchResult;\n      })\n      .catch((error) => {\n        //TODO: Handle this - the file was not uploaded\n        console.error(error);\n        throw error;\n      });\n\n    _internalMetadataCache.set(cacheKey, promise);\n\n    return promise;\n  }\n\n  async DecryptKeyHeader(encryptedKeyHeader: EncryptedKeyHeader): Promise<KeyHeader> {\n    return await this.driveProvider.DecryptKeyHeader(encryptedKeyHeader);\n  }\n\n  /// Drive methods:\n  //returns all drives for a given type\n  async GetDrivesByType(\n    type: string,\n    pageNumber: number,\n    pageSize: number,\n    dotYouId: string\n  ): Promise<PagedResult<DriveDefinition>> {\n    const params = {\n      driveType: type,\n      pageNumber: pageNumber,\n      pageSize: pageSize,\n      dotYouId: dotYouId,\n    };\n\n    const client = this.createAxiosClient();\n    return client.post('transit/query/metadata/type', params).then((response) => {\n      return {\n        ...response.data,\n        results: response?.data?.results?.map((result: { targetDrive: TargetDrive }) => {\n          return { ...result, targetDriveInfo: result.targetDrive };\n        }),\n      };\n    });\n  }\n\n  public static getInstance(sharedSecret?: Uint8Array): TransitProvider {\n    if (!sharedSecret) {\n      throw new Error('Shared Secret not set for OwnerProvider');\n    }\n\n    if (!TransitProvider.instance) {\n      const driveProvider = new DriveProvider({ api: ApiType.Owner, sharedSecret: sharedSecret });\n\n      TransitProvider.instance = new TransitProvider({\n        sharedSecret: sharedSecret,\n        driveProvider: driveProvider,\n      });\n    }\n\n    return TransitProvider.instance;\n  }\n}\n"],"names":["ImageGalleryLoading","tinyThumbUrl","singleRow","totalCount","className","src","style","backgroundSize","backgroundImage","backgroundPositionX","backgroundPositionY","dotYouId","fileIds","channelId","maxVisible","postUrl","previewThumbnail","useState","isInView","setIsInView","containerRef","useRef","slicedFileIds","length","slice","countExcludedFromView","navigate","useNavigate","useIntersection","buffer","DataUtil","content","window","URL","createObjectURL","Blob","type","contentType","getEmbeddedThumbUrl","undefined","ref","map","fileId","index","onClick","e","stopPropagation","location","hostname","href","doNavigate","fit","ExternalMediaProvider","sharedSecret","transitProvider","TransitProvider","targetDrive","this","GetFileHeader","getDecryptedMetadata","then","header","fileMetadata","appData","url","naturalSize","width","pixelWidth","height","pixelHeight","sizes","additionalThumbnails","size","getDecryptedImageData","data","GetThumbBytesNoPriorHeader","GetPayloadBytesNoPriorHeader","bytes","Error","instance","OwnerProviderBase","imageFileId","imageDrive","getSharedSecret","useAuth","queryClient","useQueryClient","fetchImageData","externalMediaProvider","getInstance","getDecryptedImageUrl","fetch","useQuery","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","enabled","testCache","getQueryData","getDecryptedThumbnailMeta","onError","err","console","error","alt","title","loadSize","setLoadSize","imgRef","thumbMeta","useExternalTinyThumb","embeddedThumbUrl","useExternalImage","imageUrl","findLoadOptimalSize","useEffect","setTimeout","current","targetWidth","clientWidth","targetHeight","clientHeight","matchingSize","find","state","indexOf","LoadingParagraph","PostImage","props","getChannelDrive","Image","post","primaryImageFileId","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","viewBox","d","xmlns","channelSlug","getApiType","fetchChannelData","client","PublicClient","api","channel","fileReadOnlyProvider","GetFile","fileData","forEach","entry","foundEntry","possibleChannel","fileType","BlogConfig","payload","slug","blogPostReadonlyProvider","getChannelDefinitionBySlug","getChannelDefinition","template","parseChannelTemplate","templateId","_internalMetadataCache","Map","options","driveProvider","params","ro","createAxiosClient","cursorState","maxRecords","includeMetadataHeader","request","queryParams","resultOptionsRequest","response","sharedSecretEncryptedKeyHeader","includesJsonContent","payloadIsEncrypted","DecryptKeyHeader","keyheader","contentIsComplete","DecryptJsonContent","GetPayloadAsJson","keyHeader","GetPayloadBytes","json","Uint8Array","JSON","parse","ex","warn","replaceAll","str","replace","RegExp","jsonWithRemovedQuote","jsonWithRemovedEmDash","o","file","config","responseType","headers","payloadencrypted","sharedsecretencryptedheader64","encryptedKeyHeader","cipher","DecryptUsingKeyHeader","decryptedcontenttype","catch","cacheKey","alias","has","get","cacheData","promise","set","pageNumber","pageSize","driveType","results","result","targetDriveInfo","DriveProvider","ApiType"],"sourceRoot":""}