{"version":3,"file":"static/js/729.afbc8da5.chunk.js","mappings":"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","sources":["components/Blog/Common/Card/PostTeaser.tsx","components/Blog/Overview/ListBlogOverview/ListBlogOverview.tsx","components/ui/Icons/Arrow/Arrow.tsx","components/ui/Icons/Bubble/Bubble.tsx","components/ui/Icons/Triangle/Triangle.tsx","hooks/blog/useBlogPostsInfinite.ts","hooks/blog/useChannel.ts","hooks/blog/useChannels.ts","components/ui/Submenu/Submenu.tsx","components/Blog/Overview/CardBlogOverview/CardBlogOverview.tsx","components/Blog/Overview/MasonryBlogOverview/MasonryBlogOverview.tsx","templates/Blog/Overview/BlogOverview.tsx","../node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","../node_modules/@tanstack/react-query/src/useInfiniteQuery.ts"],"sourcesContent":["import { Article, PostContent, getChannelDrive, PostFile } from '@youfoundation/dotyoucore-js';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../Image/Image';\nimport Arrow from '../../../ui/Icons/Arrow/Arrow';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport Triangle from '../../../ui/Icons/Triangle/Triangle';\nimport Bubble from '../../../ui/Icons/Bubble/Bubble';\nimport useChannel from '../../../../hooks/blog/useChannel';\nimport { ellipsisAtMaxChar } from '../../../../helpers/common';\n\ninterface PostTeaserProps {\n  className?: string;\n  postFile: PostFile<PostContent>;\n  isSingleCol?: boolean;\n  hideImageWhenNone?: boolean;\n  showChannel?: boolean;\n}\n\nconst PostTeaser: FC<PostTeaserProps> = ({\n  className,\n  postFile: { content: post, previewThumbnail },\n\n  isSingleCol,\n  hideImageWhenNone,\n  showChannel,\n}) => {\n  const { data: channel } = useChannel({ channelId: post.channelId });\n\n  return (\n    <div className={`w-full ${className ?? ''}`}>\n      <Link to={`/home/posts/${channel?.slug}/${post.slug ?? '#'}`} className=\"contents\">\n        <div className=\"relative h-full overflow-hidden rounded-lg border border-gray-200 border-opacity-60 transition-colors hover:shadow-md dark:border-gray-800 hover:dark:shadow-slate-600 \">\n          {(!hideImageWhenNone || post.primaryImageFileId) && (\n            <div className={`relative ${isSingleCol ? 'sm:p-6 sm:pb-2' : ''}`}>\n              {post.primaryImageFileId ? (\n                <>\n                  <Image\n                    className={`${isSingleCol && 'sm:rounded-lg'} ${\n                      post.type === 'Image' || post.type === 'Video'\n                        ? 'h-full max-h-[30rem] w-auto'\n                        : 'h-64 w-full md:h-36 lg:h-48'\n                    } ${post.type === 'Image' && ''} ${post.type === 'Video' && 'aspect-video'}`}\n                    fileId={post.primaryImageFileId}\n                    targetDrive={getChannelDrive(post.channelId)}\n                    alt=\"blog\"\n                    fit=\"cover\"\n                    previewThumbnail={previewThumbnail}\n                  />\n                  {post.type === 'Video' && (\n                    <>\n                      <Triangle className=\"absolute top-[calc(50%-2.5rem)] left-[calc(50%-2.5rem)] h-20 w-20 text-white\" />\n                    </>\n                  )}\n                </>\n              ) : !hideImageWhenNone ? (\n                <div\n                  className={`max-w-full overflow-hidden text-ellipsis whitespace-nowrap bg-slate-50 text-slate-200 dark:bg-slate-700 dark:text-slate-600 ${\n                    isSingleCol && 'sm:rounded-lg'\n                  } ${\n                    post.type === 'Image' || post.type === 'Video'\n                      ? 'h-full max-h-[30rem] w-auto'\n                      : 'h-64 w-full md:h-36 lg:h-48'\n                  } ${post.type === 'Video' && 'aspect-video'}`}\n                >\n                  <p className=\"p-2 text-9xl \">{post.caption}</p>\n                </div>\n              ) : null}\n            </div>\n          )}\n          <div className=\"px-6 py-4\">\n            <div className=\"flex flex-row text-foreground text-opacity-40\">\n              <span className=\"my-auto text-xs\">\n                {new Date(post.dateUnixTime).toLocaleDateString(undefined, {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric',\n                })}\n              </span>\n              <h2 className=\"my-auto ml-2 border-l pl-2 text-xs font-medium uppercase tracking-wide dark:border-slate-500\">\n                {post.type}\n                {showChannel && channel?.name ? ` - ${channel?.name}` : ''}\n              </h2>\n            </div>\n\n            <h1 className=\"text-lg font-medium text-foreground text-opacity-90\">{post.caption}</h1>\n            {post.type === 'Article' ? (\n              <>\n                <p className=\"my-3 leading-relaxed\">\n                  {ellipsisAtMaxChar((post as Article).abstract, 240)}\n                  {(post as Article)?.abstract?.length > 240 ? (\n                    <span className=\"text-button\">{t('Read more')}</span>\n                  ) : null}\n                </p>\n                <div className=\"flex flex-wrap items-center \">\n                  <span className=\"inline-flex items-center text-button md:mb-2 lg:mb-0\">\n                    {t('Read more')}\n                    <Arrow className=\"ml-2 h-4 w-4\" />\n                  </span>\n                </div>\n              </>\n            ) : null}\n          </div>\n          <div className=\"absolute bottom-0 right-0 flex items-center p-5 text-sm text-gray-300\">\n            <span className=\"inline-flex items-center\">\n              <Bubble className=\"mr-1 inline-block h-4 w-4\" /> 6\n            </span>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PostTeaser;\n","import { PostContent, PostFile } from '@youfoundation/dotyoucore-js';\nimport PostTeaser from '../../Common/Card/PostTeaser';\n\nconst ListBlogOverview = ({\n  blogPosts,\n  showChannel,\n}: {\n  blogPosts: PostFile<PostContent>[];\n  showChannel?: boolean;\n}) => {\n  return (\n    <div className=\"-my-4 max-w-4xl\">\n      {blogPosts?.map((postFile) => {\n        return (\n          <PostTeaser\n            key={postFile.content.id}\n            postFile={postFile}\n            className=\"my-4\"\n            isSingleCol={true}\n            hideImageWhenNone={true}\n            showChannel={showChannel}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ListBlogOverview;\n","import { FC } from 'react';\n\nconst Arrow: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M5 12h14\"></path>\n      <path d=\"M12 5l7 7-7 7\"></path>\n    </svg>\n  );\n};\n\nexport default Arrow;\n","import { FC } from 'react';\n\nconst Bubble: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z\"></path>\n    </svg>\n  );\n};\n\nexport default Bubble;\n","import { FC } from 'react';\n\nconst Triangle: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 384 512\"\n      fill=\"currentColor\"\n      className={className}\n    >\n      <path d=\"M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z\" />\n    </svg>\n  );\n};\n\nexport default Triangle;\n","import { useInfiniteQuery } from '@tanstack/react-query';\nimport { PublicClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsInfiniteProps = {\n  channelId?: string;\n  pageSize?: number;\n  enabled?: boolean;\n};\n\nconst useBlogPostsInfinite = ({\n  channelId,\n  pageSize = 30,\n  enabled = true,\n}: useBlogPostsInfiniteProps) => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchBlogData = async ({\n    channelId,\n    pageParam,\n  }: {\n    channelId?: string;\n    pageParam: string | Record<string, string> | undefined;\n  }) => {\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n\n    if (channelId) {\n      // run get posts from channel\n      const response = await client.blogPostReadonlyProvider.getPosts(\n        channelId,\n        undefined,\n        typeof pageParam === 'string' ? pageParam : undefined,\n        pageSize\n      );\n\n      return {\n        results: response.results.filter((file) => !file.isDraft),\n        cursorState: response.cursorState,\n      };\n    } else {\n      // run get recents\n      const response = await client.blogPostReadonlyProvider.getRecentPosts(\n        undefined,\n        pageSize,\n        typeof pageParam === 'object' ? pageParam : undefined\n      );\n\n      return {\n        results: response.results.filter((file) => !file.isDraft),\n        cursorState: response.cursorState,\n      };\n    }\n  };\n\n  return useInfiniteQuery(\n    ['blogs', channelId],\n    ({ pageParam }) => fetchBlogData({ channelId, pageParam }),\n    {\n      getNextPageParam: (lastPage) =>\n        (lastPage?.results?.length >= pageSize && lastPage?.cursorState) ?? undefined,\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      enabled: enabled,\n      // onError: (er) => {\n      //   console.log(er);\n      // },\n    }\n  );\n};\n\nexport default useBlogPostsInfinite;\n","import { useQuery } from '@tanstack/react-query';\nimport { BlogConfig, ChannelDefinition, PublicClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\nimport { ChannelDefinitionVm, parseChannelTemplate } from './useChannels';\n\ntype useChannelsProps = {\n  channelSlug?: string;\n  channelId?: string;\n};\n\nconst useChannel = ({ channelSlug, channelId }: useChannelsProps) => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchChannelData = async ({ channelSlug, channelId }: useChannelsProps) => {\n    if (!channelSlug && !channelId) {\n      return;\n    }\n\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n    let channel: ChannelDefinition | undefined = undefined;\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n    if (fileData) {\n      fileData.forEach((entry) => {\n        const foundEntry = entry.find(\n          (possibleChannel) =>\n            possibleChannel.header.fileMetadata.appData.fileType ===\n              BlogConfig.ChannelDefinitionFileType &&\n            (channelSlug\n              ? possibleChannel.payload.slug === channelSlug\n              : possibleChannel.payload.channelId === channelId)\n        );\n        if (foundEntry) {\n          channel = foundEntry.payload as ChannelDefinition;\n        }\n      });\n    }\n\n    if (!channel) {\n      channel = channelSlug\n        ? await client.blogPostReadonlyProvider.getChannelDefinitionBySlug(channelSlug)\n        : channelId\n        ? await client.blogPostReadonlyProvider.getChannelDefinition(channelId)\n        : undefined;\n    }\n\n    if (channel) {\n      return {\n        ...channel,\n        template: parseChannelTemplate(channel?.templateId),\n      } as ChannelDefinitionVm;\n    }\n    return;\n  };\n\n  return useQuery(\n    ['channel', channelSlug || channelId],\n    () => fetchChannelData({ channelSlug, channelId }),\n    {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n    }\n  );\n};\n\nexport default useChannel;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  BlogConfig,\n  ChannelDefinition,\n  ChannelTemplate,\n  PublicClient,\n} from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\nexport interface ChannelDefinitionVm extends ChannelDefinition {\n  template: ChannelTemplate;\n}\n\nexport const parseChannelTemplate = (templateId: number | undefined) => {\n  return parseInt(templateId + '') === ChannelTemplate.LargeCards\n    ? ChannelTemplate.LargeCards\n    : parseInt(templateId + '') === ChannelTemplate.MasonryLayout\n    ? ChannelTemplate.MasonryLayout\n    : ChannelTemplate.ClassicBlog;\n};\n\nconst useChannels = () => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchChannelData = async () => {\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n    let channels: ChannelDefinition[] = [];\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n    if (fileData) {\n      fileData.forEach((entry) => {\n        const entries = entry.filter(\n          (possibleChannel) =>\n            possibleChannel.header.fileMetadata.appData.fileType ===\n            BlogConfig.ChannelDefinitionFileType\n        );\n        channels = [\n          ...channels,\n          ...entries.map((entry) => {\n            return { ...entry.payload } as ChannelDefinition;\n          }),\n        ];\n      });\n    }\n\n    if (!channels?.length) {\n      channels = await client.blogPostReadonlyProvider.getChannels();\n    }\n\n    return channels.map((channel) => {\n      return {\n        ...channel,\n        template: parseChannelTemplate(channel?.templateId),\n      } as ChannelDefinitionVm;\n    });\n  };\n\n  return useQuery(['channels'], () => fetchChannelData(), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n  });\n};\n\nexport default useChannels;\n","import { FC, ReactNode } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\n\ninterface SubmenuProps {\n  className?: string;\n  items: { title: ReactNode; text?: string; key: string; path: string; className?: string }[];\n}\n\nconst Submenu: FC<SubmenuProps> = ({ className, items }) => {\n  const navigate = useNavigate();\n  const forceMobileView = items?.length >= 6;\n\n  return (\n    <>\n      <div\n        className={`hidden flex-col flex-wrap ${!forceMobileView ? 'sm:flex' : ''} sm:flex-row ${\n          className ?? ''\n        }`}\n      >\n        {items.map((item) => {\n          return (\n            // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n            <NavLink\n              className={({ isActive }) =>\n                `flex-grow cursor-pointer border-b-2 py-2 px-1 text-lg ${\n                  isActive\n                    ? 'border-button text-button'\n                    : 'border-gray-300 transition-colors duration-300 hover:border-button hover:border-opacity-50 dark:border-gray-800'\n                } ${item.className ?? ''}`\n              }\n              to={item.path}\n              key={item.key}\n              end\n            >\n              {item.title}\n            </NavLink>\n          );\n        })}\n      </div>\n      <select\n        className={`${\n          !forceMobileView ? 'sm:hidden' : ''\n        } mb-8 w-full rounded border border-gray-300 bg-white py-4 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100`}\n        onChange={(e) => navigate(e.target.value)}\n        defaultValue={window.location.pathname}\n      >\n        {items.map((item) => {\n          return (\n            <option key={item.key} value={item.path}>\n              {item.text || item.title}\n            </option>\n          );\n        })}\n      </select>\n    </>\n  );\n};\n\nexport default Submenu;\n","import { PostContent, PostFile } from '@youfoundation/dotyoucore-js';\nimport PostTeaser from '../../Common/Card/PostTeaser';\n\nconst CardBlogOverview = ({ blogPosts }: { blogPosts: PostFile<PostContent>[] }) => {\n  return (\n    <div className=\"-m-4 flex flex-wrap\">\n      {blogPosts?.map((postFile) => {\n        return (\n          <PostTeaser\n            key={postFile.content.id}\n            postFile={postFile}\n            className=\"p-4 md:w-1/2 lg:w-1/3\"\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardBlogOverview;\n","import { PostContent, PostFile } from '@youfoundation/dotyoucore-js';\nimport { useCallback, useEffect, useState } from 'react';\nimport PostTeaser from '../../Common/Card/PostTeaser';\n\nconst MasonryBlogOverview = ({ blogPosts }: { blogPosts: PostFile<PostContent>[] }) => {\n  const [cols, setCols] = useState(1);\n\n  /// Function to reorder the array to make it fit in the masonry layout which by\n  ///  default is ordered from top to bottom, instead of left to right\n  ///  credit: https://github.com/jessekorzan/masonry-css-js/blob/master/src/App.js\n  const reorder = (arr: PostFile<PostContent>[], columns: number) => {\n    const cols = columns;\n    const out = [];\n    let col = 0;\n    while (col < cols) {\n      for (let i = 0; i < arr.length; i += cols) {\n        const _val = arr[i + col];\n        if (_val !== undefined) out.push(_val);\n      }\n      col++;\n    }\n    return out;\n  };\n\n  const calculateCols = useCallback(() => {\n    const windowWidth = document.documentElement.clientWidth;\n    const cols = windowWidth >= 1280 ? 4 : windowWidth >= 1024 ? 3 : windowWidth >= 640 ? 2 : 1;\n    setCols(cols);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', calculateCols);\n\n    calculateCols();\n\n    return () => {\n      window.removeEventListener('resize', calculateCols);\n    };\n  }, [calculateCols]);\n\n  return (\n    <div className=\"-my-4 gap-4 sm:columns-2 lg:columns-3 xl:columns-4\">\n      {reorder(blogPosts, cols).map((postFile) => {\n        return (\n          <PostTeaser\n            className=\"py-2\"\n            key={postFile.content.id}\n            postFile={postFile}\n            hideImageWhenNone={true}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MasonryBlogOverview;\n","import { Helmet } from 'react-helmet-async';\n\nimport Submenu from '../../../components/ui/Submenu/Submenu';\nimport { useParams } from 'react-router-dom';\nimport { BlogConfig, ChannelTemplate, PostContent, PostFile } from '@youfoundation/dotyoucore-js';\nimport { useRef } from 'react';\nimport useChannels from '../../../hooks/blog/useChannels';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useBlogPostsInfinite from '../../../hooks/blog/useBlogPostsInfinite';\nimport CardBlogOverview from '../../../components/Blog/Overview/CardBlogOverview/CardBlogOverview';\nimport ListBlogOverview from '../../../components/Blog/Overview/ListBlogOverview/ListBlogOverview';\nimport MasonryBlogOverview from '../../../components/Blog/Overview/MasonryBlogOverview/MasonryBlogOverview';\nimport { useIntersection } from '../../../hooks/intersection/useIntersection';\nimport useChannel from '../../../hooks/blog/useChannel';\nimport { flattenInfinteData } from '../../../helpers/common';\n\nconst PAGE_SIZE = 10;\nconst Overview = () => {\n  const { channelKey } = useParams();\n\n  const { data: channels } = useChannels();\n  const { data: activeChannel } = useChannel(\n    channelKey ? { channelSlug: channelKey } : { channelId: BlogConfig.PublicChannel.channelId }\n  );\n\n  const {\n    data,\n    hasNextPage: hasMoreBlogs,\n    fetchNextPage,\n  } = useBlogPostsInfinite({\n    channelId: activeChannel?.channelId,\n    pageSize: PAGE_SIZE,\n  });\n\n  const loadMoreRef = useRef<HTMLDivElement>(null);\n\n  useIntersection(\n    hasMoreBlogs ? loadMoreRef : undefined,\n    () => {\n      fetchNextPage();\n    },\n    true\n  );\n\n  const ListComponent = activeChannel\n    ? activeChannel.template === ChannelTemplate.LargeCards\n      ? CardBlogOverview\n      : activeChannel.template === ChannelTemplate.MasonryLayout\n      ? MasonryBlogOverview\n      : ListBlogOverview\n    : ListBlogOverview;\n\n  const blogPosts = flattenInfinteData<PostFile<PostContent>>(\n    data,\n    PAGE_SIZE,\n    (a, b) => b.content.dateUnixTime - a.content.dateUnixTime\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('Blog')} | Youniverse</title>\n      </Helmet>\n\n      <section className=\"py-5\">\n        <div className=\"container mx-auto px-5\">\n          <section className=\"body-font text-gray-600 dark:text-gray-400\">\n            {channels && channels.length > 1 ? (\n              <Submenu\n                className=\"mb-8\"\n                items={channels.map((channel) => {\n                  return {\n                    key: channel.channelId,\n                    title: channel.name,\n                    path: `/home/posts/${channel.slug}`,\n                  };\n                })}\n              />\n            ) : null}\n            {blogPosts?.length ? (\n              <ListComponent blogPosts={blogPosts} />\n            ) : (\n              <>{t('No posts found')}</>\n            )}\n\n            <div ref={loadMoreRef} className=\"h-1 w-full\"></div>\n          </section>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Overview;\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n","import type {\n  QueryObserver,\n  QueryFunction,\n  QueryKey,\n} from '@tanstack/query-core'\nimport { InfiniteQueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport type { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n"],"names":["className","postFile","post","content","previewThumbnail","isSingleCol","hideImageWhenNone","showChannel","channel","useChannel","channelId","data","to","slug","primaryImageFileId","type","fileId","targetDrive","getChannelDrive","alt","fit","caption","Date","dateUnixTime","toLocaleDateString","undefined","month","day","year","name","ellipsisAtMaxChar","abstract","length","t","blogPosts","map","id","viewBox","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","d","xmlns","pageSize","enabled","useAuth","getSharedSecret","getApiType","fetchBlogData","pageParam","client","PublicClient","api","sharedSecret","blogPostReadonlyProvider","getPosts","response","results","filter","file","isDraft","cursorState","getRecentPosts","useInfiniteQuery","getNextPageParam","lastPage","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","channelSlug","fetchChannelData","fileReadOnlyProvider","GetFile","fileData","forEach","entry","foundEntry","find","possibleChannel","header","fileMetadata","appData","fileType","BlogConfig","payload","getChannelDefinitionBySlug","getChannelDefinition","template","parseChannelTemplate","templateId","useQuery","parseInt","ChannelTemplate","channels","entries","getChannels","items","navigate","useNavigate","forceMobileView","item","isActive","path","end","title","key","onChange","e","target","value","defaultValue","window","location","pathname","text","PostTeaser","useState","cols","setCols","calculateCols","useCallback","windowWidth","document","documentElement","clientWidth","useEffect","addEventListener","removeEventListener","arr","columns","out","col","i","_val","push","reorder","channelKey","useParams","useChannels","activeChannel","useBlogPostsInfinite","hasMoreBlogs","hasNextPage","fetchNextPage","loadMoreRef","useRef","useIntersection","ListComponent","CardBlogOverview","MasonryBlogOverview","ListBlogOverview","flattenInfinteData","a","b","ref","InfiniteQueryObserver","constructor","options","bindMethods","this","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","fetch","meta","fetchMore","direction","createResult","query","state","result","isFetching","isRefetching","isFetchingNextPage","fetchMeta","isFetchingPreviousPage","_state$data","pages","hasPreviousPage","_state$data2","QueryObserver","arg1","arg2","arg3","parseQueryArgs","useBaseQuery"],"sourceRoot":""}