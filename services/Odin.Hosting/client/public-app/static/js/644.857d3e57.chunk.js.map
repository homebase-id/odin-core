{"version":3,"file":"static/js/644.857d3e57.chunk.js","mappings":"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","sources":["components/Auth/ProfileNav/LoginDialog.tsx","components/ConnectionActions/ConnectLink/ConnectLink.tsx","components/Dialog/InfoDialog/InfoDialog.tsx","components/ConnectionActions/FollowLink/FollowLink.tsx","hooks/links/useLinks.ts","components/ui/Icons/Globe/Globe.tsx","components/ui/Layout/Links/Links.tsx","components/ui/Submenu/NavPills.tsx","hooks/connections/useConnections.ts","templates/Home/Common/ProfileHero/ProfileHero.tsx","provider/transit/ExternalPostsDataProvider.ts","hooks/socialFeed/useSocialFeed.ts","hooks/socialFeed/useSocialChannel.ts","components/SocialFeed/PostTeaserCard.tsx","templates/SocialFeed/SocialFeed.tsx","../node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","../node_modules/@tanstack/react-query/src/useInfiniteQuery.ts","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["import { createPortal } from 'react-dom';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport DialogWrapper from '../../ui/Dialog/DialogWrapper';\nimport { LoginBox } from './ProfileNav';\n\nconst LoginDialog = ({\n  isOpen,\n  title,\n  //   onConfirm,\n  onCancel,\n}: {\n  isOpen: boolean;\n  title: string;\n  //   onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <LoginBox />\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default LoginDialog;\n","import { useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useAuth from '../../../hooks/auth/useAuth';\nimport LoginDialog from '../../Auth/ProfileNav/LoginDialog';\n\nconst ConnectLink = ({ className }: { className: string }) => {\n  const { isAuthenticated, getIdentity, isOwner } = useAuth();\n  const [isLogin, setIsLogin] = useState(false);\n\n  if (isOwner) {\n    return null;\n  }\n\n  return (\n    <>\n      <a\n        className={`block flex-grow cursor-pointer rounded-md bg-button px-3 py-2 text-center text-button-text hover:grayscale-[20%] hover:filter sm:flex-grow-0 md:text-left ${\n          className ?? ''\n        }`}\n        href={\n          isAuthenticated && !isOwner\n            ? `https://${getIdentity()}/owner/connections/${window.location.host}`\n            : undefined\n        }\n        onClick={!isAuthenticated ? () => setIsLogin(true) : undefined}\n      >\n        {t('Connect')}\n      </a>\n\n      <LoginDialog\n        isOpen={isLogin}\n        onCancel={() => setIsLogin(false)}\n        title={t('Login required')}\n      />\n    </>\n  );\n};\n\nexport default ConnectLink;\n","import { ReactNode } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport ActionButton from '../../ui/Buttons/Button';\nimport DialogWrapper from '../../ui/Dialog/DialogWrapper';\nimport Question from '../../ui/Icons/Question/Question';\n\nconst InfoDialog = ({\n  title,\n  children,\n  confirmText,\n\n  isOpen,\n\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  children: ReactNode;\n  confirmText?: string;\n\n  isOpen: boolean;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper\n      title={\n        <div className=\"flex flex-row items-center\">\n          <Question className=\"mr-2 h-6 w-6\" /> {title}\n        </div>\n      }\n      onClose={onCancel}\n      isSidePanel={false}\n    >\n      {children}\n      <div className=\"-m-2 flex flex-row-reverse py-3\">\n        <ActionButton className=\"m-2\" onClick={onConfirm}>\n          {confirmText || t('Ok')}\n        </ActionButton>\n      </div>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default InfoDialog;\n","import { useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useAuth from '../../../hooks/auth/useAuth';\nimport InfoDialog from '../../Dialog/InfoDialog/InfoDialog';\n\nconst FollowLink = ({ className }: { className: string }) => {\n  const { isOwner } = useAuth();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (isOwner) {\n    return null;\n  }\n\n  return (\n    <>\n      <a\n        className={`block flex-grow cursor-pointer rounded-md bg-button px-3 py-2 text-center text-button-text hover:bg-button hover:grayscale-[20%] hover:filter sm:flex-grow-0 md:text-left ${\n          className ?? ''\n        }`}\n        onClick={() => setIsOpen(true)}\n      >\n        {t('Follow')}\n      </a>\n      <InfoDialog\n        isOpen={isOpen}\n        onConfirm={() => setIsOpen(false)}\n        onCancel={() => setIsOpen(false)}\n        title={t('Coming soon')}\n        children={\n          <p>\n            {t(\n              'Unfortunately it is not possible yet to follow someone. This feature will come soon'\n            )}\n          </p>\n        }\n        confirmText={t('Ok')}\n      />\n    </>\n  );\n};\n\nexport default FollowLink;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  AttributeDefinitions,\n  BuiltInProfiles,\n  PublicClient,\n  Attribute,\n  LinkFields,\n} from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\nconst useLinks = () => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchData: () => Promise<\n    { text: string; target: string; id: string }[] | undefined\n  > = async () => {\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('sitedata.json');\n    if (fileData.has('link')) {\n      const linkAttributes = fileData\n        .get('link')\n        ?.sort((attrA, attrB) => attrB.payload.priority - attrA.payload.priority)\n        .map((entry) => {\n          const attribute = entry.payload as Attribute;\n\n          return {\n            text: attribute.data[LinkFields.LinkText] as string,\n            target: attribute.data[LinkFields.LinkTarget] as string,\n            id: attribute.id,\n          };\n        });\n      if (linkAttributes?.length) {\n        return linkAttributes;\n      }\n    }\n\n    const linkAttributes = await client.profileDataProvider.getAttributeVersions(\n      BuiltInProfiles.StandardProfileId,\n      undefined,\n      [AttributeDefinitions.Link.type]\n    );\n\n    return linkAttributes\n      ?.sort((attrA, attrB) => attrB.priority - attrA.priority)\n      .map((attribute) => {\n        return {\n          text: attribute.data[LinkFields.LinkText] as string,\n          target: attribute.data[LinkFields.LinkTarget] as string,\n          id: attribute.id,\n        };\n      });\n  };\n\n  return useQuery(['link'], fetchData, {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n  });\n};\n\nexport default useLinks;\n","import { FC } from 'react';\n\nconst Globe: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 512 512\"\n      className={className}\n      fill=\"currentColor\"\n    >\n      <path d=\"M352 256c0 22.2-1.2 43.6-3.3 64H163.3c-2.2-20.4-3.3-41.8-3.3-64s1.2-43.6 3.3-64H348.7c2.2 20.4 3.3 41.8 3.3 64zm28.8-64H503.9c5.3 20.5 8.1 41.9 8.1 64s-2.8 43.5-8.1 64H380.8c2.1-20.6 3.2-42 3.2-64s-1.1-43.4-3.2-64zm112.6-32H376.7c-10-63.9-29.8-117.4-55.3-151.6c78.3 20.7 142 77.5 171.9 151.6zm-149.1 0H167.7c6.1-36.4 15.5-68.6 27-94.7c10.5-23.6 22.2-40.7 33.5-51.5C239.4 3.2 248.7 0 256 0s16.6 3.2 27.8 13.8c11.3 10.8 23 27.9 33.5 51.5c11.6 26 21 58.2 27 94.7zm-209 0H18.6C48.6 85.9 112.2 29.1 190.6 8.4C165.1 42.6 145.3 96.1 135.3 160zM8.1 192H131.2c-2.1 20.6-3.2 42-3.2 64s1.1 43.4 3.2 64H8.1C2.8 299.5 0 278.1 0 256s2.8-43.5 8.1-64zM194.7 446.6c-11.6-26-20.9-58.2-27-94.6H344.3c-6.1 36.4-15.5 68.6-27 94.6c-10.5 23.6-22.2 40.7-33.5 51.5C272.6 508.8 263.3 512 256 512s-16.6-3.2-27.8-13.8c-11.3-10.8-23-27.9-33.5-51.5zM135.3 352c10 63.9 29.8 117.4 55.3 151.6C112.2 482.9 48.6 426.1 18.6 352H135.3zm358.1 0c-30 74.1-93.6 130.9-171.9 151.6c25.5-34.2 45.2-87.7 55.3-151.6H493.4z\" />\n    </svg>\n  );\n};\n\nexport default Globe;\n","import useLinks from '../../../../hooks/links/useLinks';\nimport useSiteData from '../../../../hooks/siteData/useSiteData';\nimport Facebook from '../../Icons/Facebook/Facebook';\nimport Globe from '../../Icons/Globe/Globe';\nimport Instagram from '../../Icons/Instagram/Instagram';\nimport Linkedin from '../../Icons/Linkedin/Linkedin';\nimport Person from '../../Icons/Person/Person';\nimport Tiktok from '../../Icons/Tiktok/Tiktok';\nimport Twitter from '../../Icons/Twitter/Twitter';\n\nconst Links = ({\n  className,\n  style,\n  includeSocials,\n  direction,\n}: {\n  className?: string;\n  style?: 'secondary';\n  includeSocials?: boolean;\n  direction: 'col' | 'row';\n}) => {\n  const { data: siteData } = useSiteData();\n  const { data: links } = useLinks();\n\n  if (!links) {\n    return null;\n  }\n\n  const buttonClass =\n    style === 'secondary'\n      ? `border-gray border-[1px] ${\n          direction === 'col' ? 'py-3 px-4' : 'py-2 px-3'\n        } hover:bg-gray-100 rounded`\n      : `rounded border-0 bg-button ${\n          direction === 'col' ? 'py-3 px-4' : 'py-2 px-3'\n        } text-white hover:bg-button-hover`;\n\n  const flexDir = direction === 'col' ? 'flex-col' : 'flex-row';\n\n  return (\n    <div className={`-m-2 flex ${flexDir} flex-wrap ${className}`}>\n      {includeSocials && (\n        <>\n          {siteData?.social.map((social, index) => (\n            <a\n              href={\n                social.type !== 'dotyouid'\n                  ? `https://${social.type}.com/${social.username}`\n                  : `https://${social.username}`\n              }\n              key={index}\n              className={`m-2 flex flex-row focus:outline-none ${buttonClass}`}\n              target=\"_blank\"\n              rel={'noopener noreferrer'}\n            >\n              {social.type === 'facebook' ? (\n                <Facebook className=\"my-auto mr-5 h-4 w-4\" />\n              ) : social.type === 'twitter' ? (\n                <Twitter className=\"my-auto mr-5 h-4 w-4\" />\n              ) : social.type === 'linkedin' ? (\n                <Linkedin className=\"my-auto mr-5 h-4 w-4\" />\n              ) : social.type === 'instagram' ? (\n                <Instagram className=\"my-auto mr-5 h-4 w-4\" />\n              ) : social.type === 'tiktok' ? (\n                <Tiktok className=\"my-auto mr-5 h-4 w-4\" />\n              ) : social.type === 'dotyouid' ? (\n                <Person className=\"my-auto mr-5 h-4 w-4\" />\n              ) : (\n                <Globe className=\"my-auto mr-5 h-4 w-4\" />\n              )}\n              {social.username}\n            </a>\n          ))}\n        </>\n      )}\n      {links.map((link) => (\n        <a\n          href={link.target}\n          key={link.target}\n          className={`m-2 flex flex-row focus:outline-none ${buttonClass}`}\n          target=\"_blank\"\n          rel={'noopener noreferrer'}\n        >\n          <Globe className=\"my-auto mr-5 h-4 w-4\" />\n          {link.text}\n        </a>\n      ))}\n    </div>\n  );\n};\n\nexport default Links;\n","interface NavPillsProps {\n  className?: string;\n  items: { title: string; key: string; isActive: boolean }[];\n  onChange: (key: string) => void;\n  disallowWrap?: boolean;\n}\n\nconst NavPills = ({ className, items, onChange, disallowWrap }: NavPillsProps) => {\n  return (\n    <ul className={`-m-2 flex flex-row ${disallowWrap ? '' : 'flex-wrap'} ${className ?? ''} `}>\n      {items.map((item) => (\n        <li key={item.key} className=\"p-2\">\n          <a\n            className={`block cursor-pointer select-none rounded-lg px-4 py-2 ${\n              item.isActive ? 'bg-button text-white' : 'hover:bg-button hover:bg-opacity-20'\n            }`}\n            onClick={() => onChange(item.key)}\n          >\n            {item.title}\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default NavPills;\n","import { useQuery } from '@tanstack/react-query';\nimport { PublicClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\nconst useConnections = ({ pageSize }: { pageSize?: number }) => {\n  const { getSharedSecret, getApiType } = useAuth();\n  const sharedSecret = getSharedSecret();\n\n  const client = new PublicClient({ api: getApiType(), sharedSecret: sharedSecret });\n  const fetchConnections = async ({ pageSize }: { pageSize?: number }) => {\n    if (!sharedSecret) {\n      return;\n    }\n    try {\n      return (\n        await client.circleNetworkReadOnlyProvider.getConnections({\n          pageNumber: 1,\n          pageSize: pageSize ?? 10,\n        })\n      ).results;\n    } catch (ex) {\n      return;\n    }\n  };\n\n  return {\n    fetch: useQuery(['connections', pageSize], () => fetchConnections({ pageSize }), {\n      enabled: !!sharedSecret,\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      retry: false,\n    }),\n  };\n};\n\nexport default useConnections;\n","import {\n  BuiltInProfiles,\n  getTargetDriveFromProfileId,\n  HomePageConfig,\n} from '@youfoundation/dotyoucore-js';\nimport useSiteData from '../../../../hooks/siteData/useSiteData';\nimport Image from '../../../../components/Image/Image';\nimport Links from '../../../../components/ui/Layout/Links/Links';\nimport Socials from '../../../../components/ui/Layout/Socials/Socials';\nimport ConnectLink from '../../../../components/ConnectionActions/ConnectLink/ConnectLink';\nimport FollowLink from '../../../../components/ConnectionActions/FollowLink/FollowLink';\nimport { OwnerName } from '../../../../components/Blog/Common/Blocks/Author/Name';\n\nconst ProfileHero = ({ hideLinks }: { hideLinks?: boolean }) => {\n  const { owner, home, social } = useSiteData().data ?? {};\n\n  const targetDrive = getTargetDriveFromProfileId(BuiltInProfiles.StandardProfileId);\n\n  const showProfileImage = owner?.profileImageId && targetDrive;\n\n  return (\n    <section className=\"bg-slate-500 bg-opacity-10 dark:bg-slate-500 dark:bg-opacity-10\">\n      <div className=\"relative h-[27vh] min-h-[330px]\">\n        <Image\n          fileId={home?.headerImageFileId}\n          targetDrive={HomePageConfig.HomepageTargetDrive}\n          className=\"absolute inset-0\"\n          fit=\"cover\"\n        />\n        <div className=\"container absolute top-0 left-0 right-0 bottom-0 mx-auto flex justify-center px-5 md:block\">\n          {showProfileImage ? (\n            <div className=\"absolute bottom-[-4.5rem] h-60 w-60 overflow-hidden rounded-full border-8 border-neutral-200 md:bottom-[-7.5rem] \">\n              <Image\n                fileId={owner?.profileImageId}\n                targetDrive={targetDrive}\n                className=\"h-full w-full\"\n                fit=\"cover\"\n              />\n            </div>\n          ) : null}\n        </div>\n      </div>\n      {/* min height of 7.5 rem to ensure sufficient spacing after the hero picture to support the offset of the profile picture*/}\n      <div className=\"container mx-auto flex min-h-[8.5rem] px-5 xl:h-[8.5rem]\">\n        <div className={`my-auto w-full ${showProfileImage ? 'pt-[5rem] md:py-4 md:pl-60' : ''}`}>\n          <div className={`flex flex-col ${showProfileImage ? 'md:pl-10' : ''} lg:flex-row`}>\n            <div className=\"text-center md:text-left\">\n              <h1 className=\"text-2xl\">\n                <OwnerName />\n              </h1>\n              <small className=\"block text-base\">{home?.tagLine}</small>\n            </div>\n\n            <div className=\"my-3 flex flex-col justify-center md:my-auto md:ml-auto\">\n              <div className=\"hidden md:contents\">\n                <Socials\n                  socialHandles={social}\n                  className=\"mt-4 justify-center sm:mt-0 md:ml-auto md:justify-start\"\n                />\n              </div>\n\n              <div\n                className={`flex flex-row ${\n                  !hideLinks ? 'flex-wrap' : ''\n                } -my-1 justify-center md:ml-4 md:mt-3`}\n              >\n                <FollowLink className=\"my-1 mr-3\" />\n                <ConnectLink className=\"my-1\" />\n                {!hideLinks && (\n                  <div className=\"my-1\">\n                    <Links className=\"ml-1\" direction=\"row\" />\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ProfileHero;\n","import {\n  FileQueryParams,\n  BlogConfig,\n  PostFile,\n  PostContent,\n  GetBatchQueryResultOptions,\n  CursoredResult,\n  getChannelDrive,\n  ChannelDefinition,\n  PublicClient,\n} from '@youfoundation/dotyoucore-js';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport TransitProvider from './TransitProvider';\n\nexport interface MultiRequestCursoredResult<T> {\n  results: T;\n  cursorState: Record<string, Record<string, string>>;\n}\n\nconst _internalChannelCache = new Map<string, Promise<ChannelDefinition[]>>();\n\nexport interface PostFileVm<T extends PostContent> extends PostFile<T> {\n  dotYouId: string;\n}\n\nexport default class ExternalPostsDataProvider extends OwnerProviderBase {\n  private static instance: ExternalPostsDataProvider;\n  private transitProvider: TransitProvider;\n\n  constructor(sharedSecret: Uint8Array) {\n    super(sharedSecret);\n\n    this.transitProvider = TransitProvider.getInstance(sharedSecret);\n  }\n\n  async getRecentsFromConnections(\n    dotYouIds: string[],\n    pageSize = 10,\n    cursorState?: Record<string, Record<string, string>>,\n    includeOwn?: boolean\n  ): Promise<MultiRequestCursoredResult<PostFileVm<PostContent>[]>> {\n    const client = new PublicClient({\n      api: super.getType(),\n      sharedSecret: super.getSharedSecret(),\n    });\n    const allCursors: Record<string, Record<string, string>> = {};\n\n    const resultPerConnection = await Promise.all(\n      dotYouIds.map(async (dotYouId) => {\n        const channels = await this.getChannels(dotYouId);\n        allCursors[dotYouId] = {};\n\n        const resultsPerChannel = await Promise.all(\n          channels.map(async (channel) => {\n            const result = await this.getRecents(\n              dotYouId,\n              pageSize,\n              cursorState?.[dotYouId]?.[channel.channelId],\n              channel.channelId\n            );\n            allCursors[dotYouId][channel.channelId] = result.cursorState;\n            return result.results;\n          })\n        );\n\n        return resultsPerChannel;\n      })\n    );\n\n    if (includeOwn) {\n      const ownerDotYou = window.location.hostname;\n      const resultOfOwn = await client.blogPostReadonlyProvider.getRecentPosts(\n        undefined,\n        pageSize,\n        cursorState?.[ownerDotYou]\n      );\n\n      allCursors[ownerDotYou] = resultOfOwn.cursorState;\n      resultPerConnection.push([\n        resultOfOwn.results\n          .filter((file) => !file.isDraft)\n          .map((postFile) => {\n            return { ...postFile, dotYouId: ownerDotYou } as PostFileVm<PostContent>;\n          }),\n      ]);\n    }\n\n    return { results: resultPerConnection.flat(2), cursorState: allCursors };\n  }\n\n  async getChannels(dotYouId: string) {\n    const cacheKey = `${dotYouId}`;\n    if (_internalChannelCache.has(cacheKey)) {\n      const cacheData = await _internalChannelCache.get(cacheKey);\n      if (cacheData) {\n        return cacheData;\n      }\n    }\n\n    const drives = await this.transitProvider.GetDrivesByType(\n      BlogConfig.DriveType,\n      1,\n      1000,\n      dotYouId\n    );\n    const channelHeaders = drives.results.map((drive) => {\n      return {\n        id: drive.targetDriveInfo.alias,\n        name: drive.name,\n      };\n    });\n\n    const promise = (async () => {\n      return (\n        await Promise.all(\n          channelHeaders.map(async (header) => {\n            const definition = await this.getChannel(dotYouId, header.id);\n            return definition;\n          })\n        )\n      ).filter((channel) => channel !== undefined) as ChannelDefinition[];\n    })();\n\n    _internalChannelCache.set(cacheKey, promise);\n\n    return await promise;\n  }\n\n  async getRecents(\n    dotYouId: string,\n    maxRecords = 10,\n    cursorState?: string,\n    channelId?: string\n  ): Promise<CursoredResult<PostFileVm<PostContent>[]>> {\n    const targetDrive = channelId ? getChannelDrive(channelId) : BlogConfig.PublicChannelDrive;\n\n    const queryParams: FileQueryParams = {\n      targetDrive: targetDrive,\n      fileType: [BlogConfig.PostFileType],\n    };\n\n    const ro: GetBatchQueryResultOptions = {\n      cursorState: cursorState,\n      maxRecords: maxRecords,\n      includeMetadataHeader: true,\n    };\n\n    const result = await this.transitProvider.QueryBatch(dotYouId, queryParams, ro);\n\n    const posts = (\n      await Promise.all(\n        result.searchResults.map(async (dsr) => {\n          return {\n            fileId: dsr.fileId,\n            acl: dsr.serverMetadata?.accessControlList,\n            content: await this.transitProvider.GetPayload<PostContent>(\n              dotYouId,\n              targetDrive,\n              dsr.fileId,\n              dsr.fileMetadata,\n              dsr.sharedSecretEncryptedKeyHeader,\n              result.includeMetadataHeader\n            ),\n            dotYouId: dotYouId,\n            previewThumbnail: dsr.fileMetadata.appData.previewThumbnail,\n            additionalThumbnails: dsr.fileMetadata.appData.additionalThumbnails,\n          } as PostFileVm<PostContent>;\n        })\n      )\n    ).filter((item) => !!item);\n\n    return { cursorState: result.cursorState, results: posts };\n  }\n\n  async getChannel(dotYouId: string, channelId: string): Promise<ChannelDefinition | undefined> {\n    const targetDrive = getChannelDrive(channelId);\n\n    const queryParams: FileQueryParams = {\n      targetDrive: targetDrive,\n      fileType: [BlogConfig.ChannelDefinitionFileType],\n    };\n\n    const ro: GetBatchQueryResultOptions = {\n      cursorState: undefined,\n      maxRecords: 1,\n      includeMetadataHeader: true,\n    };\n\n    const response = await this.transitProvider.QueryBatch(dotYouId, queryParams, ro);\n\n    try {\n      if (response.searchResults.length == 1) {\n        const dsr = response.searchResults[0];\n        return await this.transitProvider.GetPayload<ChannelDefinition>(\n          dotYouId,\n          targetDrive,\n          dsr.fileId,\n          dsr.fileMetadata,\n          dsr.sharedSecretEncryptedKeyHeader,\n          response.includeMetadataHeader\n        );\n      }\n    } catch (ex) {\n      // Catch al, as targetDrive might be inaccesible (when it doesn't exist yet)\n    }\n  }\n\n  public static getInstance(sharedSecret?: Uint8Array): ExternalPostsDataProvider {\n    if (!sharedSecret) {\n      throw new Error('Shared Secret not set for OwnerProvider');\n    }\n\n    if (!ExternalPostsDataProvider.instance) {\n      ExternalPostsDataProvider.instance = new ExternalPostsDataProvider(sharedSecret);\n    }\n\n    return ExternalPostsDataProvider.instance;\n  }\n}\n","import { useInfiniteQuery } from '@tanstack/react-query';\nimport { PostContent } from '@youfoundation/dotyoucore-js';\nimport ExternalPostsDataProvider, {\n  MultiRequestCursoredResult,\n  PostFileVm,\n} from '../../provider/transit/ExternalPostsDataProvider';\nimport useAuth from '../auth/useAuth';\nimport useConnections from '../connections/useConnections';\n\nconst useSocialFeed = ({ pageSize = 10 }: { pageSize: number }) => {\n  const { getSharedSecret } = useAuth();\n  const { data: connections, isFetched: connectionsFetched } = useConnections({\n    pageSize: 100,\n  }).fetch;\n\n  const fetchAll = async ({\n    pageParam,\n  }: {\n    pageParam: Record<string, Record<string, string>>;\n  }): Promise<MultiRequestCursoredResult<PostFileVm<PostContent>[]>> => {\n    const externalPostDataProvider = ExternalPostsDataProvider.getInstance(getSharedSecret());\n    const response = await externalPostDataProvider.getRecentsFromConnections(\n      connections?.map((connection) => connection.dotYouId).filter(Boolean) as string[],\n      pageSize,\n      pageParam,\n      true\n    );\n\n    return response;\n  };\n\n  return {\n    fetchAll: useInfiniteQuery(['social-feeds'], ({ pageParam }) => fetchAll({ pageParam }), {\n      getNextPageParam: (lastPage) =>\n        (lastPage?.results?.length >= 1 && lastPage?.cursorState) ?? undefined,\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      enabled: connectionsFetched,\n    }),\n  };\n};\n\nexport default useSocialFeed;\n","import { useQuery } from '@tanstack/react-query';\nimport ExternalPostsDataProvider from '../../provider/transit/ExternalPostsDataProvider';\nimport useAuth from '../auth/useAuth';\n\ninterface useSocialChannelProps {\n  dotYouId?: string;\n  channelId?: string;\n}\n\nconst useSocialChannel = ({ dotYouId, channelId }: useSocialChannelProps) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetch = async ({ dotYouId, channelId }: useSocialChannelProps) => {\n    if (!dotYouId || !channelId) {\n      return;\n    }\n\n    const externalPostDataProvider = ExternalPostsDataProvider.getInstance(getSharedSecret());\n    return await externalPostDataProvider.getChannel(dotYouId, channelId);\n  };\n\n  return {\n    fetch: useQuery(['channel', dotYouId, channelId], () => fetch({ dotYouId, channelId }), {\n      enabled: !!dotYouId && !!channelId,\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n    }),\n  };\n};\n\nexport default useSocialChannel;\n","import { PostContent, Article, Image as ImageType, PostFile } from '@youfoundation/dotyoucore-js';\nimport { FC } from 'react';\nimport useChannel from '../../hooks/blog/useChannel';\nimport useSocialChannel from '../../hooks/socialFeed/useSocialChannel';\nimport Bubble from '../ui/Icons/Bubble/Bubble';\nimport Triangle from '../ui/Icons/Triangle/Triangle';\n\nimport PostMeta from '../Blog/Common/Blocks/Meta/Meta';\nimport FakeAnchor from '../ui/Buttons/FakeAnchor';\nimport AuthorImage from '../Blog/Common/Blocks/Author/Image';\nimport AuthorName from '../Blog/Common/Blocks/Author/Name';\nimport PrimaryImage from '../Blog/Common/Blocks/PrimaryImage/PrimaryImage';\nimport ImageGallery from '../Blog/Common/Blocks/ImageGallery/ImageGallery';\nimport { ellipsisAtMaxChar } from '../../helpers/common';\nimport { t } from '../../helpers/i18n/dictionary';\n\ninterface PostTeaserCardProps {\n  className?: string;\n  postFile: PostFile<PostContent>;\n  isDraft?: boolean;\n  dotYouId?: string;\n}\n\nconst PostTeaserCard: FC<PostTeaserCardProps> = ({\n  className,\n  dotYouId,\n  postFile: { content: post, previewThumbnail },\n}) => {\n  const isExternal = !dotYouId || dotYouId !== window.location.hostname;\n\n  const { data: externalChannel } = useSocialChannel({\n    dotYouId: isExternal ? dotYouId : undefined,\n    channelId: post.channelId,\n  }).fetch;\n  const { data: internalChannel } = useChannel({ channelId: post.channelId });\n\n  const channel = externalChannel || internalChannel;\n\n  const imageFileIds = (post as ImageType).imageFileIds;\n  const postPath = isExternal\n    ? `https://${dotYouId}/home/posts/${channel ? channel.slug : 'public-posts'}/${\n        post.slug ?? post.id\n      }`\n    : `/home/posts/${channel ? channel.slug : 'public-posts'}/${post.slug ?? post.id}`;\n\n  return (\n    <div className={`w-full rounded-lg ${className ?? ''}`}>\n      <FakeAnchor\n        href={postPath}\n        target=\"__blank\"\n        rel=\"nofollow noreferrer\"\n        className=\"relative flex h-full flex-col rounded-lg border border-gray-200 border-opacity-60 transition-colors hover:shadow-md dark:border-gray-800 hover:dark:shadow-slate-600 sm:flex-row\"\n      >\n        <div className=\"py-4 pl-4\">\n          <AuthorImage dotYouId={dotYouId} className=\"h-[5rem] w-[5rem] rounded-full\" />\n        </div>\n        <div className=\"flex max-w-lg flex-grow flex-col py-3 px-4\">\n          <div className=\"pr-6\">\n            <div className=\"mb-1 flex flex-col text-foreground text-opacity-60 md:flex-row md:items-center\">\n              <h2>\n                <AuthorName dotYouId={dotYouId} />\n              </h2>\n              <span className=\"hidden px-2 leading-4 md:block\">·</span>\n              {channel && post ? <PostMeta post={post} channel={channel} /> : null}\n            </div>\n\n            {/* Type specific content */}\n            {post.type === 'Article' ? (\n              <>\n                <h1 className=\"text-foreground text-opacity-80\">{post.caption}</h1>\n                <p className=\"leading-relaxed text-foreground text-opacity-70\">\n                  {ellipsisAtMaxChar((post as Article).abstract, 140)}{' '}\n                  {(post as Article)?.abstract?.length > 140 ? (\n                    <span className=\"text-button\">{t('Read more')}</span>\n                  ) : null}\n                </p>\n              </>\n            ) : (\n              <h1 className=\"text-foreground text-opacity-70\">{post.caption}</h1>\n            )}\n          </div>\n\n          {post.primaryImageFileId &&\n            (imageFileIds && imageFileIds.length > 1 ? (\n              <ImageGallery\n                dotYouId={dotYouId}\n                channelId={post.channelId}\n                fileIds={imageFileIds}\n                className=\"my-4\"\n                postUrl={postPath}\n                previewThumbnail={previewThumbnail}\n              />\n            ) : (\n              <div className={`relative py-4 pr-6`}>\n                <PrimaryImage\n                  post={post}\n                  dotYouId={dotYouId}\n                  className={`${'sm:rounded-lg'} ${\n                    post.type === 'Image' || post.type === 'Video'\n                      ? 'h-full max-h-[30rem] w-auto'\n                      : 'h-64 w-full md:h-36 lg:h-48'\n                  } ${post.type === 'Video' ? 'aspect-video' : ''}`}\n                  postUrl={postPath}\n                  previewThumbnail={previewThumbnail}\n                />\n                {post.type === 'Video' && (\n                  <>\n                    <Triangle className=\"text-color absolute top-[calc(50%-2.5rem)] left-[calc(50%-2.5rem)] h-20 w-20\" />\n                  </>\n                )}\n              </div>\n            ))}\n\n          {/* Interacts */}\n          <div className=\"mt-auto flex items-center pr-6 text-sm text-foreground text-opacity-10\">\n            <span className=\"inline-flex items-center\">\n              <Bubble className=\"mr-1 inline-block h-4 w-4\" /> 6\n            </span>\n          </div>\n        </div>\n      </FakeAnchor>\n    </div>\n  );\n};\n\nexport default PostTeaserCard;\n","import useSocialFeed from '../../hooks/socialFeed/useSocialFeed';\nimport { useEffect, useRef, useState } from 'react';\nimport { useIntersection } from '../../hooks/intersection/useIntersection';\nimport { PostContent } from '@youfoundation/dotyoucore-js';\nimport { PostFileVm } from '../../provider/transit/ExternalPostsDataProvider';\nimport { flattenInfinteData } from '../../helpers/common';\nimport LoadingParagraph from '../../components/ui/LoadingParagraph/LoadingParagraph';\nimport { useNavigate } from 'react-router-dom';\nimport useTabs from '../../hooks/tabs/useTabs';\nimport NavPills from '../../components/ui/Submenu/NavPills';\nimport ProfileHero from '../Home/Common/ProfileHero/ProfileHero';\nimport PostComposer from '../../components/SocialFeed/PostComposer';\nimport PostTeaserCard from '../../components/SocialFeed/PostTeaserCard';\n\nconst PAGE_SIZE = 10;\n\nconst Feed = ({ className }: { className?: string }) => {\n  const { tabs, isTabs } = useTabs();\n  const navigate = useNavigate();\n  const [forceRender, setForceRender] = useState(false);\n\n  const {\n    data: posts,\n    hasNextPage: hasMorePosts,\n    isLoading: postsLoading,\n    fetchNextPage,\n  } = useSocialFeed({ pageSize: PAGE_SIZE }).fetchAll;\n\n  const loadMoreRef = useRef<HTMLDivElement>(null);\n\n  useIntersection(\n    hasMorePosts ? loadMoreRef : undefined,\n    () => {\n      fetchNextPage();\n    },\n    true\n  );\n\n  // Flatten all pages, sorted descending and slice on the max number expected\n  const flattenedPosts = flattenInfinteData<PostFileVm<PostContent>>(\n    posts,\n    PAGE_SIZE,\n    (a, b) => b.content?.dateUnixTime - a.content?.dateUnixTime\n  );\n\n  useEffect(() => {\n    if (forceRender) {\n      setForceRender(false);\n    }\n  }, [forceRender]);\n\n  return (\n    <>\n      <ProfileHero hideLinks={true} />\n      <section className=\"body-font text-gray-600 dark:text-gray-400\">\n        <>\n          {isTabs ? (\n            <div className=\"bg-slate-500 bg-opacity-5 dark:bg-slate-500 dark:bg-opacity-5\">\n              <div className=\"container mx-auto overflow-auto px-5 py-4\">\n                <NavPills\n                  onChange={(newTab) => navigate(`/home/${newTab}`)}\n                  items={tabs.map((tab) => {\n                    return { ...tab, isActive: tab.key === 'feed' };\n                  })}\n                  disallowWrap={true}\n                />\n              </div>\n            </div>\n          ) : null}\n          <div className=\"container mx-auto px-5\">\n            <div className=\"py-10\">\n              <div className={className}>\n                <div className=\"-mx-2 flex max-w-6xl flex-col lg:flex-row xl:-mx-4\">\n                  <div className=\"py-2 px-2 lg:w-2/3 xl:px-4\">\n                    <PostComposer onPost={() => setForceRender(true)} />\n                    {postsLoading ? (\n                      <div className=\"-mx-4\">\n                        <LoadingParagraph className=\"m-4 h-10\" />\n                        <LoadingParagraph className=\"m-4 h-10\" />\n                        <LoadingParagraph className=\"m-4 h-10\" />\n                      </div>\n                    ) : flattenedPosts?.length ? (\n                      <>\n                        {flattenedPosts.map((post) => {\n                          return (\n                            <PostTeaserCard\n                              key={post.fileId || post.content.id}\n                              postFile={post}\n                              dotYouId={post.dotYouId}\n                              className={`my-2 ${\n                                !post.fileId ? 'overflow-hidden bg-slate-100 dark:bg-slate-600' : ''\n                              }`}\n                            />\n                          );\n                        })}\n                        <div ref={loadMoreRef} className=\"h-1 w-full\"></div>\n                      </>\n                    ) : null}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      </section>\n    </>\n  );\n};\n\nexport default Feed;\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n","import type {\n  QueryObserver,\n  QueryFunction,\n  QueryKey,\n} from '@tanstack/query-core'\nimport { InfiniteQueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport type { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["isOpen","title","onCancel","target","usePortal","dialog","DialogWrapper","onClose","createPortal","className","useAuth","isAuthenticated","getIdentity","isOwner","useState","isLogin","setIsLogin","href","window","location","host","undefined","onClick","t","children","confirmText","onConfirm","Question","isSidePanel","setIsOpen","getSharedSecret","getApiType","fetchData","client","PublicClient","api","sharedSecret","fileReadOnlyProvider","GetFile","fileData","has","linkAttributes","get","sort","attrA","attrB","payload","priority","map","entry","attribute","text","data","LinkFields","id","length","profileDataProvider","getAttributeVersions","BuiltInProfiles","AttributeDefinitions","useQuery","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","xmlns","viewBox","fill","d","style","includeSocials","direction","siteData","useSiteData","links","useLinks","buttonClass","flexDir","social","index","type","username","rel","Facebook","Twitter","Linkedin","Instagram","Tiktok","Person","link","items","onChange","disallowWrap","item","isActive","key","pageSize","fetchConnections","circleNetworkReadOnlyProvider","getConnections","pageNumber","results","fetch","enabled","retry","hideLinks","owner","home","targetDrive","getTargetDriveFromProfileId","showProfileImage","profileImageId","fileId","headerImageFileId","HomePageConfig","fit","tagLine","socialHandles","_internalChannelCache","Map","ExternalPostsDataProvider","transitProvider","TransitProvider","dotYouIds","cursorState","includeOwn","allCursors","Promise","all","dotYouId","getChannels","channels","channel","getRecents","channelId","result","resultsPerChannel","resultPerConnection","ownerDotYou","hostname","blogPostReadonlyProvider","getRecentPosts","resultOfOwn","push","filter","file","isDraft","postFile","flat","cacheKey","cacheData","this","GetDrivesByType","BlogConfig","drives","channelHeaders","drive","targetDriveInfo","alias","name","promise","header","getChannel","definition","set","maxRecords","getChannelDrive","queryParams","fileType","ro","includeMetadataHeader","QueryBatch","searchResults","dsr","serverMetadata","accessControlList","GetPayload","fileMetadata","sharedSecretEncryptedKeyHeader","appData","previewThumbnail","additionalThumbnails","acl","content","posts","response","Error","instance","OwnerProviderBase","useConnections","connections","connectionsFetched","isFetched","fetchAll","pageParam","externalPostDataProvider","getInstance","getRecentsFromConnections","connection","Boolean","useInfiniteQuery","getNextPageParam","lastPage","post","isExternal","externalChannel","useSocialChannel","internalChannel","useChannel","imageFileIds","postPath","slug","FakeAnchor","caption","ellipsisAtMaxChar","abstract","primaryImageFileId","ImageGallery","fileIds","postUrl","PrimaryImage","Triangle","Bubble","useTabs","tabs","isTabs","navigate","useNavigate","forceRender","setForceRender","useSocialFeed","hasMorePosts","hasNextPage","postsLoading","isLoading","fetchNextPage","loadMoreRef","useRef","useIntersection","flattenedPosts","flattenInfinteData","a","b","dateUnixTime","useEffect","ProfileHero","NavPills","newTab","tab","PostComposer","onPost","LoadingParagraph","ref","InfiniteQueryObserver","constructor","options","bindMethods","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","meta","fetchMore","createResult","query","state","isFetching","isRefetching","isFetchingNextPage","fetchMeta","isFetchingPreviousPage","_state$data","pages","hasPreviousPage","_state$data2","QueryObserver","arg1","arg2","arg3","parseQueryArgs","useBaseQuery","MutationObserver","updateResult","mutate","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","mutation","currentMutation","observer","onUnsubscribe","listeners","removeObserver","onMutationUpdate","action","onSuccess","onError","getCurrentResult","currentResult","variables","mutateOptions","build","addObserver","execute","getDefaultState","status","isSuccess","isError","isIdle","notifyManager","_this$mutateOptions$o","context","onSettled","_this$mutateOptions$o3","error","forEach","listener","Subscribable","useMutation","parseMutationArgs","queryClient","useQueryClient","React","useSyncExternalStore","onStoreChange","subscribe","catch","noop","shouldThrowError","useErrorBoundary","mutateAsync"],"sourceRoot":""}