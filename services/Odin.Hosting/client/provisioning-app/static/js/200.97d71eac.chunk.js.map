{"version":3,"file":"static/js/200.97d71eac.chunk.js","mappings":"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","sources":["templates/ProvisionTest/ProvisionTestCustomDomain.js","templates/ProvisionTest/ScreenStatus.ts"],"sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport {ScreenStatus} from './ScreenStatus';\n\nconst defaultState = {\n    domainValue: '',\n    screenStatus: ScreenStatus.EnterDomain,\n    reservation: null,\n    registrationId: null,\n    statusText: '',\n    managedDomains: [],\n    firstRunToken: null,\n    dnsConfig: null\n};\n\nlet pollingCounter = 0;\n\nexport default class ProvisionTest extends Component {\n    root = '//' + window.location.host + '/api/registration/v1';\n\n    componentDidMount() {\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = defaultState;\n\n        //should have used autobind\n        this.handleDomainValueChange = this.handleDomainValueChange.bind(this);\n        this.handleSuffixChange = this.handleSuffixChange.bind(this);\n        this.handleReserve = this.handleReserve.bind(this);\n        this.startRegistration = this.startRegistration.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.handleAxiosError = this.handleAxiosError.bind(this);\n\n        this.startPolling = this.startPolling.bind(this);\n        this.stopPolling = this.stopPolling.bind(this);\n        this.finalizeRegistration = this.finalizeRegistration.bind(this);\n\n        this.handleConfigure = this.handleConfigure.bind(this);\n\n    }\n\n    handleReset() {\n        this.setState(defaultState);\n    }\n\n    handleDomainValueChange(event) {\n        let domain = event.target.value.trimEnd();\n        this.setState({domainValue: domain});\n    }\n\n    handleSuffixChange(event) {\n        console.log('suffix', event.target.value);\n\n        this.setState({domainSuffix: event.target.value});\n    }\n\n    getDomain() {\n        return this.state.domainValue;\n    }\n\n    async handleConfigure() {\n        let url = this.root + '/registration/dns?domain=' + this.state.domainValue;\n\n        axios\n            .get(url)\n            .then((response) => {\n                this.setState({\n                    screenStatus: ScreenStatus.DnsConfig,\n                    dnsConfig: response.data\n                });\n            })\n            .catch(this.handleAxiosError);\n    }\n\n    async handleReserve(event) {\n        let domain = this.getDomain();\n\n        let isAvailableUrl = this.root + '/registration/availability/' + domain;\n        let response = await axios.get(isAvailableUrl).catch(this.handleAxiosError);\n\n        this.setState({\n            statusText: 'Checking Availability...',\n        });\n\n        if (response.data === false) {\n            this.setState({\n                statusText: 'Not available ლ(ಠ益ಠლ)',\n            });\n\n            this.forceUpdate();\n            return;\n        }\n\n        let url = this.root + '/registration/reservations';\n        let data = {\n            domainName: domain,\n            //\"previousReservationId\": \"\"  //must be a valid guid or not included in the payload\n        };\n\n        this.setState({\n            statusText: 'submitting reservation...',\n            screenStatus: ScreenStatus.Reserving,\n        });\n\n        axios\n            .post(url, data)\n            .then((response) => {\n                console.log('reservation', response.data);\n                this.setState({\n                    reservation: response.data,\n                    statusText: 'Reservation Successful',\n                    screenStatus: ScreenStatus.ReadyToRegister,\n                });\n            })\n            .catch(this.handleAxiosError);\n    }\n\n    startRegistration() {\n        this.setState({\n            statusText: 'Starting Registration...',\n            screenStatus: ScreenStatus.RegistrationInProgress,\n        });\n\n        let url = this.root + '/registration/register';\n        let data = {\n            reservationId: this.state.reservation.id\n        };\n\n        axios\n            .post(url, data)\n            .then((response) => {\n                this.setState({\n                    statusText: 'Polling for certificate creation ever two seconds',\n                    screenStatus: ScreenStatus.PollingForCertificate,\n                    firstRunToken: response.data,\n                });\n\n                this.startPolling();\n            })\n            .catch(this.handleAxiosError);\n    }\n\n    startPolling() {\n        this.timer = setInterval(() => this.poll(), 2000);\n    }\n\n    poll() {\n        pollingCounter++;\n        this.setState({\n            statusText: 'Polling Registration...' + pollingCounter,\n        });\n\n        let url = this.root + '/registration/status?firstRunToken=' + this.state.firstRunToken;\n\n        axios\n            .get(url)\n            .then((response) => {\n                let regStatus = response.data;\n\n                // public enum RegistrationStatus\n                // {\n                //     Unknown = 0,\n                //     AwaitingCertificate = 100,\n                //     ReadyForPassword = 200\n                // }\n\n                const Unknown = 0;\n                const AwaitingCertificate = 100;\n                const ReadyForPassword = 200;\n\n                if (regStatus === \"readyForPassword\") {\n                    this.stopPolling();\n                    this.finalizeRegistration();\n                    return;\n                }\n\n                if (regStatus !== \"awaitingCertificate\") {\n                    this.stopPolling();\n                    this.setState({\n                        statusText: 'Unknown status returned',\n                        screenStatus: ScreenStatus.RegistrationFailed,\n                    });\n                }\n            })\n            .catch(this.handleAxiosError);\n    }\n\n    stopPolling() {\n        clearInterval(this.timer);\n        this.timer = null;\n    }\n\n    finalizeRegistration() {\n        this.setState({\n            statusText: 'Ready to set your password',\n            screenStatus: ScreenStatus.ReadyForPassword,\n        });\n    }\n\n\n    handleAxiosError(error) {\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.log(error.response.data);\n            console.log(error.response.status);\n            console.log(error.response.headers);\n            this.setState({\n                statusText:\n                    'Unhandled Error occured.  Response Status: [' +\n                    error.response.status +\n                    '].  See the console for more.',\n                screenStatus: ScreenStatus.UnhandledError,\n            });\n        } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            console.log(error.request);\n\n            this.setState({\n                statusText:\n                    'Failed: Request sent but no response received.  (this can happen when server exception occurs before the CORS header can be sent back). See the console.',\n                screenStatus: ScreenStatus.UnhandledError,\n            });\n        } else {\n            this.setState({\n                statusText:\n                    \"Something happened before sending the request.  Validate how you're setting up the request.\",\n                screenStatus: ScreenStatus.UnhandledError,\n            });\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', error.message);\n        }\n    }\n\n    render() {\n        return (\n            <div\n                style={{height: '100%', minHeight: '100%'}}\n                className=\" flex-column align-items-center justify-content-around text-center align-middle\"\n            >\n                <div className=\"pt-5\">\n                    <h1 className=\"display-6\">Test Provisioning (Custom domain)</h1>\n                    <hr/>\n\n                    <h4>{this.getDomain()}</h4>\n\n                    {this.state.screenStatus === ScreenStatus.EnterDomain && (\n                        <form>\n                            <label>\n                                Domain&nbsp;{' '}\n                                <input\n                                    type=\"text\"\n                                    value={this.state.domainValue}\n                                    size={20}\n                                    onChange={this.handleDomainValueChange}\n                                />{' '}\n                            </label>\n                            <input type=\"button\" onClick={this.handleConfigure} value=\"Configure\"/>\n                        </form>\n                    )}\n\n                    {this.state.screenStatus === ScreenStatus.Reserving && (\n                        <div style={{flexDirection: 'column'}}>Reserving domain</div>\n                    )}\n\n                    {this.state.screenStatus === ScreenStatus.ReadyToRegister && (\n                        <div style={{flexDirection: 'column'}}>\n                            <input type=\"button\" onClick={this.startRegistration} value=\"Register\"/>\n                        </div>\n                    )}\n\n                    {this.state.screenStatus === ScreenStatus.DnsConfig && (\n                        <div style={{flexDirection: 'column'}}>\n                            <h3>Set your DNS configuration as follows </h3>\n                            {this.state.dnsConfig.cdnServer.domains.map(d =>\n                                <div key={d} style={{flexDirection: 'row'}}>\n                                    <div>{d} → {this.state.dnsConfig.cdnServer.targetServer} as {this.state.dnsConfig.cdnServer.recordType}</div>\n                                </div>\n                            )}\n                            <hr/>\n                            {this.state.dnsConfig.apiServer.domains.map(d =>\n                                <div key={d} style={{flexDirection: 'row'}}>\n                                    <div >{d} → {this.state.dnsConfig.apiServer.targetServer} as {this.state.dnsConfig.apiServer.recordType}</div>\n                                </div>\n                            )}\n\n                            <br/>\n                            <input type=\"button\" onClick={this.handleReserve} value=\"Ok,I've configured DNS\"/>\n                        </div>\n                    )}\n\n                    {this.state.screenStatus === ScreenStatus.RegistrationInProgress && (\n                        <div style={{flexDirection: 'column'}}>\n                            <h3>Registration in progress</h3>\n                            <h6>{this.state.statusText}</h6>\n                            <div style={{padding: 4}}>ᕙ(⇀‸↼‶)ᕗ</div>\n                        </div>\n                    )}\n\n                    {this.state.screenStatus === ScreenStatus.PollingForCertificate && (\n                        <div style={{flexDirection: 'column'}}>\n                            <h3>Registration in progress</h3>\n                            <h6>{this.state.statusText}</h6>\n                            <div style={{padding: 4}}>(-_-)</div>\n                        </div>\n                    )}\n\n                    {this.state.screenStatus === ScreenStatus.ReadyForPassword && (\n                        <div style={{flexDirection: 'column'}}>\n                            <h3>Password is next...</h3>\n                            <h6>{this.state.statusText}</h6>\n                            <div style={{padding: 4}}> ᕦ(ò_óˇ)ᕤ</div>\n                            <h2>Your new identity: {this.getDomain()}</h2>\n\n                            <a href={`https://${this.getDomain()}/owner/firstrun?frt=${this.state.firstRunToken}`}>\n                                Click here to continue to {this.getDomain()} and set your password\n                            </a>\n                        </div>\n                    )}\n\n                    {this.state.screenStatus === ScreenStatus.RegistrationFailed && (\n                        <div style={{flexDirection: 'column'}}>\n                            <h3>Registration Failed =(</h3>\n                            <h6>{this.state.statusText}</h6>\n                            <div style={{padding: 4}}> ¯\\_(⊙︿⊙)_/¯</div>\n                            <input type=\"button\" onClick={this.handleReset} value=\"Try again\"/>\n                        </div>\n                    )}\n\n                    {this.state.screenStatus === ScreenStatus.UnhandledError && (\n                        <div style={{flexDirection: 'column'}}>\n                            <h3>Unhandled Error - See server log</h3>\n                            <h6>{this.state.statusText}</h6>\n\n                            <div style={{padding: 4}}> ¯\\_(⊙︿⊙)_/¯</div>\n                            <input type=\"button\" onClick={this.handleReset} value=\"Try again\"/>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n","export enum ScreenStatus {\n  SelectManagedOrCustomDomain,\n  EnterDomain,\n  Reserving,\n  ReadyToRegister,\n  RegistrationInProgress,\n  PollingForCertificate,\n  ReadyForPassword,\n  RegistrationFailed,\n  UnhandledError,\n  DnsConfig,\n}\n"],"names":["defaultState","domainValue","screenStatus","ScreenStatus","reservation","registrationId","statusText","managedDomains","firstRunToken","dnsConfig","pollingCounter","ProvisionTest","props","root","window","location","host","state","handleDomainValueChange","bind","handleSuffixChange","handleReserve","startRegistration","handleReset","handleAxiosError","startPolling","stopPolling","finalizeRegistration","handleConfigure","this","setState","event","domain","target","value","trimEnd","console","log","domainSuffix","url","axios","then","response","data","catch","getDomain","isAvailableUrl","forceUpdate","domainName","reservationId","id","timer","setInterval","poll","regStatus","clearInterval","error","status","headers","request","message","style","height","minHeight","className","type","size","onChange","onClick","flexDirection","cdnServer","domains","map","d","targetServer","recordType","apiServer","padding","href","Component"],"sourceRoot":""}