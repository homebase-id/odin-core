{"version":3,"file":"static/js/815.1e05ecdc.chunk.js","mappings":"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","sources":["components/Connection/ContactInfo/ContactInfo.tsx","components/PermissionViews/DrivePermissionView/DrivePermissionView.tsx","hooks/drives/useDrive.ts","provider/permission/permissionLevels.ts","provider/transit/ExternalPostsDataProvider.ts","components/Dialog/CircleMembershipDialog/CircleMembershipDialog.tsx","hooks/socialFeed/useConnectionFeed.ts","components/SocialFeed/SocialFeed.tsx","templates/Connections/ConnectionDetails/ConnectionDetails.tsx"],"sourcesContent":["import { t } from '../../../helpers/i18n/dictionary';\nimport useContact from '../../../hooks/contacts/useContact';\nimport useImage from '../../../hooks/media/useImage';\nimport { ContactConfig } from '../../../provider/contact/ContactTypes';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport FallbackImg from '../../ui/FallbackImg/FallbackImg';\nimport Cake from '../../ui/Icons/Cake/Cake';\nimport House from '../../ui/Icons/House/House';\nimport IconFrame from '../../ui/Icons/IconFrame/IconFrame';\nimport Person from '../../ui/Icons/Person/Person';\nimport Phone from '../../ui/Icons/Phone/Phone';\nimport Section from '../../ui/Sections/Section';\n\ninterface ContactInfoProps {\n  dotYouId?: string;\n  contactId?: string;\n}\n\nconst ContactInfo = ({ dotYouId, contactId }: ContactInfoProps) => {\n  const {\n    fetch: { data: contact },\n    refresh: { mutate: refresh, status: refreshState, error: refreshError },\n  } = useContact(dotYouId ? { dotYouId: dotYouId } : { id: contactId });\n\n  return (\n    <>\n      <ErrorNotification error={refreshError} />\n      <Section\n        isOpaqueBg={true}\n        title={t('Details')}\n        actions={\n          dotYouId &&\n          contact.id && (\n            <ActionButton\n              className=\"m-2 text-base\"\n              state={refreshState}\n              onClick={() => refresh({ contact })}\n              confirmOptions={{\n                title: t('Refresh data'),\n                buttonText: t('Refresh'),\n                body: t(\n                  'Are you sure you want to refresh data, overwritten data cannot be recovered.'\n                ),\n              }}\n            >\n              {t('Refresh')}\n            </ActionButton>\n          )\n        }\n      >\n        <div className=\"-mx-4 sm:flex sm:flex-row\">\n          <div className=\"flex flex-row px-4 sm:mx-0\">\n            <ContactImage\n              dotYouId={dotYouId}\n              contactId={contactId}\n              className=\"mx-auto h-[12rem] w-[12rem]\"\n            />\n          </div>\n          <div className=\"px-4\">\n            {contact?.name && (\n              <div className=\"my-3 flex flex-row\">\n                <IconFrame className=\"mr-2\">\n                  <Person className=\"h-4 w-4\" />\n                </IconFrame>\n                {contact.name.givenName ?? ''} {contact.name.surname ?? ''}\n              </div>\n            )}\n            <div className=\"my-3 flex flex-row\">\n              <IconFrame className=\"mr-2\">\n                <Phone className=\"h-4 w-4\" />\n              </IconFrame>{' '}\n              {contact.phone?.number ?? ''}\n            </div>\n            <div className=\"my-3 flex flex-row\">\n              <IconFrame className=\"mr-2\">\n                <House className=\"h-4 w-4\" />\n              </IconFrame>{' '}\n              {contact.location?.city ?? ''} {contact.location?.country ?? ''}\n            </div>\n            <div className=\"my-3 flex flex-row\">\n              <IconFrame className=\"mr-2\">\n                <Cake className=\"h-4 w-4\" />\n              </IconFrame>{' '}\n              {contact.birthday?.date ?? ''}\n            </div>\n          </div>\n        </div>\n      </Section>\n    </>\n  );\n};\n\ninterface ContactImageProps extends ContactInfoProps {\n  className?: string;\n}\n\nexport const ContactImage = ({ dotYouId, contactId, className }: ContactImageProps) => {\n  const {\n    fetch: { data: contact },\n  } = useContact(dotYouId ? { dotYouId: dotYouId } : { id: contactId });\n\n  const { data: imageUrl } = useImage(\n    contact?.imageFileId || undefined,\n    ContactConfig.ContactTargetDrive\n  ).fetch;\n\n  return (\n    <>\n      {contact?.imageUrl || imageUrl ? (\n        <figure className={`relative overflow-hidden ${className ?? ''}`}>\n          <img src={contact.imageUrl ?? imageUrl} className=\"aspect-square w-full object-cover\" />\n        </figure>\n      ) : (\n        <FallbackImg\n          initials={contact?.name ? `${contact.name.givenName[0]}${contact.name.surname[0]}` : ''}\n          className={`${className ?? ''}`}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContactInfo;\n","import { DriveDefinition } from '@youfoundation/dotyoucore-js';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useDrive from '../../../hooks/drives/useDrive';\nimport { DriveGrant } from '../../../provider/connections/CircleDataTypes';\nimport { drivePermissionLevels } from '../../../provider/permission/permissionLevels';\nimport Arrow from '../../ui/Icons/Arrow/Arrow';\nimport HardDrive from '../../ui/Icons/HardDrive/HardDrive';\nimport LoadingParagraph from '../../ui/Loaders/LoadingParagraph/LoadingParagraph';\nimport { getAccessFromPermissionNumber } from '../../../templates/DemoData/helpers';\n\nconst DrivePermissionView = ({\n  driveGrant,\n  permissionTree,\n  className,\n}: {\n  driveGrant: DriveGrant;\n  permissionTree?: string;\n  className?: string;\n}) => {\n  const { data: drive, isLoading } = useDrive({\n    targetDrive: driveGrant.permissionedDrive.drive,\n  }).fetch;\n\n  if (isLoading) {\n    return <LoadingParagraph className={`h-4 max-w-xs ${className}`} />;\n  }\n\n  return (\n    <div\n      key={`${driveGrant?.permissionedDrive?.drive?.alias}-${driveGrant?.permissionedDrive.drive?.type}`}\n      className={`flex flex-row ${className}`}\n      title={permissionTree}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"flex flex-row hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`leading-none ${!permissionTree ? 'my-auto' : ''}`}>\n            {drive?.name}:{' '}\n            {\n              getAccessFromPermissionNumber(\n                driveGrant?.permissionedDrive.permission,\n                drivePermissionLevels\n              ).name\n            }\n          </p>\n          {permissionTree && (\n            <small className=\"\">\n              {t('Via')} {permissionTree}\n            </small>\n          )}\n        </div>\n        <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n      </Link>\n    </div>\n  );\n};\n\nexport const DriveView = ({ drive, className }: { drive: DriveDefinition; className?: string }) => {\n  return (\n    <div\n      key={`${drive.targetDriveInfo?.alias}-${drive.targetDriveInfo?.type}`}\n      className={`flex flex-row ${className}`}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"flex flex-row hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6 flex-shrink-0\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`my-auto`}>{drive?.name}</p>\n        </div>\n        <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n      </Link>\n    </div>\n  );\n};\n\nexport default DrivePermissionView;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, CoreClient, TargetDrive } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\nconst useDrive = ({ targetDrive }: { targetDrive: TargetDrive }) => {\n  const { getSharedSecret } = useAuth();\n  const client = new CoreClient({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetch = async (targetDrive: TargetDrive) => {\n    const allDrives = await (\n      await client.driveProvider.GetDrives({ pageNumber: 1, pageSize: 100 })\n    ).results;\n\n    return allDrives.find(\n      (drive) =>\n        drive.targetDriveInfo.alias === targetDrive.alias &&\n        drive.targetDriveInfo.type === targetDrive.type\n    );\n  };\n\n  return {\n    fetch: useQuery(\n      ['drive', `${targetDrive.alias}_${targetDrive.type}`],\n      () => fetch(targetDrive),\n      {\n        refetchOnWindowFocus: false,\n      }\n    ),\n  };\n};\n\nexport default useDrive;\n","import { t } from '../../helpers/i18n/dictionary';\n\nexport const drivePermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Reader'), value: 1 },\n  { name: t('Editor'), value: 3 },\n];\n\nexport const circlePermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Read Connections'), value: 10 },\n  { name: t('Read Circle Members'), value: 50 },\n];\n\nexport const appPermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Read Connections'), value: 10 },\n  { name: t('Manage Connection Requests'), value: 30 },\n  { name: t('Read Circle Members'), value: 50 },\n];\n","import {\n  FileQueryParams,\n  BlogConfig,\n  PostFile,\n  PostContent,\n  GetBatchQueryResultOptions,\n  CursoredResult,\n  getChannelDrive,\n  ChannelDefinition,\n} from '@youfoundation/dotyoucore-js';\nimport { CircleNetworkProvider } from '../connections/CircleNetworkProvider';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\nimport TransitProvider from './TransitProvider';\n\nexport interface MultiRequestCursoredResult<T> {\n  results: T;\n  cursorState: Record<string, string>;\n}\n\n// interface ExternalDataProviderOptions extends ProviderOptions {\n//   driveProvider: DriveProvider;\n// }\n\nexport interface PostFileVm<T extends PostContent> extends PostFile<T> {\n  dotYouId: string;\n}\n\nexport default class ExternalPostsDataProvider extends OwnerProviderBase {\n  private static instance: ExternalPostsDataProvider;\n  private transitProvider: TransitProvider;\n  private circleNetworkProvider: CircleNetworkProvider;\n\n  constructor(sharedSecret: Uint8Array | undefined | null) {\n    super(sharedSecret);\n\n    this.transitProvider = TransitProvider.getInstance(sharedSecret);\n    this.circleNetworkProvider = CircleNetworkProvider.getInstance(sharedSecret);\n  }\n\n  async getRecentsFromAllConnections(\n    pageSize = 10,\n    cursorState?: Record<string, string>\n  ): Promise<MultiRequestCursoredResult<PostFileVm<PostContent>[]>> {\n    const connections = await this.circleNetworkProvider.getConnections({\n      pageNumber: 1,\n      pageSize: 100,\n    });\n\n    const allCursors: Record<string, string> = {};\n\n    const resultPerConnection = await Promise.all(\n      connections.results.map(async (connection) => {\n        const result = await this.getRecents(\n          connection.dotYouId,\n          pageSize,\n          cursorState?.[connection.dotYouId]\n        );\n\n        allCursors[connection.dotYouId] = result.cursorState;\n        return result.results;\n      })\n    );\n\n    return { results: resultPerConnection.flat(1), cursorState: allCursors };\n  }\n\n  async getRecents(\n    dotYouId: string,\n    maxRecords = 10,\n    cursorState?: string\n  ): Promise<CursoredResult<PostFileVm<PostContent>[]>> {\n    const targetDrive = BlogConfig.PublicChannelDrive;\n\n    const queryParams: FileQueryParams = {\n      targetDrive: targetDrive,\n      fileType: [BlogConfig.PostFileType],\n    };\n\n    const ro: GetBatchQueryResultOptions = {\n      cursorState: cursorState,\n      maxRecords: maxRecords,\n      includeMetadataHeader: true,\n    };\n\n    const result = await this.transitProvider.QueryBatch(dotYouId, queryParams, ro);\n\n    const posts = (\n      await Promise.all(\n        result.searchResults.map(async (dsr) => {\n          return {\n            fileId: dsr.fileId,\n            acl: dsr.serverMetadata?.accessControlList,\n            content: await this.transitProvider.GetPayload<PostContent>(\n              dotYouId,\n              targetDrive,\n              dsr.fileId,\n              dsr.fileMetadata,\n              dsr.sharedSecretEncryptedKeyHeader,\n              result.includeMetadataHeader\n            ),\n            dotYouId: dotYouId,\n          } as PostFileVm<PostContent>;\n        })\n      )\n    ).filter((item) => !!item);\n\n    return { cursorState: result.cursorState, results: posts };\n  }\n\n  async getChannel(dotYouId: string, channelId: string): Promise<ChannelDefinition | undefined> {\n    const targetDrive = getChannelDrive(channelId);\n\n    const queryParams: FileQueryParams = {\n      targetDrive: targetDrive,\n      fileType: [BlogConfig.ChannelDefinitionFileType],\n    };\n\n    const ro: GetBatchQueryResultOptions = {\n      cursorState: undefined,\n      maxRecords: 1,\n      includeMetadataHeader: true,\n    };\n\n    const response = await this.transitProvider.QueryBatch(dotYouId, queryParams, ro);\n\n    try {\n      if (response.searchResults.length == 1) {\n        const dsr = response.searchResults[0];\n        return await this.transitProvider.GetPayload<ChannelDefinition>(\n          dotYouId,\n          targetDrive,\n          dsr.fileId,\n          dsr.fileMetadata,\n          dsr.sharedSecretEncryptedKeyHeader,\n          response.includeMetadataHeader\n        );\n      }\n    } catch (ex) {\n      // Catch al, as targetDrive might be inaccesible (when it doesn't exist yet)\n    }\n  }\n\n  public static getInstance(sharedSecret): ExternalPostsDataProvider {\n    if (!ExternalPostsDataProvider.instance) {\n      ExternalPostsDataProvider.instance = new ExternalPostsDataProvider(sharedSecret);\n    }\n\n    return ExternalPostsDataProvider.instance;\n  }\n}\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircle from '../../../hooks/circles/useCircle';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport { CircleGrant } from '../../../provider/connections/CircleDataTypes';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport CircleSelector from '../../Form/CircleSelector';\nimport DialogWrapper from '../../ui/Dialog/DialogWrapper';\n\nconst CircleMembershipDialog = ({\n  title,\n  isOpen,\n\n  currentCircleGrants,\n  dotYouId,\n\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  isOpen: boolean;\n\n  currentCircleGrants: CircleGrant[];\n  dotYouId: string;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n\n  const {\n    provideGrant: { mutateAsync: provideGrant, error: errorProviderGrant },\n    revokeGrant: { mutateAsync: revokeGrant, error: errorRevokeGrant },\n  } = useCircle({});\n  const currentCircleGrantIds = currentCircleGrants.map((grant) => grant.circleId);\n\n  const [toRevokeGrants, setToRevokeGrants] = useState<string[]>([]);\n  const [toProvideGrants, setToProvideGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <ErrorNotification error={errorProviderGrant} />\n        <ErrorNotification error={errorRevokeGrant} />\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            await Promise.all(\n              toProvideGrants.map(async (circleToProvide) => {\n                return provideGrant({ circleId: circleToProvide, dotYouId: dotYouId });\n              })\n            );\n\n            await Promise.all(\n              toRevokeGrants.map(async (circleToRevoke) => {\n                return revokeGrant({ circleId: circleToRevoke, dotYouId: dotYouId });\n              })\n            );\n\n            setToProvideGrants([]);\n            setToRevokeGrants([]);\n\n            onConfirm();\n          }}\n        >\n          <h2 className=\"mb-2 text-lg\">{t('Member of')}:</h2>\n          <CircleSelector\n            defaultValue={[...currentCircleGrantIds, ...toProvideGrants].filter(\n              (id) => !toRevokeGrants.some((revokedId) => revokedId === id)\n            )}\n            onChange={(e) => {\n              const newGrants = e.target.value;\n\n              const toProvideGrants = newGrants.filter(\n                (newGrantId) => !currentCircleGrantIds.some((currentId) => currentId === newGrantId)\n              );\n              setToProvideGrants(toProvideGrants);\n\n              const toRevokeGrants = currentCircleGrantIds.filter(\n                (circleId) => !newGrants.some((newGrantId) => newGrantId === circleId)\n              );\n              setToRevokeGrants(toRevokeGrants);\n            }}\n          />\n\n          <div className=\"-m-2 flex flex-row-reverse py-3\">\n            <ActionButton className=\"m-2\" icon={'send'}>\n              {t('Save')}\n            </ActionButton>\n            <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default CircleMembershipDialog;\n","import { useQuery } from '@tanstack/react-query';\nimport { PostContent } from '@youfoundation/dotyoucore-js';\nimport ExternalPostsDataProvider, {\n  PostFileVm,\n} from '../../provider/transit/ExternalPostsDataProvider';\nimport useAuth from '../auth/useAuth';\n\ninterface useConnectionFeedProps {\n  dotYouId?: string;\n}\n\nconst useConnectionFeed = ({ dotYouId }: useConnectionFeedProps) => {\n  const { getSharedSecret } = useAuth();\n\n  const fetchSingle = async (dotYouId: string): Promise<PostFileVm<PostContent>[]> => {\n    if (!dotYouId) {\n      return;\n    }\n\n    const externalPostDataProvider = ExternalPostsDataProvider.getInstance(getSharedSecret());\n    return await (\n      await externalPostDataProvider.getRecents(dotYouId, 6)\n    ).results;\n  };\n  return {\n    fetchSingle: useQuery(['social-feed', dotYouId], () => fetchSingle(dotYouId), {\n      enabled: !!dotYouId,\n    }),\n  };\n};\n\nexport default useConnectionFeed;\n","import useConnectionFeed from '../../hooks/socialFeed/useConnectionFeed';\n\ninterface SocialFeedProps {\n  dotYouId: string;\n}\n\nconst SocialFeed = ({ dotYouId }: SocialFeedProps) => {\n  const { data: posts } = useConnectionFeed({ dotYouId }).fetchSingle;\n\n  return (\n    <ul className=\"-m-1 flex flex-row flex-wrap\">\n      {posts?.map((post) => (\n        <li key={post.fileId} className=\"w-1/2 p-1\">\n          <a\n            href={`https://${post.dotYouId}/home/posts/public-posts/${post.content.slug}`}\n            target=\"__blank\"\n            rel=\"nofollow noreferrer\"\n          >\n            <div className=\"rounded-md border px-4 py-2 hover:shadow-md dark:border-slate-700 hover:dark:shadow-slate-600\">\n              {post.content.caption}\n              <small className=\"block text-slate-400 dark:text-slate-600\">\n                {new Date(post.content.dateUnixTime).toLocaleDateString(undefined, {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric',\n                })}\n              </small>\n            </div>\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default SocialFeed;\n","import { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useCircles from '../../../hooks/circles/useCircles';\nimport useConnection from '../../../hooks/connections/useConnection';\nimport useContact from '../../../hooks/contacts/useContact';\nimport useFocusedEditing from '../../../hooks/focusedEditing/useFocusedEditing';\nimport {\n  AccessGrant,\n  ConnectionInfo,\n  DriveGrant,\n} from '../../../provider/connections/CircleDataTypes';\nimport Alert from '../../../components/ui/Alerts/Alert/Alert';\nimport ErrorNotification from '../../../components/ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../../components/ui/Buttons/ActionButton';\nimport CharacterHighlighter from '../../../components/ui/CharacterHighlighter/CharacterHighlighter';\nimport ContactInfo from '../../../components/Connection/ContactInfo/ContactInfo';\nimport CircleMembershipDialog from '../../../components/Dialog/CircleMembershipDialog/CircleMembershipDialog';\nimport IncomingConnectionDialog from '../../../components/Dialog/ConnectionDialogs/IncomingConnectionDialog';\nimport Persons from '../../../components/ui/Icons/Persons/Persons';\nimport PageMeta from '../../../components/ui/Layout/PageMeta/PageMeta';\nimport LoadingDetailPage from '../../../components/ui/Loaders/LoadingDetailPage/LoadingDetailPage';\nimport LoadingParagraph from '../../../components/ui/Loaders/LoadingParagraph/LoadingParagraph';\nimport CirclePermissionView from '../../../components/PermissionViews/CirclePermissionView/CirclePermissionView';\nimport DrivePermissionView from '../../../components/PermissionViews/DrivePermissionView/DrivePermissionView';\nimport Section from '../../../components/ui/Sections/Section';\nimport SocialFeed from '../../../components/SocialFeed/SocialFeed';\n\nconst ConnectionDetails = () => {\n  const { dotYouId } = useParams();\n  const navigate = useNavigate();\n\n  // Connection data:\n  const {\n    fetch: { data: connectionInfo, isLoading: connectionInfoLoading },\n    disconnect: { mutate: disconnect, status: disconnectStatus, error: disconnectError },\n    ignoreRequest: { mutateAsync: ignoreRequest, status: ignoreRequestStatus, error: ignoreError },\n    revokeConnectionRequest: {\n      mutate: revokeRequest,\n      status: revokeRequestStatus,\n      error: revokeError,\n    },\n    block: { mutate: block, status: blockStatus, error: blockError },\n    unblock: { mutate: unblock, status: unblockStatus, error: unblockError },\n  } = useConnection({ dotYouId: dotYouId });\n\n  const checkReturnTo = useFocusedEditing();\n  const [isAcceptDialogOpen, setIsAcceptDialogOpen] = useState(false);\n  const [isEditPermissionActive, setIsEditPermissionActive] = useState(false);\n\n  // Contact data:\n  const { data: contactData } = useContact({ dotYouId: dotYouId }).fetch;\n\n  if (connectionInfoLoading) {\n    return <LoadingDetailPage />;\n  }\n\n  if (!connectionInfo && !contactData) {\n    return <>{t('No matching connection found')}</>;\n  }\n\n  const actions =\n    connectionInfo.status === 'connected' ? (\n      <>\n        <ActionButton\n          type=\"primary\"\n          className=\"m-2\"\n          onClick={() => {\n            setIsEditPermissionActive(true);\n          }}\n          state={disconnectStatus}\n        >\n          {t('Edit Access')}\n        </ActionButton>\n        <ActionButton\n          type=\"remove\"\n          className=\"m-2\"\n          onClick={() => disconnect({})}\n          icon={'trash'}\n          state={disconnectStatus}\n          confirmOptions={{\n            title: `${t('Remove')} ${dotYouId}`,\n            buttonText: t('Remove'),\n            body: `${t('Are you sure you want to remove')} ${dotYouId} ${t(\n              'from your connections. They will lose all existing access.'\n            )}`,\n          }}\n        >\n          {t('Remove')}\n        </ActionButton>\n      </>\n    ) : connectionInfo.status === 'sent' ? (\n      <>\n        <ActionButton\n          type=\"secondary\"\n          className=\"m-2\"\n          onClick={() => {\n            revokeRequest(\n              { targetDotYouId: connectionInfo.senderDotYouId },\n              { onSuccess: () => navigate('/owner/connections') }\n            );\n          }}\n          state={revokeRequestStatus}\n        >\n          {t('Revoke')}\n        </ActionButton>\n      </>\n    ) : (\n      <></>\n    );\n\n  const activeConnection = connectionInfo as ConnectionInfo;\n\n  return (\n    <>\n      <ErrorNotification error={disconnectError} />\n      <ErrorNotification error={revokeError} />\n      <ErrorNotification error={blockError} />\n      <ErrorNotification error={unblockError} />\n      <ErrorNotification error={ignoreError} />\n      <PageMeta\n        icon={Persons}\n        title={\n          <>\n            <span className=\"flex flex-col\">\n              <span className=\"block\">\n                {`${\n                  contactData?.name\n                    ? `${contactData.name.givenName} ${contactData.name.surname}`\n                    : dotYouId\n                }`}\n              </span>\n              <small className=\"block text-sm\">{`(${connectionInfo.status})`}</small>\n            </span>\n          </>\n        }\n        actions={\n          <>\n            {connectionInfo.status === 'blocked' ? (\n              <ActionButton\n                type=\"remove\"\n                className=\"m-2\"\n                onClick={() => unblock(dotYouId)}\n                state={unblockStatus}\n                confirmOptions={{\n                  title: `${t('Unblock')} ${dotYouId}`,\n                  buttonText: t('Unblock'),\n                  body: `${t('Are you sure you want to unblock')} ${dotYouId}`,\n                }}\n              >\n                {t('Unblock')}\n              </ActionButton>\n            ) : (\n              <ActionButton\n                type=\"remove\"\n                className=\"m-2\"\n                onClick={() => block(dotYouId)}\n                state={blockStatus}\n                confirmOptions={{\n                  title: `${t('Block')} ${dotYouId}`,\n                  buttonText: t('Block'),\n                  body: `${t('Are you sure you want to block')} ${dotYouId}`,\n                }}\n              >\n                {t('Block')}\n              </ActionButton>\n            )}\n            {actions}\n          </>\n        }\n        breadCrumbs={[{ href: '/owner/connections', title: 'Contacts' }, { title: dotYouId }]}\n      />\n      {connectionInfo.status === 'blocked' ? (\n        <>\n          <Alert type=\"critical\">{t('This person is currently blocked')}</Alert>\n        </>\n      ) : null}\n\n      {connectionInfo.status === 'pending' ? (\n        <>\n          <Alert type=\"info\">\n            <div className=\"flex flex-grow flex-col sm:flex-row\">\n              <div className=\"mr-1\">\n                \"<CharacterHighlighter>{connectionInfo.senderDotYouId}</CharacterHighlighter>\"{' '}\n                {t('sent you a connection request')}\n                <p className=\"mt-2 text-sm text-gray-600\">{connectionInfo.message}</p>\n              </div>\n              <div className=\"my-auto ml-auto flex flex-row\">\n                <ActionButton\n                  type=\"primary\"\n                  className=\"my-auto ml-auto\"\n                  onClick={() => {\n                    setIsAcceptDialogOpen(true);\n                  }}\n                  icon=\"check\"\n                >\n                  {t('Confirm request')}...\n                </ActionButton>\n                <ActionButton\n                  type=\"secondary\"\n                  className=\"m-2\"\n                  onClick={async () => {\n                    await ignoreRequest(\n                      { senderDotYouId: connectionInfo.senderDotYouId },\n                      { onSuccess: () => navigate('/owner/connections') }\n                    );\n                    checkReturnTo('Ignored');\n                  }}\n                  state={ignoreRequestStatus}\n                  icon=\"times\"\n                >\n                  {t('Ignore request')}\n                </ActionButton>\n              </div>\n            </div>\n          </Alert>\n          <IncomingConnectionDialog\n            isOpen={isAcceptDialogOpen}\n            senderDotYouId={connectionInfo.senderDotYouId}\n            confirmText={t('Connect')}\n            onConfirm={() => {\n              setIsAcceptDialogOpen(false);\n            }}\n            onCancel={() => {\n              setIsAcceptDialogOpen(false);\n            }}\n            pendingConnection={connectionInfo}\n          />\n        </>\n      ) : null}\n\n      {contactData && <ContactInfo dotYouId={dotYouId} />}\n\n      {connectionInfo.status === 'connected' ? (\n        <>\n          <Section\n            isOpaqueBg={true}\n            title={`${t('Posts of')} ${contactData?.name?.givenName} ${contactData?.name?.surname}`}\n          >\n            <SocialFeed dotYouId={dotYouId} />\n          </Section>\n          <ConnectionPermissionViewer\n            accessGrant={activeConnection.accessGrant}\n            openEditCircleMembership={() => setIsEditPermissionActive(true)}\n          />\n          <CircleMembershipDialog\n            title={`${t('Edit Circle Membership for')} ${dotYouId}`}\n            isOpen={isEditPermissionActive}\n            dotYouId={dotYouId}\n            currentCircleGrants={activeConnection.accessGrant.circleGrants}\n            onCancel={() => {\n              setIsEditPermissionActive(false);\n            }}\n            onConfirm={() => {\n              setIsEditPermissionActive(false);\n            }}\n          />\n          <section>\n            <p className=\"text-sm\">\n              {t('Connected since')}: {new Date(activeConnection.created).toLocaleDateString()}\n            </p>\n          </section>\n        </>\n      ) : null}\n    </>\n  );\n};\n\nexport const ConnectionPermissionViewer = ({\n  accessGrant,\n  className,\n  openEditCircleMembership,\n}: {\n  accessGrant: AccessGrant;\n  className?: string;\n  openEditCircleMembership?: () => void;\n}) => {\n  const { data: circles, isLoading: circlesLoading } = useCircles().fetch;\n\n  const grantedCircles = circles?.filter((circle) =>\n    accessGrant.circleGrants.some((circleGrant) => circleGrant.circleId === circle.id)\n  );\n\n  const grantedDrives = grantedCircles?.flatMap((circle) => circle.driveGrants ?? []);\n  const uniqueDrivesWithHighestPermission = grantedDrives?.reduce((prevValue, grantedDrive) => {\n    const existingGrantIndex = prevValue.findIndex(\n      (driveGrant) =>\n        driveGrant.permissionedDrive.drive.alias === grantedDrive.permissionedDrive.drive.alias &&\n        driveGrant.permissionedDrive.drive.type === grantedDrive.permissionedDrive.drive.type\n    );\n\n    if (existingGrantIndex !== -1) {\n      prevValue[existingGrantIndex].permissionedDrive.permission = Math.max(\n        prevValue[existingGrantIndex].permissionedDrive.permission,\n        grantedDrive.permissionedDrive.permission\n      );\n      return prevValue;\n    } else {\n      return [...prevValue, grantedDrive];\n    }\n  }, [] as DriveGrant[]);\n\n  const driveGrantsWithPermissionTree = uniqueDrivesWithHighestPermission?.map((drive) => {\n    const viaCircles = grantedCircles.filter((circle) =>\n      circle.driveGrants?.some(\n        (driveGrant) =>\n          driveGrant.permissionedDrive.drive.alias === drive.permissionedDrive.drive.alias &&\n          driveGrant.permissionedDrive.drive.type === drive.permissionedDrive.drive.type\n      )\n    );\n\n    const circleNames = viaCircles.map((circle) => circle.name);\n\n    return { driveGrant: drive, permissionTree: circleNames.join(', ') };\n  });\n  return (\n    <div className={className}>\n      <Section\n        title={t('Member of the following circles')}\n        actions={<ActionButton onClick={openEditCircleMembership} type=\"mute\" icon=\"edit\" />}\n        isOpaqueBg={true}\n      >\n        {circlesLoading ? (\n          <>\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n            <LoadingParagraph className=\"mb-4 h-4 max-w-xs\" />\n          </>\n        ) : grantedCircles.length ? (\n          <>\n            <div className=\"-my-4\">\n              {grantedCircles?.map((grantedCircle) => (\n                <CirclePermissionView\n                  circleDef={grantedCircle}\n                  key={grantedCircle.id}\n                  className=\"my-4\"\n                />\n              ))}\n            </div>\n          </>\n        ) : (\n          <p>{t('Member of no circles')}</p>\n        )}\n      </Section>\n\n      {driveGrantsWithPermissionTree?.length ? (\n        <Section title={t('Access on the following drives')} isOpaqueBg={true}>\n          <div className=\"-my-6\">\n            {driveGrantsWithPermissionTree.map((grantsWithCircle) => {\n              return (\n                <DrivePermissionView\n                  key={`${grantsWithCircle.driveGrant.permissionedDrive.drive.alias}-${grantsWithCircle.driveGrant.permissionedDrive.drive.type}`}\n                  driveGrant={grantsWithCircle.driveGrant}\n                  permissionTree={grantsWithCircle.permissionTree}\n                  className=\"my-6\"\n                />\n              );\n            })}\n          </div>\n        </Section>\n      ) : null}\n    </div>\n  );\n};\n\nexport default ConnectionDetails;\n"],"names":["ContactImage","dotYouId","contactId","className","contact","useContact","id","fetch","data","imageUrl","useImage","imageFileId","undefined","ContactConfig","src","initials","name","givenName","surname","refresh","mutate","refreshState","status","refreshError","error","isOpaqueBg","title","t","actions","state","onClick","confirmOptions","buttonText","body","phone","number","location","city","country","birthday","date","driveGrant","permissionTree","useDrive","targetDrive","permissionedDrive","drive","isLoading","to","targetDriveInfo","alias","type","getAccessFromPermissionNumber","permission","drivePermissionLevels","getSharedSecret","useAuth","client","CoreClient","api","ApiType","sharedSecret","driveProvider","GetDrives","pageNumber","pageSize","results","allDrives","find","useQuery","refetchOnWindowFocus","value","circlePermissionLevels","appPermissionLevels","ExternalPostsDataProvider","transitProvider","circleNetworkProvider","TransitProvider","CircleNetworkProvider","cursorState","this","getConnections","connections","allCursors","Promise","all","map","connection","getRecents","result","resultPerConnection","flat","maxRecords","BlogConfig","queryParams","fileType","ro","includeMetadataHeader","QueryBatch","searchResults","dsr","fileId","serverMetadata","accessControlList","GetPayload","fileMetadata","sharedSecretEncryptedKeyHeader","acl","content","posts","filter","item","channelId","getChannelDrive","response","length","instance","OwnerProviderBase","isOpen","currentCircleGrants","onConfirm","onCancel","target","usePortal","useCircle","provideGrant","mutateAsync","errorProviderGrant","revokeGrant","errorRevokeGrant","currentCircleGrantIds","grant","circleId","useState","toRevokeGrants","setToRevokeGrants","toProvideGrants","setToProvideGrants","dialog","DialogWrapper","onClose","ErrorNotification","onSubmit","e","preventDefault","circleToProvide","circleToRevoke","CircleSelector","defaultValue","some","revokedId","onChange","newGrants","newGrantId","currentId","ActionButton","icon","createPortal","fetchSingle","externalPostDataProvider","enabled","useConnectionFeed","post","href","slug","rel","caption","Date","dateUnixTime","toLocaleDateString","month","day","year","ConnectionPermissionViewer","accessGrant","openEditCircleMembership","useCircles","circles","circlesLoading","grantedCircles","circle","circleGrants","circleGrant","grantedDrives","flatMap","driveGrants","uniqueDrivesWithHighestPermission","reduce","prevValue","grantedDrive","existingGrantIndex","findIndex","Math","max","driveGrantsWithPermissionTree","circleNames","join","Section","LoadingParagraph","grantedCircle","CirclePermissionView","circleDef","grantsWithCircle","DrivePermissionView","useParams","navigate","useNavigate","useConnection","connectionInfo","connectionInfoLoading","disconnect","disconnectStatus","disconnectError","ignoreRequest","ignoreRequestStatus","ignoreError","revokeConnectionRequest","revokeRequest","revokeRequestStatus","revokeError","block","blockStatus","blockError","unblock","unblockStatus","unblockError","checkReturnTo","useFocusedEditing","isAcceptDialogOpen","setIsAcceptDialogOpen","isEditPermissionActive","setIsEditPermissionActive","contactData","LoadingDetailPage","targetDotYouId","senderDotYouId","onSuccess","activeConnection","PageMeta","Persons","breadCrumbs","Alert","CharacterHighlighter","message","IncomingConnectionDialog","confirmText","pendingConnection","ContactInfo","created"],"sourceRoot":""}