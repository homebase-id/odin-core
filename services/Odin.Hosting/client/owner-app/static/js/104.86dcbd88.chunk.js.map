{"version":3,"file":"static/js/104.86dcbd88.chunk.js","mappings":"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","sources":["components/PermissionViews/DrivePermissionView/DrivePermissionView.tsx","components/PermissionViews/PermissionView/PermissionView.tsx","components/ui/Sections/Section.tsx","hooks/apps/useApp.ts","hooks/drives/useDrive.ts","provider/app/AppManagementProvider.ts","provider/permission/permissionLevels.ts"],"sourcesContent":["import { DriveDefinition } from '@youfoundation/dotyoucore-js';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useDrive from '../../../hooks/drives/useDrive';\nimport { DriveGrant } from '../../../provider/connections/CircleDataTypes';\nimport { drivePermissionLevels } from '../../../provider/permission/permissionLevels';\nimport Arrow from '../../ui/Icons/Arrow/Arrow';\nimport HardDrive from '../../ui/Icons/HardDrive/HardDrive';\nimport LoadingParagraph from '../../ui/Loaders/LoadingParagraph/LoadingParagraph';\nimport { getAccessFromPermissionNumber } from '../../../templates/DemoData/helpers';\n\nconst DrivePermissionView = ({\n  driveGrant,\n  permissionTree,\n  className,\n}: {\n  driveGrant: DriveGrant;\n  permissionTree?: string;\n  className?: string;\n}) => {\n  const { data: drive, isLoading } = useDrive({\n    targetDrive: driveGrant.permissionedDrive.drive,\n  }).fetch;\n\n  if (isLoading) {\n    return <LoadingParagraph className={`h-4 max-w-xs ${className}`} />;\n  }\n\n  return (\n    <div\n      key={`${driveGrant?.permissionedDrive?.drive?.alias}-${driveGrant?.permissionedDrive.drive?.type}`}\n      className={`flex flex-row ${className}`}\n      title={permissionTree}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"flex flex-row hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`leading-none ${!permissionTree ? 'my-auto' : ''}`}>\n            {drive?.name}:{' '}\n            {\n              getAccessFromPermissionNumber(\n                driveGrant?.permissionedDrive.permission,\n                drivePermissionLevels\n              ).name\n            }\n          </p>\n          {permissionTree && (\n            <small className=\"\">\n              {t('Via')} {permissionTree}\n            </small>\n          )}\n        </div>\n        <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n      </Link>\n    </div>\n  );\n};\n\nexport const DriveView = ({ drive, className }: { drive: DriveDefinition; className?: string }) => {\n  return (\n    <div\n      key={`${drive.targetDriveInfo?.alias}-${drive.targetDriveInfo?.type}`}\n      className={`flex flex-row ${className}`}\n    >\n      <Link\n        to={`/owner/drives/${drive?.targetDriveInfo?.alias}_${drive?.targetDriveInfo?.type}`}\n        className=\"flex flex-row hover:text-slate-700 hover:underline dark:hover:text-slate-400\"\n      >\n        <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6 flex-shrink-0\" />\n        <div className=\"mr-2 flex flex-col\">\n          <p className={`my-auto`}>{drive?.name}</p>\n        </div>\n        <Arrow className=\"my-auto ml-auto h-5 w-5\" />\n      </Link>\n    </div>\n  );\n};\n\nexport default DrivePermissionView;\n","import { appPermissionLevels } from '../../../provider/permission/permissionLevels';\nimport Persons from '../../ui/Icons/Persons/Persons';\n\nconst PermissionView = ({ permission, className }: { permission: number; className?: string }) => {\n  const permissionLevelRequested = appPermissionLevels.find((level) => level.value === permission);\n\n  return (\n    <div key={`${permissionLevelRequested?.value}`} className={`flex flex-row ${className}`}>\n      <Persons className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n      <div className=\"flex flex-col\">\n        <p className={`my-auto leading-none`}>{permissionLevelRequested?.name}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default PermissionView;\n","import React from 'react';\nimport { ReactNode, Ref } from 'react';\n\nconst Section = React.forwardRef(\n  (\n    {\n      title,\n      actions,\n      className,\n      children,\n      isOpaqueBg = false,\n      isBorderLess = false,\n    }: {\n      title?: ReactNode;\n      actions?: ReactNode;\n      className?: string;\n      children: ReactNode;\n      isOpaqueBg?: boolean;\n      isBorderLess?: boolean;\n    },\n    ref: Ref<HTMLElement>\n  ) => {\n    return (\n      <section\n        ref={ref}\n        className={`my-5 rounded-md ${\n          isOpaqueBg\n            ? isBorderLess\n              ? ''\n              : 'rounded-lg border-[1px] border-gray-200 border-opacity-80 px-5 dark:border-gray-700'\n            : 'bg-slate-50 px-5 dark:bg-slate-800'\n        } dark:text-slate-300 ${className ?? ''}`}\n      >\n        {title || actions ? (\n          <div\n            className={`relative flex flex-row items-center border-b-[1px] border-gray-200 border-opacity-80 py-5 transition-all duration-300 dark:border-gray-700`}\n          >\n            <h3 className=\"text-2xl dark:text-white\">{title}</h3>\n            <div className=\"ml-auto\">\n              <div className=\"-m-2 flex flex-col flex-wrap justify-end sm:flex-row sm:items-center\">\n                {actions}\n              </div>\n            </div>\n          </div>\n        ) : null}\n        <div className=\"py-5 \">{children}</div>\n      </section>\n    );\n  }\n);\n\nexport default Section;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, CoreClient } from '@youfoundation/dotyoucore-js';\nimport AppManagementProvider from '../../provider/app/AppManagementProvider';\nimport {\n  AppClientRegistrationRequest,\n  AppRegistrationRequest,\n  DriveGrantRequest,\n  PermissionSet,\n} from '../../provider/app/AppManagementProviderTypes';\nimport useAuth from '../auth/useAuth';\n\nconst useApp = ({ appId }: { appId: string }) => {\n  const queryClient = useQueryClient();\n  const { getSharedSecret } = useAuth();\n  const appManagementProvider = AppManagementProvider.getInstance(getSharedSecret());\n  const client = new CoreClient({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetch = async ({ appId }: { appId: string }) => {\n    return await appManagementProvider.GetAppRegistration({ appId: appId });\n  };\n\n  const registerNewApp = async ({\n    appId,\n    name,\n    permissionSet,\n    driveGrants,\n  }: {\n    appId: string;\n    name: string;\n    permissionSet: PermissionSet;\n    driveGrants: DriveGrantRequest[];\n  }) => {\n    await Promise.all(\n      driveGrants.map(async (driveGrant) => {\n        return await client.driveProvider.EnsureDrive(\n          driveGrant.permissionedDrive.drive,\n          driveGrant.driveMeta.name,\n          driveGrant.driveMeta.description,\n          false\n        );\n      })\n    );\n\n    const appRegRequest: AppRegistrationRequest = {\n      appId: appId,\n      name: name,\n      permissionSet: permissionSet,\n      drives: driveGrants.map((driveGrant) => {\n        return { ...driveGrant, driveMeta: undefined };\n      }),\n    };\n\n    await appManagementProvider.RegisterApp(appRegRequest);\n  };\n\n  const registerNewAppClient = async ({\n    appId,\n    clientPublicKey64,\n    clientFriendlyName,\n  }: {\n    appId: string;\n    clientPublicKey64: string;\n    clientFriendlyName: string;\n  }) => {\n    const clientRegRequest: AppClientRegistrationRequest = {\n      appId: appId,\n      clientPublicKey64: clientPublicKey64,\n      clientFriendlyName: clientFriendlyName,\n    };\n\n    return appManagementProvider.RegisterAppClient(clientRegRequest);\n  };\n\n  const revokeApp = async ({ appId }: { appId: string }) => {\n    return await appManagementProvider.RevokeApp({ appId: appId });\n  };\n\n  const allowApp = async ({ appId }: { appId: string }) => {\n    return await appManagementProvider.AllowApp({ appId: appId });\n  };\n\n  return {\n    fetch: useQuery(['app', appId], () => fetch({ appId }), {\n      refetchOnWindowFocus: false,\n    }),\n    registerNewApp: useMutation(registerNewApp, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['app', param.appId]);\n        queryClient.invalidateQueries(['registeredApps']);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    registerNewAppClient: useMutation(registerNewAppClient, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['app', param.appId]);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    revokeApp: useMutation(revokeApp, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['app', param.appId]);\n        queryClient.invalidateQueries(['registeredApps']);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n    allowApp: useMutation(allowApp, {\n      onSuccess: (data, param) => {\n        queryClient.invalidateQueries(['app', param.appId]);\n        queryClient.invalidateQueries(['registeredApps']);\n      },\n      onError: (ex) => {\n        console.error(ex);\n      },\n    }),\n  };\n};\n\nexport default useApp;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, CoreClient, TargetDrive } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\nconst useDrive = ({ targetDrive }: { targetDrive: TargetDrive }) => {\n  const { getSharedSecret } = useAuth();\n  const client = new CoreClient({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetch = async (targetDrive: TargetDrive) => {\n    const allDrives = await (\n      await client.driveProvider.GetDrives({ pageNumber: 1, pageSize: 100 })\n    ).results;\n\n    return allDrives.find(\n      (drive) =>\n        drive.targetDriveInfo.alias === targetDrive.alias &&\n        drive.targetDriveInfo.type === targetDrive.type\n    );\n  };\n\n  return {\n    fetch: useQuery(\n      ['drive', `${targetDrive.alias}_${targetDrive.type}`],\n      () => fetch(targetDrive),\n      {\n        refetchOnWindowFocus: false,\n      }\n    ),\n  };\n};\n\nexport default useDrive;\n","import {\n  AppClientRegistrationRequest,\n  AppClientRegistrationResponse,\n  AppRegistrationRequest,\n  RedactedAppRegistration,\n  GetAppRequest,\n} from './AppManagementProviderTypes';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\nexport default class AppManagementProvider extends OwnerProviderBase {\n  private static instance: AppManagementProvider;\n  constructor(sharedSecret: Uint8Array | undefined) {\n    super(sharedSecret);\n  }\n\n  //adds the specified client to the list of allowed clients for a given app; returns a CAT\n  async RegisterAppClient(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/client',\n      request\n    );\n    return response.data;\n  }\n\n  async RegisterChatAppClient_temp(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/chatclient_temp',\n      request\n    );\n    console.log('RegisterChatAppClient_temp returning response');\n    console.log(response);\n\n    return response.data;\n  }\n\n  async RegisterApp(request: AppRegistrationRequest): Promise<RedactedAppRegistration> {\n    const client = this.createAxiosClient();\n    const response = await client.post<RedactedAppRegistration>(\n      'appmanagement/register/app',\n      request\n    );\n\n    console.log('RegisterApp returning response');\n    console.log(response);\n\n    return response.data;\n  }\n\n  async GetAppRegistration(request: GetAppRequest): Promise<RedactedAppRegistration> {\n    const client = this.createAxiosClient();\n    const response = await client.post<RedactedAppRegistration>('appmanagement/app', request);\n    return response.data;\n  }\n\n  async GetAppRegistrations(): Promise<RedactedAppRegistration[]> {\n    const client = this.createAxiosClient();\n    const response = await client.get<RedactedAppRegistration[]>('appmanagement/list');\n    return response.data;\n  }\n\n  async RevokeApp(request: GetAppRequest): Promise<void> {\n    const client = this.createAxiosClient();\n    await client.post('appmanagement/revoke', request);\n  }\n\n  async AllowApp(request: GetAppRequest): Promise<void> {\n    const client = this.createAxiosClient();\n    const response = await client.post('appmanagement/allow', request);\n    console.log(response);\n  }\n\n  public static getInstance(sharedSecret): AppManagementProvider {\n    if (!AppManagementProvider.instance) {\n      AppManagementProvider.instance = new AppManagementProvider(sharedSecret);\n    }\n\n    return AppManagementProvider.instance;\n  }\n}\n","import { t } from '../../helpers/i18n/dictionary';\n\nexport const drivePermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Reader'), value: 1 },\n  { name: t('Editor'), value: 3 },\n];\n\nexport const circlePermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Read Connections'), value: 10 },\n  { name: t('Read Circle Members'), value: 50 },\n];\n\nexport const appPermissionLevels = [\n  { name: t('None'), value: 0 },\n  { name: t('Read Connections'), value: 10 },\n  { name: t('Manage Connection Requests'), value: 30 },\n  { name: t('Read Circle Members'), value: 50 },\n];\n"],"names":["driveGrant","permissionTree","className","useDrive","targetDrive","permissionedDrive","drive","fetch","data","isLoading","title","to","targetDriveInfo","alias","type","name","getAccessFromPermissionNumber","permission","drivePermissionLevels","t","permissionLevelRequested","appPermissionLevels","level","value","Section","React","ref","actions","children","isOpaqueBg","isBorderLess","appId","queryClient","useQueryClient","getSharedSecret","useAuth","appManagementProvider","AppManagementProvider","client","CoreClient","api","ApiType","sharedSecret","GetAppRegistration","registerNewApp","permissionSet","driveGrants","Promise","all","map","driveProvider","EnsureDrive","driveMeta","description","appRegRequest","drives","undefined","RegisterApp","registerNewAppClient","clientPublicKey64","clientFriendlyName","clientRegRequest","RegisterAppClient","revokeApp","RevokeApp","allowApp","AllowApp","useQuery","refetchOnWindowFocus","useMutation","onSuccess","param","invalidateQueries","onError","ex","console","error","GetDrives","pageNumber","pageSize","results","allDrives","find","request","this","createAxiosClient","post","response","log","get","instance","OwnerProviderBase","circlePermissionLevels"],"sourceRoot":""}