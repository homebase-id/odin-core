{"version":3,"file":"static/js/702.26e9c8e6.chunk.js","mappings":"gKAqEA,IA1DkC,SAAC,GAAqC,IAAnCA,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC/CC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAuB,OAALN,QAAK,IAALA,OAAA,EAAAA,EAAOO,SAAU,EAEzC,IAAkB,IAAdN,EACF,OAAO,SAAC,IAAD,CAAkBF,UAAU,SAIrC,IAAMS,GAAkBR,EAAMS,MAAK,SAACC,GAAD,OAAUA,EAAKC,OAASP,EAASQ,QAAjC,IAEnC,OACE,iCACE,gBACEb,UAAS,oCAAgCO,EAA8B,GAAZ,UAAlD,+BACPP,QADO,IACPA,EAAAA,EAAa,IAFjB,SAKGC,EAAMa,KAAI,SAACH,EAAMI,GAChB,OAEE,SAAC,KAAD,CACEf,UAAW,oBAAGgB,EAAH,EAAGA,SAAH,gBAEPL,EAAKX,YAAuD,KAA1C,UAAAW,EAAKX,iBAAL,eAAgBiB,QAAQ,cAAsB,GAAK,YAF9D,wDAIPD,GAAaP,GAA4B,IAAVM,EAC3B,yDACA,2HANG,sBAOLJ,EAAKX,iBAPA,QAOa,GAPb,EASXkB,GAAIP,EAAKC,KAETO,KAAG,EAZL,SAcGR,EAAKS,OAHDT,EAAKU,IAMf,OAEH,SAAC,IAAD,CACErB,UAAS,UAAMO,EAAgC,GAAd,YAAxB,SACTe,SAAU,SAACC,GAAD,OAAOpB,EAASoB,EAAEC,OAAOC,MAAzB,EACVA,MAAOC,OAAOrB,SAASQ,SAHzB,SAKGZ,EAAMa,KAAI,SAACH,GACV,OACE,mBAAuBc,MAAOd,EAAKC,KAAnC,SACGD,EAAKgB,MAAQhB,EAAKS,OADRT,EAAKU,IAIrB,QAIR,C,uFCWD,IAzEmB,WAGuC,IAAD,yDAAP,CAAC,EAFjDO,EAEuD,EAFvDA,UACAC,EACuD,EADvDA,YAEA,GAA4BC,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,gBACFC,EAAS,IAAIC,EAAAA,GAAO,CAAEC,IAAKC,EAAAA,GAAAA,MAAeC,aAAcL,MAExDM,GAAcC,EAAAA,EAAAA,kBACJC,GAAuBC,EAAAA,EAAAA,KAAiBC,QAAhDC,OAEFC,EAAS,yCAAG,WAAOf,EAAoBC,GAA3B,0EACZD,EADY,gCAEDI,EAAOY,uBAAuBC,qBAAqBjB,GAFlD,0DAIZC,EAJY,gCAKDG,EAAOY,uBAAuBE,2BAA2BjB,GALxD,2CAAH,wDASTkB,EAAQ,yCAAG,WAAOC,GAAP,sFACThB,EAAOY,uBAAuBK,sBAAsBD,GAD3C,2CAAH,sDAIRE,EAAa,yCAAG,WAAOF,GAAP,sFACdhB,EAAOY,uBAAuBO,wBAAwBH,EAAWpB,WADnD,2CAAH,sDAInB,MAAO,CACLwB,OAAOC,EAAAA,EAAAA,UACL,CAAC,UAAD,OAAYzB,QAAZ,IAAYA,EAAAA,EAAaC,IACzB,kBAAMc,EAAUf,EAAWC,EAA3B,GACA,CACEyB,sBAAsB,IAG1BC,MAAMC,EAAAA,EAAAA,aAAYT,EAAU,CAC1BU,UAAW,SAACC,EAAOC,GAEbA,EAAU/B,UACZS,EAAYuB,cAAc,CAAC,UAAWD,EAAU/B,YAEhDS,EAAYuB,cAAc,CAAC,YAE7BvB,EAAYuB,cAAc,CAAC,aAE3BrB,GACD,IAEHsB,QAAQL,EAAAA,EAAAA,aAAYN,EAAe,CACjCY,SAAS,WAAD,8BAAE,WAAOC,GAAP,8FACF1B,EAAY2B,cAAc,CAAC,aADzB,cAGFC,EAAwC5B,EAAY6B,aAAa,CAAC,aAClEC,EAJE,OAIYF,QAJZ,IAIYA,OAJZ,EAIYA,EAAkBG,QACpC,SAACC,GAAD,OAAaA,EAAQzC,YAAcmC,EAAgBnC,SAAnD,IAGFS,EAAYiC,aAAa,CAAC,YAAaH,GAR/B,kBAUD,CAAEF,iBAAAA,EAAkBF,gBAAAA,IAVnB,2CAAF,mDAAC,GAYTQ,QAAS,SAACC,EAAKC,EAASC,GACtBC,QAAQC,MAAMJ,GAEdnC,EAAYiC,aAAa,CAAC,YAAaI,EAAQT,iBAChD,EACDY,UAAW,WACTxC,EAAYyC,kBAAkB,CAAC,YAChC,IAGN,C,qJCpDoBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAGnB,WAAYC,GAAoC,kCACxC,CACJ9C,IAAK8C,EAAQ9C,IACbE,aAAc4C,EAAQ5C,aACtB6C,cAAeD,EAAQC,cACvBrC,uBAAwBoC,EAAQpC,wBAEnC,CAyHA,OAzHA,yEAED,WAAsCsC,EAAmBtD,GAAzD,yGACOsD,EAAKC,QAAQC,GADpB,gBAEIF,EAAKC,QAAQC,GAAKF,EAAKC,QAAQE,KAC3BC,EAAAA,GAAAA,SAAkBJ,EAAKC,QAAQE,MAC/BC,EAAAA,GAAAA,WAJR,0BAKcJ,EAAKK,OALnB,iCAOyBC,KAAKC,QAAQ7D,EAAWsD,EAAKC,QAAQC,IAP9D,0JAOkB,EAAkDG,OAPpE,0JAO8EG,EAP9E,QAOIR,EAAKK,OAPT,oBAUQI,KACJ,UAAAT,EAAKU,WAAL,eAAUC,yBAA0BC,EAAAA,GAAAA,YACpC,UAAAZ,EAAKU,WAAL,eAAUC,yBAA0BC,EAAAA,GAAAA,eAGhCC,EAAuC,CAC3CC,WAAYR,KAAKS,eAAeC,WAChCC,eAAgB,CACdC,gBAAe,iBAAElB,QAAF,IAAEA,OAAF,EAAEA,EAAMK,cAAR,QAAkB,GACjCc,MAAOb,KAAKc,wBAAwBC,eAAe3E,IAErD4E,eAAgB,MAGZC,EAAsBnB,EAAAA,GAAAA,gBAAyBJ,EAAKC,SACpDuB,EAAepB,EAAAA,GAAAA,mBAA4BmB,GAE3CE,EAAWzB,EAAKC,QAAQE,KAAOC,EAAAA,GAAAA,SAAkBJ,EAAKC,QAAQE,MAAQH,EAAKC,QAAQC,GAGnFwB,EAAqBF,EAAalG,OAAS,IAC3CqG,EAA+B,CACnCC,YAAa,mBACbC,QAAS,CACPC,KAAK,EACHC,EAAAA,EAAAA,IAAc,SAAU/B,EAAKC,QAAUD,EAAKC,QAAQ+B,KAAO,WAAWC,WACtEjC,EAAKC,QAAQC,IAFX,eAGEuB,GAAYA,IAAazB,EAAKC,QAAQC,GAAK,CAACuB,GAAY,KAH1D,QAIE,UAAAzB,EAAKU,WAAL,eAAUC,yBAA0BC,EAAAA,GAAAA,MAA0B,CAACsB,EAAAA,IAAY,KAEjFT,SAAUA,EACVU,kBAAmBT,EACnBU,SAAUC,EAAAA,GAAAA,aACVC,YAAaZ,EAAqBH,EAAc,KAChDgB,iBAAkBvC,EAAKuC,kBAEzBC,mBAAoB/B,EACpBgC,kBAAmBzC,EAAKU,KA/C5B,UAkDqCJ,KAAKS,eAAe2B,OACrD7B,EACAc,EACAH,OACAhB,EACAC,GAvDJ,eAkDQkC,EAlDR,yBA0DSA,EAAO3C,KAAKK,QA1DrB,sGAFC,IAED,iEA6DA,WAAiBA,EAAgB3D,GAAjC,4EACQkG,EAActC,KAAKc,wBAAwBC,eAAe3E,GAChE4D,KAAKS,eAAe8B,WAAWD,EAAavC,GAF9C,qGA7DA,IA6DA,wEAKA,WAAwB3D,EAAmBoG,GAA3C,uFACQC,OAA6BvC,EAClB,GAEXwC,EAJR,yCAIkB,WAAOD,GAAP,4FACS,EAAKE,SAASvG,EAAW,GAAIqG,EAHrC,IAED,cACRG,EADQ,OAEdH,EAAqBG,EAASC,YAFhB,SAKRC,QAAQC,IACZH,EAASI,QAAQ1H,IAAjB,yCAAqB,WAAO2H,GAAP,mFACbC,GADa,UACMD,IACb7C,IAAMoC,EAFC,SAGb,EAAKW,SAASD,EAAa9G,GAHd,2CAArB,wDANY,cAad+C,QAAQiE,IAAR,kBAAuBR,EAASI,QAAQhI,OAAxC,wBAbc,kBAeP4H,EAASI,QAAQhI,OAjBT,IAED,2CAJlB,sDAsBWqI,EAAI,EAtBf,YAsBkBA,EAAI,KAtBtB,iCAuB6BX,EAAQD,GAvBrC,6DAyBa,GAzBb,QAsB2BY,IAtB3B,gHALA,KAKA,0BA8BA,SAA0BzG,GACxB,IAAKA,EACH,MAAM,IAAI0G,MAAM,2CAGlB,IAAK/D,EAAiBgE,SAAU,CAC9B,IAAM9D,EAAgB,IAAI+D,EAAAA,GAAc,CAAE9G,IAAKC,EAAAA,GAAAA,MAAeC,aAAcA,IACtEQ,EAAyB,IAAIqG,EAAAA,GAAuB,CACxD/G,IAAKC,EAAAA,GAAAA,MACLC,aAAcA,EACd6C,cAAeA,IAGjBF,EAAiBgE,SAAW,IAAIhE,EAAiB,CAC/C7C,IAAKC,EAAAA,GAAAA,MACLC,aAAcA,EACd6C,cAAeA,EAEfrC,uBAAwBA,GAE3B,CAED,OAAOmC,EAAiBgE,QACzB,OAnIkBhE,CAAyBmE,EAAAA,IAAzBnE,EACJgE,cAAAA,C,kKCsBjB,EAlCiB,SAAC,GAAkC,IAAhCnH,EAA+B,EAA/BA,UAEVG,GAAoBD,EAAAA,EAAAA,MAApBC,gBAEFoH,EAAa,yCAAG,mJAC6B,CAAEd,iBAAa3C,GAA9D9D,EADkB,EAClBA,UAAWyG,EADO,EACPA,YAERzG,EAHe,wDAMdwH,EAAmBrE,EAAAA,EAAAA,YAA6BhD,KANlC,SAQDqH,EAAiBjB,SAASvG,OAAW8D,EAAW2C,EAXpD,IAGK,cAQdgB,EARc,OASdC,EAA0CD,EAAKb,QATjC,kBAWb,CACLA,QAASc,EACTjB,YAAagB,EAAKhB,cAbA,2CAAH,qDAiBnB,OAAOkB,EAAAA,EAAAA,kBACL,CAAC,QAAS3H,IACV,gBAAG4H,EAAH,EAAGA,UAAH,OAAmBL,EAAc,CAAEvH,UAAAA,EAAWyG,YAAamB,GAA3D,GACA,CACEC,iBAAkB,SAACC,GAAD,yBAxBL,MAyBF,OAARA,QAAQ,IAARA,GAAA,UAAAA,EAAUlB,eAAV,eAAmBhI,UAAnB,OAA0CkJ,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAUrB,oBADrC,aACqD3C,CADrD,EAElBiE,gBAAgB,EAChBrG,sBAAsB,EACtBsG,UAAWC,KAGhB,E,UCzBD,EAhBoB,WAClB,IAAQ9H,GAAoBD,EAAAA,EAAAA,MAApBC,gBACFC,EAAS,IAAIC,EAAAA,GAAO,CAAEC,IAAKC,EAAAA,GAAAA,MAAeC,aAAcL,MACxDY,EAAS,yCAAG,yGACYX,EAAOY,uBAAuBkH,wBAD1C,cACVC,EADU,yBAGTA,GAHS,2CAAH,qDAMf,MAAO,CACL3G,OAAOC,EAAAA,EAAAA,UAAS,CAAC,aAAa,kBAAMV,GAAN,GAAmB,CAC/CW,sBAAsB,IAG3B,E,mGC2DD,EAjEuB,WACrB,OAAwB0G,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAsEC,EAAAA,EAAAA,KAAa9G,KAAnE+G,EAAhB,EAAQ5H,OAA6B6H,EAArC,EAA6BC,OAA2BC,EAAxD,EAAiD7F,MAC3CzE,GAAWC,EAAAA,EAAAA,MAuBjB,OACE,iCACE,SAACsK,EAAA,EAAD,CAAmB9F,MAAO6F,KAE1B,SAACE,EAAA,EAAD,CAASvJ,MAAM,eAAewJ,YAAY,EAA1C,UACE,kBAAMC,SA1BmD,SAACtJ,GAC9DA,EAAEuJ,iBAEF,IAAMC,EAAmC,CACvCnJ,UAAW,GACXqI,KAAMA,EACN5E,MAAM2F,EAAAA,EAAAA,IAAkBf,GACxBE,YAAaA,EACbc,gBAAYvF,EACZE,IAAK,CAAEC,sBAAuBC,EAAAA,GAAAA,QAShC,OANAwE,EAAYS,EAAe,CACzBtH,UAAW,WACTtD,EAAS,gBAAD,QAAiB6K,EAAAA,EAAAA,IAAkBD,EAAcd,OAC1D,KAGI,CACR,EAOK,WACE,iBAAKjK,UAAU,OAAf,WACE,SAACkL,EAAA,EAAD,CAAOC,QAAQ,cAAf,UAA8BC,EAAAA,EAAAA,GAAE,WAChC,SAACC,EAAA,EAAD,CACEjG,GAAG,OACH6E,KAAK,cACL3I,SAAU,SAACC,GACT2I,EAAQ3I,EAAEC,OAAOC,MAClB,EACD6J,UAAQ,QAGZ,iBAAKtL,UAAU,OAAf,WACE,SAACkL,EAAA,EAAD,CAAOC,QAAQ,OAAf,UAAuBC,EAAAA,EAAAA,GAAE,kBACzB,SAACC,EAAA,EAAD,CACEjG,GAAG,OACH6E,KAAK,qBACL3I,SAAU,SAACC,GACT6I,EAAe7I,EAAEC,OAAOC,MACzB,QAGL,gBAAKzB,UAAU,gBAAf,UACE,SAACuL,EAAA,EAAD,CAAcvL,UAAU,UAAUwL,MAAOjB,EAAzC,UACGa,EAAAA,EAAAA,GAAE,0BAOhB,E,qECnDD,EAnB2B,WACzB,IAAQrJ,GAAoBD,EAAAA,EAAAA,MAApBC,gBAEF0J,EAAU,yCAAG,qGACjB7J,EADiB,EACjBA,UACAoG,EAFiB,EAEjBA,OAKMoB,EAAmBrE,EAAAA,EAAAA,YAA6BhD,KAPrC,SAQJqH,EAAiBsC,kBAAkB9J,EAAWoG,GAR1C,mFAAH,sDAWhB,MAAO,CACLyD,YAAYjI,EAAAA,EAAAA,aAAYiI,GAE3B,EC2ID,EAjJsB,SAAC,GAUhB,IATLpH,EASI,EATJA,QACAsH,EAQI,EARJA,SACAC,EAOI,EAPJA,OACA5L,EAMI,EANJA,UAOA,GAAsCgK,EAAAA,EAAAA,WAAS,UAAK3F,IAApD,eAAOwH,EAAP,KAAoBC,EAApB,KACA,GAGIzB,EAAAA,EAAAA,KAHJ,IACE9G,KAAqB+G,EADvB,EACUyB,YAAkCxB,EAD5C,EACoCC,OAA2BC,EAD/D,EACwD7F,MADxD,IAEEf,OAAuBX,EAFzB,EAEY6I,YAAoCC,EAFhD,EAEwCxB,OAAoCyB,EAF5E,EAEqErH,MAG7C6G,EACpBS,IADFT,WAAc/I,OAEVvC,GAAWC,EAAAA,EAAAA,MACjB,GAAkC4J,EAAAA,EAAAA,WAAS,GAA3C,eAAOmC,EAAP,KAAkBC,EAAlB,KAEA,GAAK/H,EAAL,CAIA,IAAMgI,EAAe,SAAC9K,GACpB,IAAM+K,GAAc,UAAQT,GAC5BS,EAAe/K,EAAEC,OAAOyI,MAAQ1I,EAAEC,OAAOC,MAEzCqK,EAAeQ,EAChB,EAEKC,EAAUC,OAAOC,KAAKC,EAAAA,IAAiBtI,QAAO,SAACuI,GAAD,OAAQC,MAAMC,OAAOF,GAArB,IAC9CG,EAAUN,OAAOC,KAAKC,EAAAA,IAAiBtI,QAAO,SAACuI,GAAD,OAAOC,MAAMC,OAAOF,GAApB,IAEpD,OACE,iCACE,SAACjC,EAAA,EAAD,CAAmB9F,MAAO6F,KAC1B,SAACC,EAAA,EAAD,CAAmB9F,MAAOqH,KAE1B,SAACtB,EAAA,EAAD,CACEvJ,OACE,kBAAMpB,UAAU,gBAAhB,WACE,SAAC+M,EAAA,GAAD,CAEEnH,IAAKiG,EAAYjG,IACjBoH,OAAQb,EACR7K,SAAU,SAACsE,GAET6F,EAAW,CAAE7J,UAAWiK,EAAYjK,UAAWoG,OAAQpC,IACvDyG,EAAa,CAAE7K,OAAQ,CAAEyI,KAAM,MAAOxI,MAAOmE,IAC9C,EACDqH,QAAS,kBAAMb,GAAa,EAAnB,GARJP,EAAYjK,WAShB,KACH,kBAAMsL,QAAS,kBAAMd,GAAa,EAAnB,EAAf,qBACMhB,EAAAA,EAAAA,GAAE,QADR,aACoB/G,EAAQ4F,OAC1B,kBAAOjK,UAAU,gBAAjB,UAAkC,SAAC,IAAD,CAAY4F,IAAKiG,EAAYjG,cAIrEgF,YAAY,EACZ5K,UAAS,OAAEA,QAAF,IAAEA,EAAAA,EAAa,GArB1B,UAuBE,kBACE6K,SAAQ,yCAAE,WAAOtJ,GAAP,6EACRA,EAAEuJ,iBADM,SAEFR,EAAYuB,GAFV,OAGR1L,EAAS,gBAAD,QAAiB6K,EAAAA,EAAAA,IAAkBa,EAAY5B,QACvD2B,IAJQ,2CAAF,sDADV,WAQE,iBAAK5L,UAAU,OAAf,WACE,SAACkL,EAAA,EAAD,CAAOC,QAAQ,OAAf,UAAuBC,EAAAA,EAAAA,GAAE,WACzB,SAACC,EAAA,EAAD,CAAOjG,GAAG,OAAO6E,KAAK,OAAOkD,aAAc9I,EAAQ4F,KAAM3I,SAAU+K,QAErE,iBAAKrM,UAAU,OAAf,WACE,SAACkL,EAAA,EAAD,CAAOC,QAAQ,cAAf,UAA8BC,EAAAA,EAAAA,GAAE,kBAChC,SAACgC,EAAA,EAAD,CACEhI,GAAG,cACH6E,KAAK,cACLkD,aAAc9I,EAAQ8F,YACtB7I,SAAU+K,QAGd,iBAAKrM,UAAU,OAAf,WACE,SAACkL,EAAA,EAAD,CAAOC,QAAQ,WAAf,UAA2BC,EAAAA,EAAAA,GAAE,eAC7B,UAACiC,EAAA,EAAD,CACEjI,GAAG,WACH6E,KAAK,aACLkD,aAAc9I,EAAQ4G,WACtB3J,SAAU+K,EAJZ,WAME,6BAASjB,EAAAA,EAAAA,GAAE,sBACVmB,EAAQzL,KAAI,SAACwM,EAAQvM,GACpB,OACE,mBAAQU,MAAO6L,EAAf,UACGlC,EAAAA,EAAAA,GAAE0B,EAAQ/L,KADeuM,EAI/B,WAGL,iBAAKtN,UAAU,6BAAf,WACE,SAACuL,EAAA,EAAD,CACErE,KAAK,YACLlH,UAAU,MACVkN,QAAS,SAAC3L,GACRA,EAAEuJ,iBACFa,GACD,EANH,UAQGP,EAAAA,EAAAA,GAAE,aAEL,SAACG,EAAA,EAAD,CAAcrE,KAAK,UAAUlH,UAAU,MAAMwL,MAAOjB,EAApD,UACGa,EAAAA,EAAAA,GAAE,UAEJ/G,EAAQzC,YAAc2F,EAAAA,GAAAA,cAAAA,YACrB,SAACgE,EAAA,EAAD,CACErE,KAAK,SACLqG,KAAM,QACNvN,UAAU,cACVwL,MAAOQ,EACPkB,QAAS,WACPhK,EAAcmB,GACdlE,EAAS,eACV,EACDqN,eAAgB,CACdpM,OAAOgK,EAAAA,EAAAA,GAAE,kBACTqC,MAAMrC,EAAAA,EAAAA,GACJ,6IAEFsC,YAAYtC,EAAAA,EAAAA,GAAE,WAdlB,UAiBGA,EAAAA,EAAAA,GAAE,sBA/GhB,CAuHF,ECVD,EApIwB,SAAC,GAYlB,IAXL/G,EAWI,EAXJA,QACAsJ,EAUI,EAVJA,MACAC,EASI,EATJA,gBACAC,EAQI,EARJA,aACAC,EAOI,EAPJA,aAQMC,EAAQ,uBAAmB1J,EAAUA,EAAQgB,KAAO,MAA5C,KACd,GAAwC2E,EAAAA,EAAAA,WAAS,GAAjD,eAAOgE,EAAP,KAAqBC,EAArB,KAEMC,GAAcC,EAAAA,EAAAA,QAAuB,MAU3C,OARAC,EAAAA,EAAAA,GACEP,GAAgBK,GAChB,WACEJ,GAAgBA,GACjB,IACD,GAGEF,GAEA,iBAAK5N,UAAU,YAAf,WACE,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,cAC5B,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,cAC5B,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,cAC5B,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,cAC5B,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,cAC5B,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,cAC5B,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,cAC5B,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,cAC5B,SAACqO,EAAA,EAAD,CAAkBrO,UAAU,gBAK7B2N,GAKH,gCACGtJ,EACC2J,GACE,SAAC,EAAD,CAEE3J,QAASA,EACTsH,SAAU,kBAAMsC,GAAgB,EAAtB,EACVrC,OAAQ,kBAAMqC,GAAgB,EAAtB,EACRjO,UAAU,iCAJLqE,EAAQzC,YAOf,qBAAS5B,UAAU,qEAAnB,WACE,cAAGA,UAAU,OAAb,SAAqBqE,EAAQ8F,YAAc9F,EAAQ8F,YAAc9F,EAAQ4F,QACzE,cAAGjK,UAAU,oEAAb,SACGqE,EAAQuB,KACP,iCACE,SAAC,KAAD,CAASA,IAAKvB,EAAQuB,IAAK5F,UAAU,kBACrC,SAAC,IAAD,CAAY4F,IAAKvB,EAAQuB,SAG3B,MAIJ,eAAG5F,UAAU,UAAb,WACGoL,EAAAA,EAAAA,GAAE,YADL,IACmB,IAChBkD,SAASjK,EAAQ4G,WAAa,MAAQyB,EAAAA,GAAAA,YACnCtB,EAAAA,EAAAA,GAAE,cACFkD,SAASjK,EAAQ4G,WAAa,MAAQyB,EAAAA,GAAAA,aACtCtB,EAAAA,EAAAA,GAAE,gBACFA,EAAAA,EAAAA,GAAE,qBAER,SAACG,EAAA,EAAD,CACErE,KAAK,YACLlH,UAAU,UACVkN,QAAS,kBAAMe,GAAgB,EAAtB,EAHX,UAKG7C,EAAAA,EAAAA,GAAE,qBAIP,MAEJ,gBAAKpL,UAAU,oBAAf,SACQ,OAAL2N,QAAK,IAALA,GAAAA,EAAOnN,QACN,gCACGmN,EAAM7M,KAAI,SAACyN,GACC,IAAD,EAAV,OAAIA,GAEA,SAACC,EAAA,EAAD,CAEEC,KAAMF,EAAKpJ,QACXuJ,SACE,UAAAH,EAAK3I,IAAIC,6BAAT,eAAgC8I,iBAChC7I,EAAAA,GAAAA,MAAAA,cAEFiI,SAAUA,EACV/N,UAAU,QAPLuO,EAAKpJ,QAAQC,IAWf,IAEV,KACD,gBAAKwJ,IAAKV,EAAalO,UAAU,mBAGnC,gBAAKA,UAAU,OAAf,UACE,iBAAKA,UAAU,gBAAf,WACE,cAAGA,UAAU,UAAb,UACGoL,EAAAA,EAAAA,GAAE,6DAEL,SAAC,KAAD,CAAMpL,UAAU,WAAWkB,GAAE,8BAAkBmD,QAAlB,IAAkBA,OAAlB,EAAkBA,EAASgB,KAA3B,QAA7B,UACE,SAACkG,EAAA,EAAD,CAAcrE,KAAK,UAAUqG,KAAK,OAAOvN,UAAU,OAAnD,UACGoL,EAAAA,EAAAA,GAAE,2BA9EV,uBAuFV,E,wCCxDD,EA/Ec,WAAO,IAAD,IACVyD,GAAeC,EAAAA,EAAAA,MAAfD,WACR,EAAyDE,IAAc3L,MAAzD4L,EAAd,EAAQ3F,KAA2B4F,EAAnC,EAAwB/O,UAClBgP,EAAa,iBAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAUG,MAAK,SAAC9K,GAAD,OAAaA,EAAQgB,OAASwJ,CAA9B,WAAlB,eAA+DG,QAA/D,IAA+DA,OAA/D,EAA+DA,EAAW,GAC7F,EAKII,EAAS,CACXxN,UAAS,OAAEsN,QAAF,IAAEA,OAAF,EAAEA,EAAetN,YALpByN,EADR,EACEhG,KACWiG,EAFb,EAEEpP,UACa2N,EAHf,EAGE0B,YACezB,EAJjB,EAIE0B,cAKF,OACE,gCACE,SAACC,EAAA,EAAD,CACElC,KAAMmC,EAAAA,EACNtO,OAAOgK,EAAAA,EAAAA,GAAE,SACTuE,YAAa,CACX,CAAEC,KAAM,eAAgBxO,MAAO,SAC/B,CAAEA,MAAuB,QAAfyN,IAAA,OAAwBK,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAejF,QAASmB,EAAAA,EAAAA,GAAE,SAE9DyE,SACE,iCACE,SAAC,KAAD,CAAM7P,UAAU,WAAWkB,GAAE,mBAA7B,UACE,SAACqK,EAAA,EAAD,CAAcrE,KAAK,YAAYqG,KAAK,OAAOvN,UAAU,MAArD,UACGoL,EAAAA,EAAAA,GAAE,mBAGS,QAAfyD,IACC,SAAC,KAAD,CAAM7O,UAAU,WAAWkB,GAAE,8BAAkBgO,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAe7J,KAAjC,QAA7B,UACE,SAACkG,EAAA,EAAD,CAAcrE,KAAK,UAAUqG,KAAK,OAAOvN,UAAU,MAAnD,UACGoL,EAAAA,EAAAA,GAAE,sBAQN,OAAR4D,QAAQ,IAARA,OAAA,EAAAA,EAAUxO,QAAS,IAClB,gBAAKR,UAAU,OAAf,UACE,SAAC,IAAD,CACEC,MAAK,mBACA,OAAC+O,QAAD,IAACA,EAAAA,EAAY,IAAIlO,KAAI,SAACuD,GACvB,MAAO,CACLjD,MAAOiD,EAAQ4F,KACf5I,IAAKgD,EAAQzC,UACbhB,KAAK,gBAAD,OAAkByD,EAAQgB,MAEjC,KAPE,CAQH,CACEjE,OAAO,SAAC0O,EAAA,EAAD,CAAM9P,UAAU,YACvB2B,KAAK,MAAD,QAAQyJ,EAAAA,EAAAA,GAAE,sBAAV,OACJ/J,IAAK,MACLrB,UAAW,cACXY,KAAK,sBAGTV,UAAW+O,MAKD,QAAfJ,GACC,SAAC,EAAD,KAEA,SAAC,EAAD,CACExK,QAAS6K,EACTvB,MAAK,OAAE0B,QAAF,IAAEA,GAAF,UAAEA,EAAUU,aAAZ,aAAE,EAAiBC,SAAQ,SAACC,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMzH,OAAhB,IAChCqF,aAAcA,EACdC,aAAcA,EACdF,gBAAiBqB,GAAqBK,MAK/C,C","sources":["components/SubMenu/SubMenu.tsx","hooks/posts/useChannel.ts","provider/blog/BlogPostProvider.ts","hooks/posts/usePosts.ts","hooks/posts/useChannels.ts","components/Channel/ChannelCreator/ChannelCreator.tsx","hooks/posts/useMassPostUpdates.ts","components/Channel/ChannelEditor/ChannelEditor.tsx","components/Channel/ChannelOverview/ChannelOverview.tsx","templates/Posts/Posts/Posts.tsx"],"sourcesContent":["import { FC, ReactNode } from 'react';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\nimport Select from '../Form/Select';\nimport LoadingParagraph from '../ui/Loaders/LoadingParagraph/LoadingParagraph';\n\ninterface SubmenuProps {\n  className?: string;\n  items: { title: ReactNode; text?: string; key: string; path: string; className?: string }[];\n  isLoading?: boolean;\n}\n\nconst Submenu: FC<SubmenuProps> = ({ className, items, isLoading }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const forceMobileView = items?.length >= 6;\n\n  if (isLoading === true) {\n    return <LoadingParagraph className=\"h-10\" />;\n  }\n\n  // True when no items match the current location; Forces a fallback to an active state on the first item\n  const activeFallback = !items.some((item) => item.path === location.pathname);\n\n  return (\n    <>\n      <div\n        className={`hidden flex-col flex-wrap ${!forceMobileView ? 'sm:flex' : ''} sm:flex-row ${\n          className ?? ''\n        }`}\n      >\n        {items.map((item, index) => {\n          return (\n            // Only NavLink Supports isActive styling https://reactrouter.com/docs/en/v6/components/nav-link\n            <NavLink\n              className={({ isActive }) =>\n                `${\n                  item.className && item.className?.indexOf('flex-grow') !== -1 ? '' : 'flex-grow'\n                } cursor-pointer border-b-2 py-2 px-1 text-lg ${\n                  isActive || (activeFallback && index === 0)\n                    ? 'border-indigo-500 text-indigo-500 dark:text-indigo-400'\n                    : 'border-gray-300 transition-colors duration-300 hover:border-indigo-400 dark:border-gray-800 hover:dark:border-indigo-600'\n                } ${item.className ?? ''}`\n              }\n              to={item.path}\n              key={item.key}\n              end\n            >\n              {item.title}\n            </NavLink>\n          );\n        })}\n      </div>\n      <Select\n        className={`${!forceMobileView ? 'sm:hidden' : ''} py-4`}\n        onChange={(e) => navigate(e.target.value)}\n        value={window.location.pathname}\n      >\n        {items.map((item) => {\n          return (\n            <option key={item.key} value={item.path}>\n              {item.text || item.title}\n            </option>\n          );\n        })}\n      </Select>\n    </>\n  );\n};\n\nexport default Submenu;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, ChannelDefinition, Client } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\nimport useStaticFiles from '../staticFiles/useStaticFiles';\n\nconst useChannel = ({\n  channelId,\n  channelSlug,\n}: { channelId?: string; channelSlug?: string } = {}) => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const queryClient = useQueryClient();\n  const { mutate: publishStaticFiles } = useStaticFiles().publish;\n\n  const fetchData = async (channelId?: string, channelSlug?: string) => {\n    if (channelId) {\n      return await client.blogDefinitionProvider.getChannelDefinition(channelId);\n    }\n    if (channelSlug) {\n      return await client.blogDefinitionProvider.getChannelDefinitionBySlug(channelSlug);\n    }\n  };\n\n  const saveData = async (channelDef: ChannelDefinition) => {\n    await client.blogDefinitionProvider.saveChannelDefinition(channelDef);\n  };\n\n  const removeChannel = async (channelDef: ChannelDefinition) => {\n    await client.blogDefinitionProvider.removeChannelDefinition(channelDef.channelId);\n  };\n\n  return {\n    fetch: useQuery(\n      ['channel', channelId ?? channelSlug],\n      () => fetchData(channelId, channelSlug),\n      {\n        refetchOnWindowFocus: false,\n      }\n    ),\n    save: useMutation(saveData, {\n      onSuccess: (_data, variables) => {\n        // Boom baby!\n        if (variables.channelId) {\n          queryClient.removeQueries(['channel', variables.channelId]);\n        } else {\n          queryClient.removeQueries(['channel']);\n        }\n        queryClient.removeQueries(['channels']);\n\n        publishStaticFiles();\n      },\n    }),\n    remove: useMutation(removeChannel, {\n      onMutate: async (toRemoveChannel) => {\n        await queryClient.cancelQueries(['channels']);\n\n        const previousChannels: ChannelDefinition[] = queryClient.getQueryData(['channels']);\n        const newChannels = previousChannels?.filter(\n          (channel) => channel.channelId !== toRemoveChannel.channelId\n        );\n\n        queryClient.setQueryData(['channels'], newChannels);\n\n        return { previousChannels, toRemoveChannel };\n      },\n      onError: (err, newData, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['channels'], context.previousChannels);\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['channels']);\n      },\n    }),\n  };\n};\n\nexport default useChannel;\n","import {\n  ProviderOptions,\n  BlogDefinitionProvider,\n  BlogPostReadonlyProvider,\n  DriveProvider,\n  PostContent,\n  PostFile,\n  DataUtil,\n  SecurityGroupType,\n  UploadInstructionSet,\n  UploadFileMetadata,\n  postTypeToTag,\n  BlogConfig,\n  UploadResult,\n  ApiType,\n  DraftTag,\n  AccessControlList,\n} from '@youfoundation/dotyoucore-js';\n\ninterface BlostPostProviderOptions extends ProviderOptions {\n  driveProvider: DriveProvider;\n  blogDefinitionProvider: BlogDefinitionProvider;\n}\n\nexport default class BlogPostProvider extends BlogPostReadonlyProvider {\n  private static instance: BlogPostProvider;\n\n  constructor(options: BlostPostProviderOptions) {\n    super({\n      api: options.api,\n      sharedSecret: options.sharedSecret,\n      driveProvider: options.driveProvider,\n      blogDefinitionProvider: options.blogDefinitionProvider,\n    });\n  }\n\n  async savePost<T extends PostContent>(file: PostFile<T>, channelId: string): Promise<string> {\n    if (!file.content.id) {\n      file.content.id = file.content.slug\n        ? DataUtil.toGuidId(file.content.slug)\n        : DataUtil.getNewId();\n    } else if (!file.fileId) {\n      // Check if content.id exists and with which fileId\n      file.fileId = (await this.getPost(channelId, file.content.id))?.fileId ?? undefined;\n    }\n\n    const encrypt = !(\n      file.acl?.requiredSecurityGroup === SecurityGroupType.Anonymous ||\n      file.acl?.requiredSecurityGroup === SecurityGroupType.Authenticated\n    );\n\n    const instructionSet: UploadInstructionSet = {\n      transferIv: this._driveProvider.Random16(),\n      storageOptions: {\n        overwriteFileId: file?.fileId ?? '',\n        drive: this._blogDefinitionProvider.getTargetDrive(channelId),\n      },\n      transitOptions: null,\n    };\n\n    const payloadJson: string = DataUtil.JsonStringify64(file.content);\n    const payloadBytes = DataUtil.stringToUint8Array(payloadJson);\n\n    const uniqueId = file.content.slug ? DataUtil.toGuidId(file.content.slug) : file.content.id;\n\n    // Set max of 3kb for jsonContent so enough room is left for metedata\n    const shouldEmbedContent = payloadBytes.length < 3000;\n    const metadata: UploadFileMetadata = {\n      contentType: 'application/json',\n      appData: {\n        tags: [\n          postTypeToTag('type' in file.content ? file.content.type : 'Article').toString(),\n          file.content.id,\n          ...(uniqueId && uniqueId !== file.content.id ? [uniqueId] : []),\n          ...(file.acl?.requiredSecurityGroup === SecurityGroupType.Owner ? [DraftTag] : []),\n        ],\n        uniqueId: uniqueId,\n        contentIsComplete: shouldEmbedContent,\n        fileType: BlogConfig.PostFileType,\n        jsonContent: shouldEmbedContent ? payloadJson : null,\n        previewThumbnail: file.previewThumbnail,\n      },\n      payloadIsEncrypted: encrypt,\n      accessControlList: file.acl,\n    };\n\n    const result: UploadResult = await this._driveProvider.Upload(\n      instructionSet,\n      metadata,\n      payloadBytes,\n      undefined,\n      encrypt\n    );\n\n    return result.file.fileId;\n  }\n\n  async removePost(fileId: string, channelId: string) {\n    const targetDrive = this._blogDefinitionProvider.getTargetDrive(channelId);\n    this._driveProvider.DeleteFile(targetDrive, fileId);\n  }\n\n  async updateAllPostAcls(channelId: string, newAcl: AccessControlList) {\n    const runningCursorState: string = undefined;\n    const pageSize = 50;\n\n    const doBatch = async (runningCursorState: string) => {\n      const response = await this.getPosts(channelId, [], runningCursorState, pageSize);\n      runningCursorState = response.cursorState;\n\n      // Process posts\n      await Promise.all(\n        response.results.map(async (postFile) => {\n          const newPostFile = { ...postFile };\n          newPostFile.acl = newAcl;\n          await this.savePost(newPostFile, channelId);\n        })\n      );\n\n      console.log(`Updated ${response.results.length} posts with new acl`);\n      // Check if finished\n      return response.results.length < pageSize;\n    };\n\n    for (let i = 0; i < 100; i++) {\n      const isFinished = await doBatch(runningCursorState);\n      if (isFinished) {\n        return true;\n      }\n    }\n  }\n\n  public static getInstance(sharedSecret?: Uint8Array): BlogPostProvider {\n    if (!sharedSecret) {\n      throw new Error('Shared Secret not set for OwnerProvider');\n    }\n\n    if (!BlogPostProvider.instance) {\n      const driveProvider = new DriveProvider({ api: ApiType.Owner, sharedSecret: sharedSecret });\n      const blogDefinitionProvider = new BlogDefinitionProvider({\n        api: ApiType.Owner,\n        sharedSecret: sharedSecret,\n        driveProvider: driveProvider,\n      });\n\n      BlogPostProvider.instance = new BlogPostProvider({\n        api: ApiType.Owner,\n        sharedSecret: sharedSecret,\n        driveProvider: driveProvider,\n\n        blogDefinitionProvider: blogDefinitionProvider,\n      });\n    }\n\n    return BlogPostProvider.instance;\n  }\n}\n","import { useInfiniteQuery } from '@tanstack/react-query';\nimport { PostContent, PostFile } from '@youfoundation/dotyoucore-js';\nimport BlogPostProvider from '../../provider/blog/BlogPostProvider';\nimport useAuth from '../auth/useAuth';\n\ninterface usePostsProps {\n  channelId?: string;\n}\n\ninterface fetchBlogDataProps extends usePostsProps {\n  cursorState?: string;\n}\n\nconst usePosts = ({ channelId }: usePostsProps) => {\n  const pageSize = 20;\n  const { getSharedSecret } = useAuth();\n\n  const fetchBlogData = async (\n    { channelId, cursorState }: fetchBlogDataProps = { cursorState: undefined }\n  ) => {\n    if (!channelId) {\n      return;\n    }\n    const blogPostProvider = BlogPostProvider.getInstance(getSharedSecret());\n\n    const data = await blogPostProvider.getPosts(channelId, undefined, cursorState, pageSize);\n    const foundBlogPosts: PostFile<PostContent>[] = data.results;\n\n    return {\n      results: foundBlogPosts,\n      cursorState: data.cursorState,\n    };\n  };\n\n  return useInfiniteQuery(\n    ['blogs', channelId],\n    ({ pageParam }) => fetchBlogData({ channelId, cursorState: pageParam }),\n    {\n      getNextPageParam: (lastPage) =>\n        (lastPage?.results?.length === pageSize && lastPage?.cursorState) ?? undefined,\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n    }\n  );\n};\n\nexport default usePosts;\n","import { useQuery } from '@tanstack/react-query';\nimport { ApiType, Client } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\nconst useChannels = () => {\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n  const fetchData = async () => {\n    const foundChannels = await client.blogDefinitionProvider.getChannelDefinitions();\n\n    return foundChannels;\n  };\n\n  return {\n    fetch: useQuery(['channels'], () => fetchData(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useChannels;\n","import { ChannelDefinition, SecurityGroupType } from '@youfoundation/dotyoucore-js';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { convertTextToSlug } from '../../../helpers/common';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useChannel from '../../../hooks/posts/useChannel';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Label from '../../Form/Label';\nimport Section from '../../ui/Sections/Section';\n\nconst ChannelCreator = () => {\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const { mutate: saveChannel, status: saveStatus, error: saveError } = useChannel().save;\n  const navigate = useNavigate();\n\n  const createChannel: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    const newChannelDef: ChannelDefinition = {\n      channelId: '',\n      name: name,\n      slug: convertTextToSlug(name),\n      description: description,\n      templateId: undefined,\n      acl: { requiredSecurityGroup: SecurityGroupType.Owner },\n    };\n\n    saveChannel(newChannelDef, {\n      onSuccess: () => {\n        navigate(`/owner/posts/${convertTextToSlug(newChannelDef.name)}`);\n      },\n    });\n\n    return false;\n  };\n\n  return (\n    <>\n      <ErrorNotification error={saveError} />\n\n      <Section title=\"New: channel\" isOpaqueBg={true}>\n        <form onSubmit={createChannel}>\n          <div className=\"mb-5\">\n            <Label htmlFor=\"channelName\">{t('Name')}</Label>\n            <Input\n              id=\"name\"\n              name=\"channelName\"\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <Label htmlFor=\"name\">{t('Description')}</Label>\n            <Input\n              id=\"name\"\n              name=\"channelDescription\"\n              onChange={(e) => {\n                setDescription(e.target.value);\n              }}\n            />\n          </div>\n          <div className=\"flex flex-row\">\n            <ActionButton className=\"ml-auto\" state={saveStatus}>\n              {t('Add channel')}\n            </ActionButton>\n          </div>\n        </form>\n      </Section>\n    </>\n  );\n};\n\nexport default ChannelCreator;\n","import { useMutation } from '@tanstack/react-query';\nimport { AccessControlList } from '@youfoundation/dotyoucore-js';\nimport BlogPostProvider from '../../provider/blog/BlogPostProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useMassPostUpdates = () => {\n  const { getSharedSecret } = useAuth();\n\n  const updateAcls = async ({\n    channelId,\n    newAcl,\n  }: {\n    channelId: string;\n    newAcl: AccessControlList;\n  }) => {\n    const blogPostProvider = BlogPostProvider.getInstance(getSharedSecret());\n    return await blogPostProvider.updateAllPostAcls(channelId, newAcl);\n  };\n\n  return {\n    updateAcls: useMutation(updateAcls),\n  };\n};\n\nexport default useMassPostUpdates;\n","import { BlogConfig, ChannelDefinition, ChannelTemplate } from '@youfoundation/dotyoucore-js';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { convertTextToSlug } from '../../../helpers/common';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useChannel from '../../../hooks/posts/useChannel';\nimport AclEditor, { AclSummary } from '../../Acl/AclEditor/AclEditor';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Label from '../../Form/Label';\nimport Select from '../../Form/Select';\nimport Textarea from '../../Form/Textarea';\nimport Section from '../../ui/Sections/Section';\nimport useMassPostUpdates from '../../../hooks/posts/useMassPostUpdates';\n\nconst ChannelEditor = ({\n  channel,\n  onCancel,\n  onSave,\n  className,\n}: {\n  channel: ChannelDefinition;\n  onCancel: () => void;\n  onSave: () => void;\n  className?: string;\n}) => {\n  const [channelData, setChannelData] = useState({ ...channel });\n  const {\n    save: { mutateAsync: saveChannel, status: saveStatus, error: saveError },\n    remove: { mutateAsync: removeChannel, status: removeChannelStatus, error: removeError },\n  } = useChannel();\n  const {\n    updateAcls: { mutate: updateAcls },\n  } = useMassPostUpdates();\n  const navigate = useNavigate();\n  const [isAclEdit, setIsAclEdit] = useState(false);\n\n  if (!channel) {\n    return;\n  }\n\n  const handleChange = (e: { target: { value: unknown; name: string } }) => {\n    const newChannelData = { ...channelData };\n    newChannelData[e.target.name] = e.target.value;\n\n    setChannelData(newChannelData);\n  };\n\n  const tmpKeys = Object.keys(ChannelTemplate).filter((f) => !isNaN(Number(f)));\n  const tmpVals = Object.keys(ChannelTemplate).filter((f) => isNaN(Number(f)));\n\n  return (\n    <>\n      <ErrorNotification error={saveError} />\n      <ErrorNotification error={removeError} />\n\n      <Section\n        title={\n          <span className=\"flex flex-row\">\n            <AclEditor\n              key={channelData.channelId}\n              acl={channelData.acl}\n              isEdit={isAclEdit}\n              onChange={(acl) => {\n                // TODO: Update ACL of all blogs\n                updateAcls({ channelId: channelData.channelId, newAcl: acl });\n                handleChange({ target: { name: 'acl', value: acl } });\n              }}\n              onClose={() => setIsAclEdit(false)}\n            />{' '}\n            <span onClick={() => setIsAclEdit(true)}>\n              {`${t('Edit')}: ${channel.name}`}\n              <small className=\"block text-xs\">{<AclSummary acl={channelData.acl} />}</small>\n            </span>\n          </span>\n        }\n        isOpaqueBg={true}\n        className={className ?? ''}\n      >\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            await saveChannel(channelData);\n            navigate(`/owner/posts/${convertTextToSlug(channelData.name)}`);\n            onSave();\n          }}\n        >\n          <div className=\"mb-5\">\n            <Label htmlFor=\"name\">{t('Name')}</Label>\n            <Input id=\"name\" name=\"name\" defaultValue={channel.name} onChange={handleChange} />\n          </div>\n          <div className=\"mb-5\">\n            <Label htmlFor=\"description\">{t('Description')}</Label>\n            <Textarea\n              id=\"description\"\n              name=\"description\"\n              defaultValue={channel.description}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"mb-5\">\n            <Label htmlFor=\"template\">{t('Template')}</Label>\n            <Select\n              id=\"template\"\n              name=\"templateId\"\n              defaultValue={channel.templateId}\n              onChange={handleChange}\n            >\n              <option>{t('Make a selection')}</option>\n              {tmpKeys.map((tmpKey, index) => {\n                return (\n                  <option value={tmpKey} key={tmpKey}>\n                    {t(tmpVals[index])}\n                  </option>\n                );\n              })}\n            </Select>\n          </div>\n          <div className=\"-m-2 flex flex-row-reverse\">\n            <ActionButton\n              type=\"secondary\"\n              className=\"m-2\"\n              onClick={(e) => {\n                e.preventDefault();\n                onCancel();\n              }}\n            >\n              {t('Cancel')}\n            </ActionButton>\n            <ActionButton type=\"primary\" className=\"m-2\" state={saveStatus}>\n              {t('Save')}\n            </ActionButton>\n            {channel.channelId !== BlogConfig.PublicChannel.channelId && (\n              <ActionButton\n                type=\"remove\"\n                icon={'trash'}\n                className=\"m-2 mr-auto\"\n                state={removeChannelStatus}\n                onClick={() => {\n                  removeChannel(channel);\n                  navigate('/owner/posts');\n                }}\n                confirmOptions={{\n                  title: t('Remove channel'),\n                  body: t(\n                    'Are you sure you want to remove this channel, this action cannot be undone. All blogs published on this channel will also be unpublished.'\n                  ),\n                  buttonText: t('Remove'),\n                }}\n              >\n                {t('Remove')}\n              </ActionButton>\n            )}\n          </div>\n        </form>\n      </Section>\n    </>\n  );\n};\n\nexport default ChannelEditor;\n","import {\n  PostFile,\n  ChannelTemplate,\n  PostContent,\n  ChannelDefinition,\n  SecurityGroupType,\n} from '@youfoundation/dotyoucore-js';\nimport { useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport { useIntersection } from '../../../hooks/intersection/useIntersection';\nimport { AclIcon, AclSummary } from '../../Acl/AclEditor/AclEditor';\nimport PostTeaserCard from '../../Blog/PostTeaserCard/PostTeaserCard';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport LoadingParagraph from '../../ui/Loaders/LoadingParagraph/LoadingParagraph';\nimport ChannelEditor from '../ChannelEditor/ChannelEditor';\n\nconst ChannelOverview = ({\n  channel,\n  blogs,\n  isParentLoading,\n  hasMoreBlogs,\n  getMoreBlogs,\n}: {\n  channel: ChannelDefinition | undefined;\n  blogs: PostFile<PostContent>[];\n  isParentLoading;\n  hasMoreBlogs?: boolean;\n  getMoreBlogs?: () => void;\n}) => {\n  const linkRoot = `/owner/posts/${channel ? channel.slug : 'all'}/`;\n  const [isEditActive, setIsEditActive] = useState(false);\n\n  const loadMoreRef = useRef<HTMLDivElement>(null);\n\n  useIntersection(\n    hasMoreBlogs && loadMoreRef,\n    () => {\n      getMoreBlogs && getMoreBlogs();\n    },\n    true\n  );\n\n  if (isParentLoading) {\n    return (\n      <div className=\"-m-5 pt-5\">\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n        <LoadingParagraph className=\"m-5 h-20\" />\n      </div>\n    );\n  }\n\n  if (!blogs) {\n    return <></>;\n  }\n\n  return (\n    <>\n      {channel ? (\n        isEditActive ? (\n          <ChannelEditor\n            key={channel.channelId}\n            channel={channel}\n            onCancel={() => setIsEditActive(false)}\n            onSave={() => setIsEditActive(false)}\n            className=\"bg-slate-50 dark:bg-slate-800\"\n          />\n        ) : (\n          <section className=\"items-center bg-slate-50 p-3 dark:bg-slate-800 sm:flex sm:flex-row\">\n            <p className=\"mr-2\">{channel.description ? channel.description : channel.name}</p>\n            <p className=\"flex flex-row items-center border-l border-slate-300 pl-2 sm:mr-2\">\n              {channel.acl ? (\n                <>\n                  <AclIcon acl={channel.acl} className=\"mr-1 h-4 w-4\" />\n                  <AclSummary acl={channel.acl} />\n                </>\n              ) : (\n                ''\n              )}\n            </p>\n\n            <p className=\"ml-auto\">\n              {t('Template')}:{' '}\n              {parseInt(channel.templateId + '') === ChannelTemplate.LargeCards\n                ? t('LargeCards')\n                : parseInt(channel.templateId + '') === ChannelTemplate.ClassicBlog\n                ? t('ClassicBlog')\n                : t('MasonryLayout')}\n            </p>\n            <ActionButton\n              type=\"secondary\"\n              className=\"sm:ml-2\"\n              onClick={() => setIsEditActive(true)}\n            >\n              {t('Edit Channel')}\n            </ActionButton>\n          </section>\n        )\n      ) : null}\n\n      <div className=\"mx-auto max-w-4xl\">\n        {blogs?.length ? (\n          <>\n            {blogs.map((blog) => {\n              if (blog) {\n                return (\n                  <PostTeaserCard\n                    key={blog.content.id}\n                    post={blog.content}\n                    isDraft={\n                      blog.acl.requiredSecurityGroup?.toLowerCase() ===\n                      SecurityGroupType.Owner.toLowerCase()\n                    }\n                    linkRoot={linkRoot}\n                    className=\"my-2\"\n                  />\n                );\n              } else {\n                return null;\n              }\n            })}\n            <div ref={loadMoreRef} className=\"h-1 w-full\"></div>\n          </>\n        ) : (\n          <div className=\"mt-4\">\n            <div className=\"flex flex-row\">\n              <p className=\"my-auto\">\n                {t('This seems to be an empty channel, time to add a post?')}\n              </p>\n              <Link className=\"contents\" to={`/owner/posts/${channel?.slug}/new`}>\n                <ActionButton type=\"primary\" icon=\"plus\" className=\"ml-2\">\n                  {t('Add Post')}\n                </ActionButton>\n              </Link>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ChannelOverview;\n","import { Link, useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport usePosts from '../../../hooks/posts/usePosts';\nimport useChannels from '../../../hooks/posts/useChannels';\nimport ActionButton from '../../../components/ui/Buttons/ActionButton';\nimport ChannelCreator from '../../../components/Channel/ChannelCreator/ChannelCreator';\nimport ChannelOverview from '../../../components/Channel/ChannelOverview/ChannelOverview';\nimport Plus from '../../../components/ui/Icons/Plus/Plus';\nimport Quote from '../../../components/ui/Icons/Quote/Quote';\nimport PageMeta from '../../../components/ui/Layout/PageMeta/PageMeta';\nimport Submenu from '../../../components/SubMenu/SubMenu';\n\nconst Posts = () => {\n  const { channelKey } = useParams();\n  const { data: channels, isLoading: isChannelsLoading } = useChannels().fetch;\n  const activeChannel = channels?.find((channel) => channel.slug === channelKey) ?? channels?.[0];\n  const {\n    data: blogData,\n    isLoading: isBlogsLoading,\n    hasNextPage: hasMoreBlogs,\n    fetchNextPage: getMoreBlogs,\n  } = usePosts({\n    channelId: activeChannel?.channelId,\n  });\n\n  return (\n    <section>\n      <PageMeta\n        icon={Quote}\n        title={t('Posts')}\n        breadCrumbs={[\n          { href: '/owner/posts', title: 'Posts' },\n          { title: (channelKey !== 'new' && activeChannel?.name) || t('New') },\n        ]}\n        actions={\n          <>\n            <Link className=\"contents\" to={`/owner/posts/new`}>\n              <ActionButton type=\"secondary\" icon=\"plus\" className=\"m-2\">\n                {t('Add Channel')}\n              </ActionButton>\n            </Link>\n            {channelKey !== 'new' && (\n              <Link className=\"contents\" to={`/owner/posts/${activeChannel?.slug}/new`}>\n                <ActionButton type=\"primary\" icon=\"plus\" className=\"m-2\">\n                  {t('Add Post')}\n                </ActionButton>\n              </Link>\n            )}\n          </>\n        }\n      />\n\n      {channels?.length > 1 && (\n        <div className=\"pb-5\">\n          <Submenu\n            items={[\n              ...(channels ?? []).map((channel) => {\n                return {\n                  title: channel.name,\n                  key: channel.channelId,\n                  path: `/owner/posts/${channel.slug}`,\n                };\n              }),\n              {\n                title: <Plus className=\"h-5 w-5\" />,\n                text: `-- ${t('Create new channel')} --`,\n                key: 'new',\n                className: 'flex-grow-0',\n                path: `/owner/posts/new`,\n              },\n            ]}\n            isLoading={isChannelsLoading}\n          />\n        </div>\n      )}\n\n      {channelKey === 'new' ? (\n        <ChannelCreator />\n      ) : (\n        <ChannelOverview\n          channel={activeChannel}\n          blogs={blogData?.pages?.flatMap((page) => page?.results)}\n          hasMoreBlogs={hasMoreBlogs}\n          getMoreBlogs={getMoreBlogs}\n          isParentLoading={isChannelsLoading || isBlogsLoading}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Posts;\n"],"names":["className","items","isLoading","navigate","useNavigate","location","useLocation","forceMobileView","length","activeFallback","some","item","path","pathname","map","index","isActive","indexOf","to","end","title","key","onChange","e","target","value","window","text","channelId","channelSlug","useAuth","getSharedSecret","client","Client","api","ApiType","sharedSecret","queryClient","useQueryClient","publishStaticFiles","useStaticFiles","publish","mutate","fetchData","blogDefinitionProvider","getChannelDefinition","getChannelDefinitionBySlug","saveData","channelDef","saveChannelDefinition","removeChannel","removeChannelDefinition","fetch","useQuery","refetchOnWindowFocus","save","useMutation","onSuccess","_data","variables","removeQueries","remove","onMutate","toRemoveChannel","cancelQueries","previousChannels","getQueryData","newChannels","filter","channel","setQueryData","onError","err","newData","context","console","error","onSettled","invalidateQueries","BlogPostProvider","options","driveProvider","file","content","id","slug","DataUtil","fileId","this","getPost","undefined","encrypt","acl","requiredSecurityGroup","SecurityGroupType","instructionSet","transferIv","_driveProvider","Random16","storageOptions","overwriteFileId","drive","_blogDefinitionProvider","getTargetDrive","transitOptions","payloadJson","payloadBytes","uniqueId","shouldEmbedContent","metadata","contentType","appData","tags","postTypeToTag","type","toString","DraftTag","contentIsComplete","fileType","BlogConfig","jsonContent","previewThumbnail","payloadIsEncrypted","accessControlList","Upload","result","targetDrive","DeleteFile","newAcl","runningCursorState","doBatch","getPosts","response","cursorState","Promise","all","results","postFile","newPostFile","savePost","log","i","Error","instance","DriveProvider","BlogDefinitionProvider","BlogPostReadonlyProvider","fetchBlogData","blogPostProvider","data","foundBlogPosts","useInfiniteQuery","pageParam","getNextPageParam","lastPage","refetchOnMount","staleTime","Infinity","getChannelDefinitions","foundChannels","useState","name","setName","description","setDescription","useChannel","saveChannel","saveStatus","status","saveError","ErrorNotification","Section","isOpaqueBg","onSubmit","preventDefault","newChannelDef","convertTextToSlug","templateId","Label","htmlFor","t","Input","required","ActionButton","state","updateAcls","updateAllPostAcls","onCancel","onSave","channelData","setChannelData","mutateAsync","removeChannelStatus","removeError","useMassPostUpdates","isAclEdit","setIsAclEdit","handleChange","newChannelData","tmpKeys","Object","keys","ChannelTemplate","f","isNaN","Number","tmpVals","AclEditor","isEdit","onClose","onClick","defaultValue","Textarea","Select","tmpKey","icon","confirmOptions","body","buttonText","blogs","isParentLoading","hasMoreBlogs","getMoreBlogs","linkRoot","isEditActive","setIsEditActive","loadMoreRef","useRef","useIntersection","LoadingParagraph","parseInt","blog","PostTeaserCard","post","isDraft","toLowerCase","ref","channelKey","useParams","useChannels","channels","isChannelsLoading","activeChannel","find","usePosts","blogData","isBlogsLoading","hasNextPage","fetchNextPage","PageMeta","Quote","breadCrumbs","href","actions","Plus","pages","flatMap","page"],"sourceRoot":""}