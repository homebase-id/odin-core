{"version":3,"file":"static/js/500.6e15cc7d.chunk.js","mappings":"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","sources":["components/ui/Buttons/SaveStatus.tsx","components/ui/Layout/PageMeta/PageMeta.tsx","components/ui/Sections/Section.tsx","provider/system/SettingsProvider.ts","hooks/settings/useSettings.ts","components/Form/Checkbox.tsx","templates/Settings/Settings.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Alert from '../Alerts/Alert/Alert';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n  error,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n  error?: unknown;\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (state === 'loading') {\n    return <p className={`${className} text-sm`}>Saving...</p>;\n  }\n\n  if (state === 'error') {\n    return (\n      <Alert type=\"critical\" className={className}>\n        {error instanceof Error ? error.message : t('Something went wrong')}\n      </Alert>\n    );\n  }\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { FC, ReactNode } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n  breadCrumbs,\n  icon,\n}: {\n  title?: ReactNode | string;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n  breadCrumbs?: { title: string; href?: string }[];\n  icon?: FC;\n}) => {\n  return (\n    <section\n      className=\"-mx-5 -mt-4 mb-10 border-b-2 border-gray-100 bg-slate-50 py-4 pr-5 pl-10 dark:border-gray-700 dark:bg-slate-800 sm:-mx-10\n    sm:-mt-8 sm:py-8 sm:px-10\"\n    >\n      <div className=\"flex flex-col sm:flex-row\">\n        <div className=\"flex-col\">\n          {breadCrumbs && (\n            <ul className=\"mb-2 hidden flex-row sm:flex\">\n              {breadCrumbs.map((crumb, index) => {\n                return (\n                  <li key={index} className=\"mr-2\">\n                    {crumb.href ? (\n                      <Link to={crumb.href} className=\"\">\n                        {crumb.title}\n                        <span className=\"ml-2\">{'>'}</span>\n                      </Link>\n                    ) : (\n                      <span className=\"text-slate-500\">{crumb.title}</span>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {title && (\n            <>\n              <h1 className=\"mb-5 flex flex-row text-4xl dark:text-white\">\n                {icon && icon({ className: 'h-8 w-8 my-auto mr-4' })} {title}\n              </h1>\n              <Helmet>\n                <title>\n                  {(typeof title !== 'object' && `${title}`) ||\n                    window.location.pathname.split('/').pop()}{' '}\n                  | Owner console\n                </title>\n              </Helmet>\n            </>\n          )}\n        </div>\n        <div className=\"ml-auto\">\n          <div className=\"-m-2 flex flex-col flex-wrap justify-end sm:flex-row sm:items-center\">\n            {actions}\n          </div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","import React from 'react';\nimport { ReactNode, Ref } from 'react';\n\nconst Section = React.forwardRef(\n  (\n    {\n      title,\n      actions,\n      className,\n      children,\n      isOpaqueBg = false,\n      isBorderLess = false,\n    }: {\n      title?: ReactNode;\n      actions?: ReactNode;\n      className?: string;\n      children: ReactNode;\n      isOpaqueBg?: boolean;\n      isBorderLess?: boolean;\n    },\n    ref: Ref<HTMLElement>\n  ) => {\n    return (\n      <section\n        ref={ref}\n        className={`my-5 rounded-md ${\n          isOpaqueBg\n            ? isBorderLess\n              ? ''\n              : 'rounded-lg border-[1px] border-gray-200 border-opacity-80 px-5 dark:border-gray-700'\n            : 'bg-slate-50 px-5 dark:bg-slate-800'\n        } dark:text-slate-300 ${className ?? ''}`}\n      >\n        {title || actions ? (\n          <div\n            className={`relative flex flex-row items-center border-b-[1px] border-gray-200 border-opacity-80 py-5 transition-all duration-300 dark:border-gray-700`}\n          >\n            <h3 className=\"text-2xl dark:text-white\">{title}</h3>\n            <div className=\"ml-auto\">\n              <div className=\"-m-2 flex flex-col flex-wrap justify-end sm:flex-row sm:items-center\">\n                {actions}\n              </div>\n            </div>\n          </div>\n        ) : null}\n        <div className=\"py-5 \">{children}</div>\n      </section>\n    );\n  }\n);\n\nexport default Section;\n","import { TargetDrive } from '@youfoundation/dotyoucore-js';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\nexport interface uiSettings {\n  automaticallyLoadProfilePicture?: boolean;\n}\n\n//Handles management of Contacts\nexport class SettingsProvider extends OwnerProviderBase {\n  private static instance: SettingsProvider;\n  static DriveInfo: Promise<Record<string, TargetDrive>>;\n  private root = '/config';\n\n  constructor(sharedSecret: Uint8Array | undefined) {\n    if (!sharedSecret) {\n      throw '[SettingsProvider] Shared Secret is required';\n    }\n    super(sharedSecret);\n  }\n\n  public async getFlags() {\n    const client = super.createAxiosClient();\n    const url = this.root + '/system/flags';\n\n    return await client.post<Record<string, boolean>>(url).then((response) => {\n      return response.data;\n    });\n  }\n\n  public async updateFlag(name: string, value: boolean) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/system/updateflag';\n\n    return await client\n      .post(url, { flagName: name, value: value ? 'true' : 'false' })\n      .then((response) => {\n        return response.data;\n      });\n  }\n\n  public async getSettings() {\n    const client = super.createAxiosClient();\n    const url = this.root + '/ownerapp/settings/list';\n\n    return await client.post<{ settings: uiSettings }>(url).then((response) => {\n      const settingsObj = response.data?.settings;\n      const returnObj: uiSettings = {};\n\n      Object.keys(settingsObj).forEach((key) => {\n        returnObj[key] = JSON.parse(settingsObj[key]);\n      });\n\n      return returnObj;\n    });\n  }\n\n  public async updateSettings(settings: uiSettings) {\n    const client = super.createAxiosClient();\n    const url = this.root + '/ownerapp/settings/update';\n\n    const requestObj: uiSettings = {};\n\n    Object.keys(settings).forEach((key) => {\n      requestObj[key] = JSON.stringify(settings[key]);\n    });\n\n    return await client.post(url, { settings: requestObj }).then((response) => {\n      return response.data;\n    });\n  }\n\n  public static getInstance(sharedSecret): SettingsProvider {\n    if (!SettingsProvider.instance) {\n      SettingsProvider.instance = new SettingsProvider(sharedSecret);\n    }\n\n    return SettingsProvider.instance;\n  }\n}\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { SettingsProvider, uiSettings } from '../../provider/system/SettingsProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useSettings = () => {\n  const { getSharedSecret } = useAuth();\n  const settingsProvider = SettingsProvider.getInstance(getSharedSecret());\n  const queryClient = useQueryClient();\n\n  const fetchFlags = async () => {\n    return settingsProvider.getFlags();\n  };\n\n  const updateFlag = async ({ name, value }: { name: string; value: boolean }) => {\n    return settingsProvider.updateFlag(name, value);\n  };\n\n  const fetchUiSettings = async () => {\n    return settingsProvider.getSettings();\n  };\n\n  const updateUiSetting = async (settings: uiSettings) => {\n    return settingsProvider.updateSettings(settings);\n  };\n\n  return {\n    fetchFlags: useQuery(['systemFlags'], () => fetchFlags(), {\n      refetchOnWindowFocus: false,\n    }),\n    updateFlag: useMutation(updateFlag, {\n      onSuccess: () => {\n        queryClient.invalidateQueries(['systemFlags']);\n      },\n    }),\n    fetchUiSettings: useQuery(['uiSettings'], () => fetchUiSettings(), {\n      refetchOnWindowFocus: false,\n    }),\n    updateUiSetting: useMutation(updateUiSetting, {\n      onSuccess: () => {\n        queryClient.invalidateQueries(['uiSettings']);\n      },\n    }),\n  };\n};\n\nexport default useSettings;\n","const Checkbox = (\n  props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n) => {\n  return (\n    <input\n      {...props}\n      type=\"checkbox\"\n      className={`h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-blue-600 ${props.className}`}\n    />\n  );\n};\n\nexport default Checkbox;\n","import { t } from '../../helpers/i18n/dictionary';\nimport useSettings from '../../hooks/settings/useSettings';\nimport ErrorNotification from '../../components/ui/Alerts/ErrorNotification/ErrorNotification';\nimport Checkbox from '../../components/Form/Checkbox';\nimport Label from '../../components/Form/Label';\nimport Cog from '../../components/ui/Icons/Cog/Cog';\nimport PageMeta from '../../components/ui/Layout/PageMeta/PageMeta';\nimport Section from '../../components/ui/Sections/Section';\n\nconst Settings = () => {\n  const {\n    fetchFlags: { data: systemSettings, isLoading: systemSettingsLoading },\n    updateFlag: { mutate: updateFlag, error: updateFlagError },\n    fetchUiSettings: { data: uiSettings, isLoading: uiSettingsLoading },\n    updateUiSetting: { mutate: updateUiSetting, error: updateUiSettingError },\n  } = useSettings();\n\n  return (\n    <>\n      <ErrorNotification error={updateFlagError} />\n      <ErrorNotification error={updateUiSettingError} />\n      <PageMeta icon={Cog} title={`${t('Settings')}`} />\n      {systemSettings && !systemSettingsLoading && (\n        <Section\n          title={\n            <div className=\"flex flex-col\">\n              {t('Who can view your connections?')}\n              <small className=\"text-sm text-gray-400\">\n                {t(\n                  'People that are member of a circle that has access to view your connections will always be able to see your connections'\n                )}\n              </small>\n            </div>\n          }\n        >\n          <div className=\"mb-5 flex flex-row\">\n            <Label htmlFor=\"name\" className=\"my-auto mr-2 flex flex-col\">\n              {t('Everyone')}\n              <small className=\"text-sm text-gray-400\">\n                {t('Everyone that visits your homepage will see an overview of your connections')}\n              </small>\n            </Label>\n            <Checkbox\n              className=\"ml-auto\"\n              name=\"AnonymousVisitorsCanViewConnections\"\n              defaultChecked={systemSettings?.anonymousVisitorsCanViewConnections}\n              onChange={(e) => updateFlag({ name: e.target.name, value: e.target.checked })}\n            />\n          </div>\n          <div className=\"mb-5 flex flex-row\">\n            <Label htmlFor=\"name\" className=\"my-auto mr-2 flex flex-col\">\n              {t('Authenticated')}\n              <small className=\"text-sm text-gray-400\">\n                {t(\n                  'Only authenticated people that visit your public site will see an overview of your connections'\n                )}\n              </small>\n            </Label>\n\n            <Checkbox\n              className=\"ml-auto\"\n              name=\"AuthenticatedIdentitiesCanViewConnections\"\n              defaultChecked={systemSettings?.authenticatedIdentitiesCanViewConnections}\n              onChange={(e) => updateFlag({ name: e.target.name, value: e.target.checked })}\n            />\n          </div>\n          <div className=\"mb-5 flex flex-row\">\n            <Label htmlFor=\"name\" className=\"my-auto mr-2 flex flex-col\">\n              {t('Connected')}\n              <small className=\"text-sm text-gray-400\">\n                {t(\n                  'Only connected people that visit your public site will see an overview of your connections'\n                )}\n              </small>\n            </Label>\n            <Checkbox\n              className=\"ml-auto\"\n              name=\"ConnectedIdentitiesCanViewConnections\"\n              defaultChecked={systemSettings?.allConnectedIdentitiesCanViewConnections}\n              onChange={(e) => updateFlag({ name: e.target.name, value: e.target.checked })}\n            />\n          </div>\n        </Section>\n      )}\n      {uiSettings && !uiSettingsLoading && (\n        <Section title={t('Ui Settings')}>\n          <div className=\"mb-5 flex flex-row\">\n            <Label htmlFor=\"name\" className=\"my-auto mr-2 flex flex-col\">\n              {t('Automatically load the profile pictures of connection requests')}\n              <small className=\"text-sm text-gray-400\">\n                {t(\n                  'If enabled, connection requests will automatically load the corresponding profile picture if available. Otherwise you need to click to load the profile picture'\n                )}\n              </small>\n            </Label>\n            <Checkbox\n              className=\"ml-auto\"\n              name=\"automaticallyLoadProfilePicture\"\n              defaultChecked={uiSettings?.automaticallyLoadProfilePicture}\n              onChange={(e) => {\n                const newUiSettings = { ...uiSettings };\n                newUiSettings[e.target.name] = e.target.checked;\n\n                updateUiSetting(newUiSettings);\n              }}\n            />\n          </div>\n        </Section>\n      )}\n    </>\n  );\n};\n\nexport default Settings;\n"],"names":["className","state","error","useState","lastSave","setLastSave","Date","now","setNow","useEffect","timer","setTimeout","clearTimeout","type","Error","message","t","diff","getTime","text","toLocaleString","title","actions","saveStatus","breadCrumbs","icon","map","crumb","index","href","to","window","location","pathname","split","pop","Section","React","ref","children","isOpaqueBg","isBorderLess","SettingsProvider","sharedSecret","root","client","url","this","post","then","response","data","name","value","flagName","settingsObj","settings","returnObj","Object","keys","forEach","key","JSON","parse","requestObj","stringify","instance","OwnerProviderBase","DriveInfo","getSharedSecret","useAuth","settingsProvider","getInstance","queryClient","useQueryClient","fetchFlags","getFlags","updateFlag","fetchUiSettings","getSettings","updateUiSetting","updateSettings","useQuery","refetchOnWindowFocus","useMutation","onSuccess","invalidateQueries","props","useSettings","systemSettings","systemSettingsLoading","isLoading","mutate","updateFlagError","uiSettings","uiSettingsLoading","updateUiSettingError","ErrorNotification","PageMeta","Cog","Label","htmlFor","defaultChecked","anonymousVisitorsCanViewConnections","onChange","e","target","checked","authenticatedIdentitiesCanViewConnections","allConnectedIdentitiesCanViewConnections","automaticallyLoadProfilePicture","newUiSettings"],"sourceRoot":""}