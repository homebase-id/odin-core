{"version":3,"file":"static/js/109.b3342208.chunk.js","mappings":"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","sources":["components/Blog/Common/Card/BlogTeaserCard.tsx","components/Blog/Overview/ListBlogOverview/ListBlogOverview.tsx","components/ui/Icons/Arrow/Arrow.tsx","components/ui/Icons/Bubble/Bubble.tsx","components/ui/Icons/Triangle/Triangle.tsx","hooks/blog/useBlogPosts.ts","hooks/blog/useBlogPostsInfinite.ts","hooks/blog/useChannel.ts","hooks/blog/useChannels.ts","templates/Blog/Recents/BlogRecents.tsx","templates/Home/Common/ChannelTeaser/ChannelTeaser.tsx"],"sourcesContent":["import { Article, PostContent, getChannelDrive } from '@youfoundation/dotyoucore-js';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../Image/Image';\nimport Arrow from '../../../ui/Icons/Arrow/Arrow';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport Triangle from '../../../ui/Icons/Triangle/Triangle';\nimport Bubble from '../../../ui/Icons/Bubble/Bubble';\nimport useChannel from '../../../../hooks/blog/useChannel';\n\ninterface BlogTeaserProps {\n  className?: string;\n  blog: PostContent;\n  isSingleCol?: boolean;\n  hideImageWhenNone?: boolean;\n  showChannel?: boolean;\n}\n\nconst BlogTeaser: FC<BlogTeaserProps> = ({\n  className,\n  blog,\n\n  isSingleCol,\n  hideImageWhenNone,\n  showChannel,\n}) => {\n  const { data: channel } = useChannel({ channelId: blog.channelId });\n\n  return (\n    <div className={`w-full ${className ?? ''}`}>\n      <Link to={`/home/posts/${channel?.slug}/${blog.slug ?? '#'}`} className=\"contents\">\n        <div className=\"relative h-full overflow-hidden rounded-lg border border-gray-200 border-opacity-60 transition-colors hover:shadow-md dark:border-gray-800 hover:dark:shadow-slate-600 \">\n          {(!hideImageWhenNone || blog.primaryImageFileId) && (\n            <div className={`relative ${isSingleCol ? 'sm:p-6 sm:pb-2' : ''}`}>\n              {blog.primaryImageFileId ? (\n                <>\n                  <Image\n                    className={`${isSingleCol && 'sm:rounded-lg'} ${\n                      blog.type === 'Image' || blog.type === 'Video'\n                        ? 'h-full max-h-[30rem] w-auto'\n                        : 'h-64 w-full md:h-36 lg:h-48'\n                    } ${blog.type === 'Image' && ''} ${blog.type === 'Video' && 'aspect-video'}`}\n                    fileId={blog.primaryImageFileId}\n                    targetDrive={getChannelDrive(blog.channelId)}\n                    alt=\"blog\"\n                    cover={true}\n                  />\n                  {blog.type === 'Video' && (\n                    <>\n                      <Triangle className=\"absolute top-[calc(50%-2.5rem)] left-[calc(50%-2.5rem)] h-20 w-20 text-white\" />\n                    </>\n                  )}\n                </>\n              ) : !hideImageWhenNone ? (\n                <div\n                  className={`max-w-full overflow-hidden text-ellipsis whitespace-nowrap bg-slate-50 text-slate-200 dark:bg-slate-700 dark:text-slate-600 ${\n                    isSingleCol && 'sm:rounded-lg'\n                  } ${\n                    blog.type === 'Image' || blog.type === 'Video'\n                      ? 'h-full max-h-[30rem] w-auto'\n                      : 'h-64 w-full md:h-36 lg:h-48'\n                  } ${blog.type === 'Video' && 'aspect-video'}`}\n                >\n                  <p className=\"p-2 text-9xl \">{blog.caption}</p>\n                </div>\n              ) : null}\n            </div>\n          )}\n          <div className=\"px-6 py-4\">\n            <div className=\"flex flex-row text-foreground text-opacity-40\">\n              <span className=\"my-auto text-xs\">\n                {new Date(blog.dateUnixTime).toLocaleDateString(undefined, {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric',\n                })}\n              </span>\n              <h2 className=\"my-auto ml-2 border-l pl-2 text-xs font-medium uppercase tracking-wide dark:border-slate-500\">\n                {blog.type}\n                {showChannel && channel?.name ? ` - ${channel?.name}` : ''}\n              </h2>\n            </div>\n\n            <h1 className=\"text-lg font-medium text-foreground text-opacity-90\">{blog.caption}</h1>\n            {blog.type === 'Article' ? (\n              <>\n                <p className=\"my-3 leading-relaxed\">{(blog as Article).abstract}</p>\n                <div className=\"flex flex-wrap items-center \">\n                  <span className=\"inline-flex items-center text-button md:mb-2 lg:mb-0\">\n                    {t('Read more')}\n                    <Arrow className=\"ml-2 h-4 w-4\" />\n                  </span>\n                </div>\n              </>\n            ) : null}\n          </div>\n          <div className=\"absolute bottom-0 right-0 flex items-center p-5 text-sm text-gray-300\">\n            <span className=\"inline-flex items-center\">\n              <Bubble className=\"mr-1 inline-block h-4 w-4\" /> 6\n            </span>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default BlogTeaser;\n","import { PostContent } from '@youfoundation/dotyoucore-js';\nimport BlogTeaserCard from '../../Common/Card/BlogTeaserCard';\n\nconst ListBlogOverview = ({\n  blogPosts,\n  showChannel,\n}: {\n  blogPosts: PostContent[];\n  showChannel?: boolean;\n}) => {\n  return (\n    <div className=\"-my-4 max-w-4xl\">\n      {blogPosts?.map((blog) => {\n        return (\n          <BlogTeaserCard\n            key={blog.id}\n            blog={blog}\n            className=\"my-4\"\n            isSingleCol={true}\n            hideImageWhenNone={true}\n            showChannel={showChannel}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ListBlogOverview;\n","import { FC } from 'react';\n\nconst Arrow: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M5 12h14\"></path>\n      <path d=\"M12 5l7 7-7 7\"></path>\n    </svg>\n  );\n};\n\nexport default Arrow;\n","import { FC } from 'react';\n\nconst Bubble: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z\"></path>\n    </svg>\n  );\n};\n\nexport default Bubble;\n","import { FC } from 'react';\n\nconst Triangle: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 384 512\"\n      fill=\"currentColor\"\n      className={className}\n    >\n      <path d=\"M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z\" />\n    </svg>\n  );\n};\n\nexport default Triangle;\n","import { useQuery } from '@tanstack/react-query';\nimport { PostContent, PostType, PublicClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsProps = {\n  channelId?: string;\n  postType?: PostType;\n  pageSize?: number;\n};\n\nconst useBlogPosts = ({ channelId, postType, pageSize = 10 }: useBlogPostsProps) => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchBlogData = async ({ channelId }: { channelId?: string }) => {\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n    const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n\n    let foundBlogPosts: PostContent[];\n    // If located in a specific channel, only fetch those, otherwise fallback to recents;\n    if (channelId) {\n      if (fileData.has(channelId)) {\n        foundBlogPosts =\n          fileData\n            .get(channelId)\n            ?.map((entry) => entry.payload as PostContent)\n            .filter((post) => (postType ? post.type === postType : true)) ?? [];\n      } else {\n        foundBlogPosts = (\n          await client.blogPostReadonlyProvider.getPosts(channelId, postType, undefined, pageSize)\n        ).results.map((postFile) => postFile.content);\n      }\n    } else {\n      if (fileData.size >= 1) {\n        foundBlogPosts = [];\n\n        for (const channelId of fileData.keys()) {\n          foundBlogPosts = [\n            ...foundBlogPosts,\n            ...(fileData\n              .get(channelId)\n              ?.map((entry) => entry.payload as PostContent)\n              .filter((post) => (postType ? post.type === postType : true)) ?? []),\n          ];\n\n          // Sorted descending\n          foundBlogPosts.sort((a, b) => b.dateUnixTime - a.dateUnixTime);\n        }\n      } else {\n        foundBlogPosts = (\n          await client.blogPostReadonlyProvider.getRecentPosts(postType, pageSize)\n        ).results.map((postFile) => postFile.content);\n      }\n    }\n\n    return foundBlogPosts\n      .filter((post) => post !== undefined && post.id !== undefined)\n      .slice(0, pageSize);\n  };\n\n  return useQuery(['blog-recents', channelId], () => fetchBlogData({ channelId }), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    onError: (er) => {\n      console.log(er);\n    },\n  });\n};\n\nexport default useBlogPosts;\n","import { useInfiniteQuery } from '@tanstack/react-query';\nimport { PublicClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsInfiniteProps = {\n  channelId?: string;\n  pageSize?: number;\n  enabled?: boolean;\n};\n\nconst useBlogPostsInfinite = ({\n  channelId,\n  pageSize = 30,\n  enabled = true,\n}: useBlogPostsInfiniteProps) => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchBlogData = async ({\n    channelId,\n    pageParam,\n  }: {\n    channelId?: string;\n    pageParam: string | Record<string, string> | undefined;\n  }) => {\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n\n    if (channelId) {\n      // run get posts from channel\n      const response = await client.blogPostReadonlyProvider.getPosts(\n        channelId,\n        undefined,\n        typeof pageParam === 'string' ? pageParam : undefined,\n        pageSize\n      );\n\n      return {\n        results: response.results.map((postFile) => postFile.content),\n        cursorState: response.cursorState,\n      };\n    } else {\n      // run get recents\n      const response = await client.blogPostReadonlyProvider.getRecentPosts(\n        undefined,\n        pageSize,\n        typeof pageParam === 'object' ? pageParam : undefined\n      );\n\n      return {\n        results: response.results.map((postFile) => postFile.content),\n        cursorState: response.cursorState,\n      };\n    }\n  };\n\n  return useInfiniteQuery(\n    ['blogs', channelId],\n    ({ pageParam }) => fetchBlogData({ channelId, pageParam }),\n    {\n      getNextPageParam: (lastPage) =>\n        (lastPage?.results?.length >= pageSize && lastPage?.cursorState) ?? undefined,\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      enabled: enabled,\n      // onError: (er) => {\n      //   console.log(er);\n      // },\n    }\n  );\n};\n\nexport default useBlogPostsInfinite;\n","import { useQuery } from '@tanstack/react-query';\nimport { BlogConfig, ChannelDefinition, PublicClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\nimport { ChannelDefinitionVm, parseChannelTemplate } from './useChannels';\n\ntype useChannelsProps = {\n  channelSlug?: string;\n  channelId?: string;\n};\n\nconst useChannel = ({ channelSlug, channelId }: useChannelsProps) => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchChannelData = async ({ channelSlug, channelId }: useChannelsProps) => {\n    if (!channelSlug && !channelId) {\n      return;\n    }\n\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n    let channel: ChannelDefinition | undefined = undefined;\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n    if (fileData) {\n      fileData.forEach((entry) => {\n        const foundEntry = entry.find(\n          (possibleChannel) =>\n            possibleChannel.header.fileMetadata.appData.fileType ===\n              BlogConfig.ChannelDefinitionFileType &&\n            (channelSlug\n              ? possibleChannel.payload.slug === channelSlug\n              : possibleChannel.payload.channelId === channelId)\n        );\n        if (foundEntry) {\n          channel = foundEntry.payload as ChannelDefinition;\n        }\n      });\n    }\n\n    if (!channel) {\n      channel = channelSlug\n        ? await client.blogPostReadonlyProvider.getChannelDefinitionBySlug(channelSlug)\n        : channelId\n        ? await client.blogPostReadonlyProvider.getChannelDefinition(channelId)\n        : undefined;\n    }\n\n    if (channel) {\n      return {\n        ...channel,\n        template: parseChannelTemplate(channel?.templateId),\n      } as ChannelDefinitionVm;\n    }\n    return;\n  };\n\n  return useQuery(\n    ['channel', channelSlug || channelId],\n    () => fetchChannelData({ channelSlug, channelId }),\n    {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n    }\n  );\n};\n\nexport default useChannel;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  BlogConfig,\n  ChannelDefinition,\n  ChannelTemplate,\n  PublicClient,\n} from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\nexport interface ChannelDefinitionVm extends ChannelDefinition {\n  template: ChannelTemplate;\n}\n\nexport const parseChannelTemplate = (templateId: number | undefined) => {\n  return parseInt(templateId + '') === ChannelTemplate.LargeCards\n    ? ChannelTemplate.LargeCards\n    : parseInt(templateId + '') === ChannelTemplate.MasonryLayout\n    ? ChannelTemplate.MasonryLayout\n    : ChannelTemplate.ClassicBlog;\n};\n\nconst useChannels = () => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchChannelData = async () => {\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n    let channels: ChannelDefinition[] = [];\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n    if (fileData) {\n      fileData.forEach((entry) => {\n        const entries = entry.filter(\n          (possibleChannel) =>\n            possibleChannel.header.fileMetadata.appData.fileType ===\n            BlogConfig.ChannelDefinitionFileType\n        );\n        channels = [\n          ...channels,\n          ...entries.map((entry) => {\n            return { ...entry.payload } as ChannelDefinition;\n          }),\n        ];\n      });\n    }\n\n    if (!channels?.length) {\n      channels = await client.blogPostReadonlyProvider.getChannels();\n    }\n\n    return channels.map((channel) => {\n      return {\n        ...channel,\n        template: parseChannelTemplate(channel?.templateId),\n      } as ChannelDefinitionVm;\n    });\n  };\n\n  return useQuery(['channels'], () => fetchChannelData(), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n  });\n};\n\nexport default useChannels;\n","import { Helmet } from 'react-helmet-async';\n\nimport { t } from '../../../helpers/i18n/dictionary';\nimport ListBlogOverview from '../../../components/Blog/Overview/ListBlogOverview/ListBlogOverview';\nimport useChannels from '../../../hooks/blog/useChannels';\nimport ChannelTeaser from '../../Home/Common/ChannelTeaser/ChannelTeaser';\nimport useBlogPostsInfinite from '../../../hooks/blog/useBlogPostsInfinite';\nimport { PostContent } from '@youfoundation/dotyoucore-js';\nimport { useRef, useState } from 'react';\nimport { useIntersection } from '../../../hooks/intersection/useIntersection';\nimport { flattenInfinteData } from '../../../helpers/common';\nimport useBlogPosts from '../../../hooks/blog/useBlogPosts';\n\nconst PAGE_SIZE = 10;\nconst BlogRecents = () => {\n  const [isStatic, setIsStatic] = useState(true);\n\n  const { data: channels } = useChannels();\n  const { data: staticPosts, isFetchedAfterMount: staticPostsLoaded } = useBlogPosts({\n    pageSize: PAGE_SIZE,\n  });\n  const {\n    data: posts,\n    hasNextPage: hasMoreBlogs,\n    fetchNextPage,\n    isFetchedAfterMount,\n  } = useBlogPostsInfinite({ pageSize: PAGE_SIZE, enabled: !isStatic });\n  const loadMoreRef = useRef<HTMLDivElement>(null);\n\n  useIntersection(\n    hasMoreBlogs || (isStatic && staticPostsLoaded) ? loadMoreRef : undefined,\n    () => {\n      if (isStatic) {\n        setIsStatic(false);\n      } else {\n        fetchNextPage();\n      }\n    },\n    true\n  );\n\n  const flattenedPosts = flattenInfinteData<PostContent>(posts, PAGE_SIZE);\n\n  // Combine and remove duplicates from static and dynamic requests\n  const combinedPosts = [\n    ...(staticPosts ? staticPosts : []),\n    ...(flattenedPosts ? flattenedPosts : []),\n  ].reduce((uniquePosts, post) => {\n    if (uniquePosts.some((unique) => unique.id === post.id)) {\n      return uniquePosts;\n    } else {\n      return [...uniquePosts, post];\n    }\n  }, [] as PostContent[]);\n\n  combinedPosts.sort((a, b) => b.dateUnixTime - a.dateUnixTime);\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('Wall')} | Youniverse</title>\n      </Helmet>\n\n      <section className=\"py-5\">\n        <div className=\"container mx-auto px-5\">\n          <div className=\"-mx-2 flex max-w-6xl flex-col lg:flex-row xl:-mx-4\">\n            <div className=\"py-2 px-2 lg:w-2/3 xl:px-4\">\n              {combinedPosts && <ListBlogOverview blogPosts={combinedPosts} showChannel={true} />}\n\n              <div ref={loadMoreRef} className=\"h-1 w-full\"></div>\n              {!hasMoreBlogs && isFetchedAfterMount && (\n                <div className=\"mt-5 bg-button p-2 text-center text-white\">\n                  {t('No more posts')}\n                </div>\n              )}\n            </div>\n            <div className=\"hidden py-2 px-2 lg:block lg:w-1/3 xl:px-4\">\n              <div className=\"-my-2\">\n                {channels?.map((channel) => {\n                  return (\n                    <ChannelTeaser\n                      key={channel.channelId}\n                      channel={channel}\n                      className={'w-full py-2'}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default BlogRecents;\n","import { FC } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport { ChannelDefinitionVm } from '../../../../hooks/blog/useChannels';\n\nimport Arrow from '../../../../components/ui/Icons/Arrow/Arrow';\n\ninterface ChannelTeaserProps {\n  className?: string;\n  channel: ChannelDefinitionVm;\n}\n\nconst ChannelTeaser: FC<ChannelTeaserProps> = ({ className, channel }) => {\n  const navigate = useNavigate();\n\n  const targetHref = `/home/posts/${channel.slug ?? '#'}`;\n\n  return (\n    <div className={className} onClick={() => navigate(targetHref)}>\n      <div className=\"relative h-full overflow-hidden rounded-lg bg-gray-100 bg-opacity-75 px-4 py-4 dark:bg-gray-800 dark:bg-opacity-40 lg:px-8 lg:py-16\">\n        <h1 className=\"title-font mb-3 text-xl font-medium sm:text-2xl\">{channel.name}</h1>\n        {channel.description && <p className=\"mb-3 leading-relaxed\">{channel.description}</p>}\n        <Link className=\"inline-flex items-center text-button\" to={targetHref}>\n          {t('See all')}\n          <Arrow className=\"ml-2 h-4 w-4\" />\n        </Link>\n      </div>\n    </div>\n  );\n};\nexport default ChannelTeaser;\n"],"names":["className","blog","isSingleCol","hideImageWhenNone","showChannel","channel","useChannel","channelId","data","to","slug","primaryImageFileId","type","fileId","targetDrive","getChannelDrive","alt","cover","caption","Date","dateUnixTime","toLocaleDateString","undefined","month","day","year","name","abstract","t","blogPosts","map","id","viewBox","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","d","xmlns","postType","pageSize","useAuth","getSharedSecret","getApiType","fetchBlogData","client","PublicClient","api","sharedSecret","fileReadOnlyProvider","GetFile","fileData","has","foundBlogPosts","get","entry","payload","filter","post","blogPostReadonlyProvider","getPosts","results","postFile","content","size","keys","sort","a","b","getRecentPosts","slice","useQuery","refetchOnMount","refetchOnWindowFocus","onError","er","console","log","enabled","pageParam","response","cursorState","useInfiniteQuery","getNextPageParam","lastPage","length","staleTime","Infinity","channelSlug","fetchChannelData","forEach","foundEntry","find","possibleChannel","header","fileMetadata","appData","fileType","BlogConfig","getChannelDefinitionBySlug","getChannelDefinition","template","parseChannelTemplate","templateId","parseInt","ChannelTemplate","channels","entries","getChannels","useState","isStatic","setIsStatic","useChannels","useBlogPosts","staticPosts","staticPostsLoaded","isFetchedAfterMount","useBlogPostsInfinite","posts","hasMoreBlogs","hasNextPage","fetchNextPage","loadMoreRef","useRef","useIntersection","flattenedPosts","flattenInfinteData","combinedPosts","reduce","uniquePosts","some","unique","ref","navigate","useNavigate","targetHref","onClick","description"],"sourceRoot":""}