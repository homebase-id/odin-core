{"version":3,"file":"static/js/100.caa81791.chunk.js","mappings":"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","sources":["components/Blog/Common/Blocks/Meta/Meta.tsx","components/Blog/Common/Card/PostTeaser.tsx","components/ui/Buttons/ActionLink.tsx","components/ui/Icons/Arrow/Arrow.tsx","components/ui/Icons/Check/Check.tsx","components/ui/Icons/Pencil/Pencil.tsx","components/ui/Icons/Plus/Plus.tsx","components/ui/Icons/Save/Save.tsx","components/ui/Icons/Shield/Shield.tsx","components/ui/Icons/Trash/Trash.tsx","hooks/blog/useBlog.ts","hooks/blog/useBlogPosts.ts","hooks/blog/useChannels.ts","components/RichTextRenderer/RichTextRenderer.tsx","components/Blog/Common/RelatedBlogs/RelatedBlogs.tsx","templates/Blog/Detail/BlogDetail.tsx"],"sourcesContent":["import { ChannelDefinition, PostContent } from '@youfoundation/dotyoucore-js';\nimport { ChannelDefinitionVm } from '../../../../../hooks/blog/useChannels';\n\nconst PostMeta = ({\n  dotYouId,\n  post,\n  channel,\n  className,\n  size = 'text-xs',\n}: {\n  dotYouId?: string;\n  post: PostContent;\n  channel: ChannelDefinitionVm | ChannelDefinition;\n  className?: string;\n  size?: 'text-xs' | 'text-sm';\n}) => {\n  const now = new Date();\n  const date = new Date(post.dateUnixTime);\n  const format: Intl.DateTimeFormatOptions = {\n    month: 'short',\n    day: 'numeric',\n    year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined,\n    hour: 'numeric',\n    minute: 'numeric',\n  };\n\n  return (\n    <div className={`flex flex-row ${size} font-medium ${className ?? ''}`}>\n      <span>{date.toLocaleDateString(undefined, format)}</span>\n      <a\n        className=\"ml-1 border-l pl-1 text-button dark:border-slate-500\"\n        href={`${dotYouId ? `https://${dotYouId}/` : ''}/home/posts/${channel.slug}`}\n      >\n        {channel?.name ? `${channel?.name}` : ''}\n      </a>\n    </div>\n  );\n};\n\nexport default PostMeta;\n","import { Article, PostContent, getChannelDrive, PostFile } from '@youfoundation/dotyoucore-js';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../../../Image/Image';\nimport Arrow from '../../../ui/Icons/Arrow/Arrow';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport Triangle from '../../../ui/Icons/Triangle/Triangle';\nimport Bubble from '../../../ui/Icons/Bubble/Bubble';\nimport useChannel from '../../../../hooks/blog/useChannel';\nimport { ellipsisAtMaxChar } from '../../../../helpers/common';\n\ninterface PostTeaserProps {\n  className?: string;\n  postFile: PostFile<PostContent>;\n  isSingleCol?: boolean;\n  hideImageWhenNone?: boolean;\n  showChannel?: boolean;\n}\n\nconst PostTeaser: FC<PostTeaserProps> = ({\n  className,\n  postFile: { content: post, previewThumbnail },\n\n  isSingleCol,\n  hideImageWhenNone,\n  showChannel,\n}) => {\n  const { data: channel } = useChannel({ channelId: post.channelId });\n\n  return (\n    <div className={`w-full ${className ?? ''}`}>\n      <Link to={`/home/posts/${channel?.slug}/${post.slug ?? '#'}`} className=\"contents\">\n        <div className=\"relative h-full overflow-hidden rounded-lg border border-gray-200 border-opacity-60 transition-colors hover:shadow-md dark:border-gray-800 hover:dark:shadow-slate-600 \">\n          {(!hideImageWhenNone || post.primaryImageFileId) && (\n            <div className={`relative ${isSingleCol ? 'sm:p-6 sm:pb-2' : ''}`}>\n              {post.primaryImageFileId ? (\n                <>\n                  <Image\n                    className={`${isSingleCol && 'sm:rounded-lg'} ${\n                      post.type === 'Image' || post.type === 'Video'\n                        ? 'h-full max-h-[30rem] w-auto'\n                        : 'h-64 w-full md:h-36 lg:h-48'\n                    } ${post.type === 'Image' && ''} ${post.type === 'Video' && 'aspect-video'}`}\n                    fileId={post.primaryImageFileId}\n                    targetDrive={getChannelDrive(post.channelId)}\n                    alt=\"blog\"\n                    fit=\"cover\"\n                    previewThumbnail={previewThumbnail}\n                  />\n                  {post.type === 'Video' && (\n                    <>\n                      <Triangle className=\"absolute top-[calc(50%-2.5rem)] left-[calc(50%-2.5rem)] h-20 w-20 text-white\" />\n                    </>\n                  )}\n                </>\n              ) : !hideImageWhenNone ? (\n                <div\n                  className={`max-w-full overflow-hidden text-ellipsis whitespace-nowrap bg-slate-50 text-slate-200 dark:bg-slate-700 dark:text-slate-600 ${\n                    isSingleCol && 'sm:rounded-lg'\n                  } ${\n                    post.type === 'Image' || post.type === 'Video'\n                      ? 'h-full max-h-[30rem] w-auto'\n                      : 'h-64 w-full md:h-36 lg:h-48'\n                  } ${post.type === 'Video' && 'aspect-video'}`}\n                >\n                  <p className=\"p-2 text-9xl \">{post.caption}</p>\n                </div>\n              ) : null}\n            </div>\n          )}\n          <div className=\"px-6 py-4\">\n            <div className=\"flex flex-row text-foreground text-opacity-40\">\n              <span className=\"my-auto text-xs\">\n                {new Date(post.dateUnixTime).toLocaleDateString(undefined, {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric',\n                })}\n              </span>\n              <h2 className=\"my-auto ml-2 border-l pl-2 text-xs font-medium uppercase tracking-wide dark:border-slate-500\">\n                {post.type}\n                {showChannel && channel?.name ? ` - ${channel?.name}` : ''}\n              </h2>\n            </div>\n\n            <h1 className=\"text-lg font-medium text-foreground text-opacity-90\">{post.caption}</h1>\n            {post.type === 'Article' ? (\n              <>\n                <p className=\"my-3 leading-relaxed\">\n                  {ellipsisAtMaxChar((post as Article).abstract, 240)}\n                  {(post as Article)?.abstract?.length > 240 ? (\n                    <span className=\"text-button\">{t('Read more')}</span>\n                  ) : null}\n                </p>\n                <div className=\"flex flex-wrap items-center \">\n                  <span className=\"inline-flex items-center text-button md:mb-2 lg:mb-0\">\n                    {t('Read more')}\n                    <Arrow className=\"ml-2 h-4 w-4\" />\n                  </span>\n                </div>\n              </>\n            ) : null}\n          </div>\n          <div className=\"absolute bottom-0 right-0 flex items-center p-5 text-sm text-gray-300\">\n            <span className=\"inline-flex items-center\">\n              <Bubble className=\"mr-1 inline-block h-4 w-4\" /> 6\n            </span>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PostTeaser;\n","import React from 'react';\nimport { FC, ReactNode } from 'react';\nimport Arrow from '../Icons/Arrow/Arrow';\nimport Check from '../Icons/Check/Check';\nimport Pencil from '../Icons/Pencil/Pencil';\nimport Plus from '../Icons/Plus/Plus';\nimport Save from '../Icons/Save/Save';\nimport Shield from '../Icons/Shield/Shield';\nimport Times from '../Icons/Times/Times';\nimport Trash from '../Icons/Trash/Trash';\n\nexport type ActionLinkState = 'loading' | 'success' | 'error' | 'idle';\n\ntype ActionLinkProps = {\n  children?: ReactNode;\n  className?: string;\n  type?: 'primary' | 'secondary' | 'remove' | 'mute';\n  title?: string;\n  size?: 'large' | 'small' | 'square';\n  onClick?: (e: unknown) => void;\n  icon?:\n    | 'save'\n    | 'send'\n    | 'plus'\n    | 'trash'\n    | 'edit'\n    | 'left'\n    | 'right'\n    | 'up'\n    | 'down'\n    | 'shield'\n    | 'check'\n    | 'times';\n  download?: string;\n  href?: string;\n};\n\nconst ActionLink: FC<ActionLinkProps> = ({\n  children,\n  className,\n  type,\n  title,\n  size,\n  onClick,\n  icon,\n  download,\n  href,\n}) => {\n  const Icon = (props: { className: string }) => {\n    return icon === 'save' ? (\n      <Save {...props} />\n    ) : icon === 'send' ? (\n      <Arrow {...props} />\n    ) : icon === 'plus' ? (\n      <Plus {...props} />\n    ) : icon === 'trash' ? (\n      <Trash {...props} />\n    ) : icon === 'edit' ? (\n      <Pencil {...props} />\n    ) : icon === 'left' ? (\n      <Arrow {...props} className={`-rotate-180 ${props.className}`} />\n    ) : icon === 'right' ? (\n      <Arrow {...props} className={` ${props.className}`} />\n    ) : icon === 'up' ? (\n      <Arrow {...props} className={`-rotate-90 ${props.className}`} />\n    ) : icon === 'shield' ? (\n      <Shield {...props} fill=\"currentColor\" />\n    ) : icon === 'down' ? (\n      <Arrow {...props} className={`rotate-90 ${props.className}`} />\n    ) : icon === 'check' ? (\n      <Check {...props} className={`${props.className}`} />\n    ) : icon === 'times' ? (\n      <Times {...props} className={`${props.className}`} />\n    ) : (\n      <></>\n    );\n  };\n\n  const colorClasses =\n    type === 'secondary'\n      ? 'border-button border-2 hover:bg-button hover:text-button-text'\n      : type === 'remove'\n      ? 'bg-red-200 hover:bg-red-400 dark:bg-red-700 hover:dark:bg-red-800 dark:text-white'\n      : type === 'mute'\n      ? ''\n      : 'bg-button hover:filter hover:grayscale-[20%] text-button-text';\n\n  const widthClasses =\n    children && type !== 'mute'\n      ? `min-w-[6rem] ${className?.indexOf('w-') !== -1 ? '' : 'w-full sm:w-auto'}`\n      : '';\n\n  const sizeClasses =\n    size === 'large'\n      ? 'px-5 py-3'\n      : size === 'small'\n      ? 'px-3 py-1 text-sm'\n      : size === 'square'\n      ? 'p-2'\n      : 'px-3 py-2';\n\n  return (\n    <a\n      className={`relative flex flex-row items-center rounded-md text-left ${widthClasses} ${sizeClasses} ${colorClasses} ${className}`}\n      download={download}\n      href={href}\n      title={title}\n      onClick={onClick}\n    >\n      {children}\n      <Icon className={`my-auto ${children ? 'ml-2' : ''} h-4 w-4`} />\n    </a>\n  );\n};\n\nexport default ActionLink;\n","import { FC } from 'react';\n\nconst Arrow: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      className={className}\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M5 12h14\"></path>\n      <path d=\"M12 5l7 7-7 7\"></path>\n    </svg>\n  );\n};\n\nexport default Arrow;\n","import { FC } from 'react';\n\nconst Check: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"3\"\n      className={className}\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M22 11.08V12a10 10 0 11-5.93-9.14\"></path>\n      <path d=\"M22 4L12 14.01l-3-3\"></path>\n    </svg>\n  );\n};\n\nexport default Check;\n","import { FC } from 'react';\n\nconst Pencil: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 512 512\"\n      fill=\"currentColor\"\n      className={className}\n    >\n      <path d=\"M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z\" />\n    </svg>\n  );\n};\n\nexport default Pencil;\n","import { FC } from 'react';\n\nconst Plus: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n      fill=\"currentColor\"\n      viewBox=\"0 0 448 512\"\n    >\n      <path d=\"M432 256c0 17.69-14.33 32.01-32 32.01H256v144c0 17.69-14.33 31.99-32 31.99s-32-14.3-32-31.99v-144H48c-17.67 0-32-14.32-32-32.01s14.33-31.99 32-31.99H192v-144c0-17.69 14.33-32.01 32-32.01s32 14.32 32 32.01v144h144C417.7 224 432 238.3 432 256z\" />\n    </svg>\n  );\n};\n\nexport default Plus;\n","import { FC } from 'react';\n\nconst Save: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 448 512\"\n      fill=\"currentColor\"\n      className={className}\n    >\n      <path d=\"M433.1 129.1l-83.9-83.9C342.3 38.32 327.1 32 316.1 32H64C28.65 32 0 60.65 0 96v320c0 35.35 28.65 64 64 64h320c35.35 0 64-28.65 64-64V163.9C448 152.9 441.7 137.7 433.1 129.1zM224 416c-35.34 0-64-28.66-64-64s28.66-64 64-64s64 28.66 64 64S259.3 416 224 416zM320 208C320 216.8 312.8 224 304 224h-224C71.16 224 64 216.8 64 208v-96C64 103.2 71.16 96 80 96h224C312.8 96 320 103.2 320 112V208z\" />\n    </svg>\n  );\n};\n\nexport default Save;\n","import { FC } from 'react';\n\ninterface ShieldProps extends IconProps {\n  fill?: 'currentColor';\n}\n\nconst Shield: FC<ShieldProps> = ({ className, fill }) => {\n  return (\n    <svg\n      fill={fill ?? 'none'}\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={'2'}\n      className={`${className}`}\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\"></path>\n    </svg>\n  );\n};\n\nexport default Shield;\n","import { FC } from 'react';\n\nconst Trash: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 448 512\"\n      fill=\"currentColor\"\n      className={className}\n    >\n      <path d=\"M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM31.1 128H416V448C416 483.3 387.3 512 352 512H95.1C60.65 512 31.1 483.3 31.1 448V128zM111.1 208V432C111.1 440.8 119.2 448 127.1 448C136.8 448 143.1 440.8 143.1 432V208C143.1 199.2 136.8 192 127.1 192C119.2 192 111.1 199.2 111.1 208zM207.1 208V432C207.1 440.8 215.2 448 223.1 448C232.8 448 240 440.8 240 432V208C240 199.2 232.8 192 223.1 192C215.2 192 207.1 199.2 207.1 208zM304 208V432C304 440.8 311.2 448 320 448C328.8 448 336 440.8 336 432V208C336 199.2 328.8 192 320 192C311.2 192 304 199.2 304 208z\" />\n    </svg>\n  );\n};\n\nexport default Trash;\n","import { useQuery } from '@tanstack/react-query';\nimport { PublicClient } from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogProps = {\n  channelSlug?: string;\n  blogSlug?: string;\n};\n\nconst useBlog = ({ channelSlug, blogSlug }: useBlogProps = {}) => {\n  const { getSharedSecret, getApiType } = useAuth();\n  const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n\n  const fetchBlog = async ({ channelSlug, blogSlug }: useBlogProps) => {\n    if (!channelSlug || !blogSlug) {\n      return;\n    }\n\n    const data = await client.blogPostReadonlyProvider.getPostBySlug(channelSlug, blogSlug);\n    if (!data) {\n      // No match on a slug, perhaps better luck with the post id:\n      const channel = await client.blogPostReadonlyProvider.getChannelDefinitionBySlug(channelSlug);\n      if (!channel) return;\n      const postFile = await client.blogPostReadonlyProvider.getPost(channel.channelId, blogSlug);\n      if (postFile) return { activeBlog: postFile, activeChannel: channel };\n      return;\n    }\n\n    return { activeBlog: data.postFile, activeChannel: data.channel };\n  };\n\n  return useQuery(['blog', blogSlug], () => fetchBlog({ channelSlug, blogSlug }), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n    enabled: !!channelSlug && !!blogSlug,\n  });\n};\n\nexport default useBlog;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  PostContent,\n  PostFile,\n  PostType,\n  postTypeToTag,\n  PublicClient,\n} from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\n\ntype useBlogPostsProps = {\n  channelId?: string;\n  postType?: PostType;\n  pageSize?: number;\n};\n\nconst useBlogPosts = ({ channelId, postType, pageSize = 10 }: useBlogPostsProps) => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchBlogData = async ({ channelId }: { channelId?: string }) => {\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n    const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n\n    let foundBlogPosts: PostFile<PostContent>[];\n    // If located in a specific channel, only fetch those, otherwise fallback to recents;\n    if (channelId) {\n      if (fileData.has(channelId)) {\n        foundBlogPosts =\n          fileData\n            .get(channelId)\n            ?.map((entry) => {\n              return {\n                content: entry.payload,\n                previewThumbnail: entry.header.fileMetadata.appData.previewThumbnail,\n              } as PostFile<PostContent>;\n            })\n            .filter((post) => (postType ? post.content.type === postType : true)) ?? [];\n      } else {\n        foundBlogPosts = (\n          await client.blogPostReadonlyProvider.getPosts(\n            channelId,\n            postType ? [postTypeToTag(postType).toString()] : undefined,\n            undefined,\n            pageSize\n          )\n        ).results;\n      }\n    } else {\n      if (fileData.size >= 1) {\n        foundBlogPosts = [];\n\n        for (const channelId of fileData.keys()) {\n          foundBlogPosts = [\n            ...foundBlogPosts,\n            ...(fileData\n              .get(channelId)\n              ?.map((entry) => {\n                return {\n                  content: entry.payload,\n                  previewThumbnail: entry.header.fileMetadata.appData.previewThumbnail,\n                } as PostFile<PostContent>;\n              })\n              ?.filter((post) => (postType ? post.content.type === postType : true)) ?? []),\n          ];\n\n          // Sorted descending\n          foundBlogPosts.sort((a, b) => b?.content?.dateUnixTime - a?.content?.dateUnixTime);\n        }\n      } else {\n        foundBlogPosts = (\n          await client.blogPostReadonlyProvider.getRecentPosts(\n            postType ? [postTypeToTag(postType).toString()] : undefined,\n            pageSize\n          )\n        ).results;\n      }\n    }\n\n    return foundBlogPosts\n      .filter((post) => post !== undefined && post?.content?.id !== undefined && !post.isDraft)\n      .slice(0, pageSize);\n  };\n\n  return useQuery(['blog-recents', channelId], () => fetchBlogData({ channelId }), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    onError: (er) => {\n      console.log(er);\n    },\n  });\n};\n\nexport default useBlogPosts;\n","import { useQuery } from '@tanstack/react-query';\nimport {\n  BlogConfig,\n  ChannelDefinition,\n  ChannelTemplate,\n  PublicClient,\n} from '@youfoundation/dotyoucore-js';\nimport useAuth from '../auth/useAuth';\nexport interface ChannelDefinitionVm extends ChannelDefinition {\n  template: ChannelTemplate;\n}\n\nexport const parseChannelTemplate = (templateId: number | undefined) => {\n  return parseInt(templateId + '') === ChannelTemplate.LargeCards\n    ? ChannelTemplate.LargeCards\n    : parseInt(templateId + '') === ChannelTemplate.MasonryLayout\n    ? ChannelTemplate.MasonryLayout\n    : ChannelTemplate.ClassicBlog;\n};\n\nconst useChannels = () => {\n  const { getSharedSecret, getApiType } = useAuth();\n\n  const fetchChannelData = async () => {\n    const client = new PublicClient({ api: getApiType(), sharedSecret: getSharedSecret() });\n    let channels: ChannelDefinition[] = [];\n\n    const fileData = await client.fileReadOnlyProvider.GetFile('blogs.json');\n    if (fileData) {\n      fileData.forEach((entry) => {\n        const entries = entry.filter(\n          (possibleChannel) =>\n            possibleChannel.header.fileMetadata.appData.fileType ===\n            BlogConfig.ChannelDefinitionFileType\n        );\n        channels = [\n          ...channels,\n          ...entries.map((entry) => {\n            return { ...entry.payload } as ChannelDefinition;\n          }),\n        ];\n      });\n    }\n\n    if (!channels?.length) {\n      channels = await client.blogPostReadonlyProvider.getChannels();\n    }\n\n    return channels.map((channel) => {\n      return {\n        ...channel,\n        template: parseChannelTemplate(channel?.templateId),\n      } as ChannelDefinitionVm;\n    });\n  };\n\n  return useQuery(['channels'], () => fetchChannelData(), {\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    staleTime: Infinity,\n  });\n};\n\nexport default useChannels;\n","import { TargetDrive } from '@youfoundation/dotyoucore-js';\nimport React, { ReactNode } from 'react';\nimport Image from '../Image/Image';\nimport ActionLink from '../ui/Buttons/ActionLink';\n\nconst RichTextRenderer = ({\n  body,\n  imageDrive,\n}: {\n  body: string | Record<string, unknown>[] | undefined;\n  imageDrive?: TargetDrive;\n}) => {\n  if (!body || typeof body === 'string') {\n    return <>{body}</>;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const render = (node: any): ReactNode => {\n    if ('text' in node) {\n      return renderLeaf(node, node.text, {});\n    } else {\n      const { type, ...attributes } = node;\n\n      return renderElement(\n        { type, attributes },\n        <>\n          {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            node.children?.map((childNode: any, index: number) => (\n              <React.Fragment key={index}>{render(childNode)}</React.Fragment>\n            ))\n          }\n        </>\n      );\n    }\n  };\n\n  const renderLeaf = (\n    leaf: { text?: string; bold?: boolean; italic?: boolean; underline?: boolean; code?: boolean },\n    children: ReactNode,\n    attributes: Record<string, unknown>\n  ) => {\n    if (leaf.bold) {\n      children = <strong className=\"font-bold\">{children}</strong>;\n    }\n\n    if (leaf.code) {\n      children = <code>{children}</code>;\n    }\n\n    if (leaf.italic) {\n      children = <em>{children}</em>;\n    }\n\n    if (leaf.underline) {\n      children = <u>{children}</u>;\n    }\n\n    return <span {...attributes}>{children}</span>;\n  };\n\n  const renderElement = (\n    node: {\n      type?: string;\n      attributes?: Record<string, unknown>;\n    },\n    children: ReactNode\n  ) => {\n    const { type, attributes } = node;\n\n    switch (type) {\n      case 'block-quote':\n        return (\n          <blockquote {...attributes} className=\"border-l-4 pl-2\">\n            {children}\n          </blockquote>\n        );\n      case 'bulleted-list':\n        return (\n          <ul {...attributes} className=\"list-disc pl-5\">\n            {children}\n          </ul>\n        );\n      case 'heading-one':\n        return (\n          <h1 {...attributes} className={'text-2xl'}>\n            {children}\n          </h1>\n        );\n      case 'heading-two':\n        return (\n          <h2 {...attributes} className={'text-xl'}>\n            {children}\n          </h2>\n        );\n      case 'list-item':\n        return <li {...attributes}>{children}</li>;\n      case 'numbered-list':\n        return (\n          <ol {...attributes} className=\"list-decimal pl-5\">\n            {children}\n          </ol>\n        );\n      case 'image':\n        if (attributes && 'imageFileId' in attributes && imageDrive) {\n          return (\n            <Image\n              targetDrive={imageDrive}\n              fileId={attributes.imageFileId as string}\n              className=\"my-4 max-w-md\"\n            />\n          );\n        }\n        return <></>;\n      case 'link-button':\n        if (attributes && 'linkText' in attributes && attributes && 'uri' in attributes) {\n          return (\n            <div className=\"flex \">\n              <ActionLink\n                className=\"my-2 w-auto rounded-md bg-gray-500 px-3 py-2 text-left\"\n                href={attributes.uri as string}\n                type=\"secondary\"\n              >\n                {attributes.linkText as string}\n              </ActionLink>\n            </div>\n          );\n        }\n        return <></>;\n      default:\n        return (\n          <p {...attributes} className=\"mb-3\">\n            {children}\n          </p>\n        );\n    }\n  };\n\n  return (\n    <div>\n      {body.map((element, index) => {\n        return <React.Fragment key={index}>{render(element)}</React.Fragment>;\n      })}\n    </div>\n  );\n};\n\nexport default RichTextRenderer;\n","import { ChannelDefinition, PostContent, PostFile } from '@youfoundation/dotyoucore-js';\nimport { t } from '../../../../helpers/i18n/dictionary';\nimport useBlogPosts from '../../../../hooks/blog/useBlogPosts';\nimport { ChannelDefinitionVm } from '../../../../hooks/blog/useChannels';\nimport PostTeaser from '../Card/PostTeaser';\n\nconst relatedBlogs = ({\n  blog,\n  channel,\n}: {\n  blog: PostFile<PostContent>;\n  channel: ChannelDefinitionVm | ChannelDefinition | undefined;\n}) => {\n  const { data: blogPosts } = useBlogPosts(\n    channel ? { channelId: channel.channelId, postType: 'Article' } : {}\n  );\n\n  if (!blogPosts) {\n    return <></>;\n  }\n\n  const filteredBlogPosts = blogPosts\n    .slice(0, 4)\n    .filter((relatedBlog) => relatedBlog.content.id !== blog.content.id)\n    .slice(0, 3);\n\n  return (\n    <section className=\"mt-10 bg-slate-50 pt-16 pb-10 dark:bg-slate-800 dark:bg-opacity-50\">\n      <div className=\"container mx-auto px-5\">\n        <h2 className=\"mb-10 text-2xl \">\n          {t('Latest posts')} {channel && <small>| {channel.name}</small>}\n        </h2>\n        <div className=\"-m-1 flex flex-row flex-wrap\">\n          {filteredBlogPosts.map((postFile) => {\n            return (\n              <PostTeaser\n                postFile={postFile}\n                key={postFile.content.id}\n                className={`p-1 sm:w-1/2 md:w-1/3`}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default relatedBlogs;\n","import { Article, getChannelDrive, Image as ImageType } from '@youfoundation/dotyoucore-js';\nimport { Link, useParams } from 'react-router-dom';\nimport useBlog from '../../../hooks/blog/useBlog';\nimport Image from '../../../components/Image/Image';\nimport RichTextRenderer from '../../../components/RichTextRenderer/RichTextRenderer';\nimport RelatedBlogs from '../../../components/Blog/Common/RelatedBlogs/RelatedBlogs';\nimport { Helmet } from 'react-helmet-async';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Triangle from '../../../components/ui/Icons/Triangle/Triangle';\nimport LoadingParagraph from '../../../components/ui/LoadingParagraph/LoadingParagraph';\nimport PostMeta from '../../../components/Blog/Common/Blocks/Meta/Meta';\nimport ImageGallery from '../../../components/Blog/Common/Blocks/ImageGallery/ImageGallery';\n\nconst BlogDetail = () => {\n  const { channelKey, postKey } = useParams();\n  const { data: postData, isLoading: postDataLoading } = useBlog(\n    channelKey && postKey\n      ? {\n          channelSlug: channelKey,\n          blogSlug: postKey,\n        }\n      : undefined\n  );\n\n  if (!postData && !postDataLoading) {\n    return (\n      <section className=\"py-5\">\n        <div className=\"container mx-auto mb-10 px-5\">{t('No post found')}</div>\n      </section>\n    );\n  }\n\n  const post = postData?.activeBlog.content;\n  const channel = postData?.activeChannel;\n\n  const imageFileIds = (post as ImageType)?.imageFileIds;\n\n  return (\n    <>\n      <Helmet>\n        <title>{post?.caption ?? ''} | Youniverse</title>\n      </Helmet>\n\n      <section className=\"py-5\">\n        <div className=\"container mx-auto mb-10 px-5\">\n          <div className=\"max-w-3xl lg:w-2/3\">\n            <div className=\"mb-5 flex w-full flex-col\">\n              <div className=\"flex flex-row flex-wrap pb-2 text-gray-500\">\n                {!post ? (\n                  <LoadingParagraph className=\"mb-2 h-8 w-full max-w-xs\" />\n                ) : (\n                  <>\n                    {post.type === 'Article' && (post as Article)?.readingTimeStats && (\n                      <>\n                        <p className=\"title-font text-sm font-medium\">\n                          {Math.ceil((post as Article)?.readingTimeStats?.minutes ?? 0)}\n                          {t('min read')}\n                        </p>\n                        <span className=\"px-2 leading-4\">·</span>\n                      </>\n                    )}\n                    {post && channel ? (\n                      <PostMeta post={post} channel={channel} size=\"text-sm\" />\n                    ) : null}\n                  </>\n                )}\n              </div>\n              {!post ? (\n                <LoadingParagraph className=\"h-8 w-full max-w-xs\" />\n              ) : (\n                <h1 className=\"title-font mb-4 text-2xl font-medium sm:text-3xl\">{post.caption}</h1>\n              )}\n            </div>\n\n            {post?.primaryImageFileId ? (\n              imageFileIds && imageFileIds.length > 1 ? (\n                <ImageGallery\n                  channelId={post.channelId}\n                  fileIds={imageFileIds}\n                  className=\"my-4\"\n                  maxVisible={4}\n                  postUrl={window.location.pathname}\n                />\n              ) : (\n                <div className=\"relative mb-5 sm:w-full\">\n                  <Link to=\"0\">\n                    <Image\n                      className=\"rounded object-cover object-center\"\n                      fileId={post.primaryImageFileId}\n                      targetDrive={getChannelDrive(post.channelId)}\n                      alt=\"blog\"\n                      previewThumbnail={postData?.activeBlog.previewThumbnail}\n                    />\n                  </Link>\n                  {post.type === 'Video' && (\n                    <Triangle className=\"absolute top-[calc(50%-2.5rem)] left-[calc(50%-2.5rem)] h-20 w-20 text-white\" />\n                  )}\n                </div>\n              )\n            ) : null}\n\n            {post?.type === 'Article' ? (\n              <p className=\"mb-5 text-base leading-relaxed text-gray-500\">\n                {(post as Article)?.abstract}\n              </p>\n            ) : null}\n\n            {!post ? (\n              <>\n                <LoadingParagraph className=\"mb-2 h-4 w-full\" />\n                <LoadingParagraph className=\"mb-2 h-4 w-full\" />\n                <LoadingParagraph className=\"mb-2 h-4 w-full\" />\n                <LoadingParagraph className=\"mb-2 h-4 w-full\" />\n                <LoadingParagraph className=\"mb-2 h-4 w-full\" />\n              </>\n            ) : (\n              <>\n                {post.type === 'Article' && (\n                  <div className=\"rich-text-content mb-5 leading-relaxed\">\n                    <RichTextRenderer\n                      body={(post as Article)?.body}\n                      imageDrive={getChannelDrive(post.channelId)}\n                    />\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </section>\n      {postData?.activeBlog?.content?.type === 'Article' && (\n        <RelatedBlogs blog={postData?.activeBlog} channel={channel} />\n      )}\n    </>\n  );\n};\n\nexport default BlogDetail;\n"],"names":["dotYouId","post","channel","className","size","now","Date","date","dateUnixTime","format","month","day","year","getFullYear","undefined","hour","minute","toLocaleDateString","href","slug","name","postFile","content","previewThumbnail","isSingleCol","hideImageWhenNone","showChannel","useChannel","channelId","data","to","primaryImageFileId","type","fileId","targetDrive","getChannelDrive","alt","fit","caption","ellipsisAtMaxChar","abstract","length","t","children","title","onClick","icon","download","Icon","props","fill","colorClasses","widthClasses","indexOf","sizeClasses","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","xmlns","channelSlug","blogSlug","useAuth","getSharedSecret","getApiType","client","PublicClient","api","sharedSecret","fetchBlog","blogPostReadonlyProvider","getPostBySlug","getChannelDefinitionBySlug","getPost","activeBlog","activeChannel","useQuery","refetchOnMount","refetchOnWindowFocus","staleTime","Infinity","enabled","postType","pageSize","fetchBlogData","fileReadOnlyProvider","GetFile","fileData","has","foundBlogPosts","get","map","entry","payload","header","fileMetadata","appData","filter","getPosts","postTypeToTag","toString","results","keys","sort","a","b","getRecentPosts","id","isDraft","slice","onError","er","console","log","parseChannelTemplate","templateId","parseInt","ChannelTemplate","fetchChannelData","channels","forEach","entries","possibleChannel","fileType","BlogConfig","getChannels","template","body","imageDrive","render","node","renderLeaf","text","attributes","renderElement","childNode","index","leaf","bold","code","italic","underline","Image","imageFileId","ActionLink","uri","linkText","element","blog","blogPosts","useBlogPosts","filteredBlogPosts","relatedBlog","PostTeaser","useParams","channelKey","postKey","useBlog","postData","postDataLoading","isLoading","imageFileIds","readingTimeStats","Math","ceil","minutes","LoadingParagraph","ImageGallery","fileIds","maxVisible","postUrl","window","location","pathname","Triangle","RelatedBlogs"],"sourceRoot":""}