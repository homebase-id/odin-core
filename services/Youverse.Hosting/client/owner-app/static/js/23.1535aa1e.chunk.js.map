{"version":3,"file":"static/js/23.1535aa1e.chunk.js","mappings":"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","sources":["components/PermissionViews/DrivePermissionRequestView/DrivePermissionRequestView.tsx","templates/RegisterAppClient/RegisterAppClient.tsx"],"sourcesContent":["import { t } from '../../../helpers/i18n/dictionary';\nimport useDrive from '../../../hooks/drives/useDrive';\nimport { DriveGrantRequest } from '../../../provider/app/AppManagementProviderTypes';\nimport { drivePermissionLevels } from '../../../provider/permission/permissionLevels';\nimport HardDrive from '../../ui/Icons/HardDrive/HardDrive';\nimport { getAccessFromPermissionNumber } from '../../../templates/DemoData/helpers';\n\nconst DrivePermissionRequestView = ({\n  driveGrant,\n  permissionTree,\n  className,\n}: {\n  driveGrant: DriveGrantRequest;\n  permissionTree?: string;\n  className?: string;\n}) => {\n  const { data: drive } = useDrive({ targetDrive: driveGrant.permissionedDrive.drive }).fetch;\n\n  return (\n    <div\n      key={`${driveGrant.permissionedDrive.drive.alias}-${driveGrant.permissionedDrive.drive.type}`}\n      className={`flex flex-row ${className}`}\n      title={permissionTree}\n    >\n      <HardDrive className=\"mt-1 mb-auto mr-3 h-6 w-6\" />\n      <div className=\"flex flex-col\">\n        <p className={`leading-none ${!permissionTree ? 'my-auto' : ''}`}>\n          {drive?.name ?? `${t('New')} ${driveGrant.driveMeta?.name}`}:{' '}\n          {\n            getAccessFromPermissionNumber(\n              driveGrant.permissionedDrive.permission,\n              drivePermissionLevels\n            ).name\n          }\n        </p>\n        {permissionTree && <small className=\"ml-1\">{permissionTree}</small>}\n      </div>\n    </div>\n  );\n};\n\nexport default DrivePermissionRequestView;\n","import { DriveGrantRequest, PermissionSet } from '../../provider/app/AppManagementProviderTypes';\nimport useApp from '../../hooks/apps/useApp';\nimport ActionButton, { mergeStates } from '../../components/ui/Buttons/ActionButton';\nimport Section from '../../components/ui/Sections/Section';\n\nimport PermissionView from '../../components/PermissionViews/PermissionView/PermissionView';\nimport DrivePermissionView from '../../components/PermissionViews/DrivePermissionView/DrivePermissionView';\nimport DrivePermissionRequestView from '../../components/PermissionViews/DrivePermissionRequestView/DrivePermissionRequestView';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport ErrorNotification from '../../components/ui/Alerts/ErrorNotification/ErrorNotification';\n\n// https://frodo.digital/owner/appreg?n=Chatr&appId=0babb1e6-7604-4bcd-b1fb-87e959226492&fn=My%20Phone&p=10,30&d=%5B%7B%22a%22%3A%22cba55219000000000000ab28c780d323%22%2C%22t%22%3A%22c92698d7000000000000844429923b13%22%2C%22n%22%3A%22Chat%20Drive%22%2C%22d%22%3A%22Chat%20Drive%22%2C%22p%22%3A5%7D%2C%7B%22a%22%3A%222612429d1c3f037282b8d42fb2cc0499%22%2C%22t%22%3A%2270e92f0f94d05f5c7dcd36466094f3a5%22%2C%22n%22%3A%22Contacts%22%2C%22d%22%3A%22Contacts%22%2C%22p%22%3A5%7D%5D&ui=minimal&return=odin-chat://&pk=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtP9KKODoOZpNGXQy4IdyyBJJO3HJPkbg%2FLXwR5SQGxWWuLpv2THnZoSHqaDl6YWQ3OWCndY22Q0RJZkDBuqqJyn%2B8ErpMdgtJuMhFOpEU2h9nLGeI7BIWENkuqlqBh56YC8qdfYhfpdcv53p106o%2Bi93%2Bzeb0GvfLN6fk1y8o4Rd56DBHXn9zjjDaLWa8m8EDXgZKs7waziPFArIphh0W06Wnb4wCa%2F%2B1HEULhH%2BsIY7bGpoQvgP7xucHZGrqkRmg5X2XhleBIXWYCD7QUM6PvKHdqUSrFkl9Z2UU1SkVAhUUH4UxfwyLQKHXxC7IhKu2VSOXK4%2FkjGua6iW%2BXUQtwIDAQAB\n\n// encodeURIComponent(\n//   JSON.stringify([\n//     {\n//       a: 'cba55219000000000000ab28c780d323',\n//       t: 'c92698d7000000000000844429923b13',\n//       n: 'Chat Drive',\n//       d: 'Chat Drive',\n//       p: 5,\n//     },\n//     {\n//       a: '2612429d1c3f037282b8d42fb2cc0499',\n//       t: '70e92f0f94d05f5c7dcd36466094f3a5',\n//       n: 'Contacts',\n//       d: 'Contacts',\n//       p: 5,\n//     },\n//   ])\n// );\n\n/*\n * incoming parameters:\n *   values on AppClientRegistrationRequest\n *\n *   Required Drive Creation Specs\n *     Alias\n *     Type\n *     Name\n *\n *   Required Permissions\n *     i.e. can create circles, etc.\n */\n\n/*\n * screen shows app reg details\n *   if registered, allow to register the client\n *   if not registered, give option to register app\n *\n *   selection of permissions and drives\n *\n * Save Registration Process\n * 1. Save registration for appid + device friendly name\n *  + Create drives that are needed (and approved)\n * 2. After registration is complete:\n *   - RSA encrypt CAT using public key\n * 3. 302 redirect to return url + RSA_encrypte\n */\n\nconst RegisterAppClient = () => {\n  const [searchParams] = useSearchParams();\n\n  const appId = searchParams.get('appId');\n  const name = searchParams.get('n');\n  const permissionKeys = searchParams.get('p');\n  const publicKey64 = searchParams.get('pk');\n  const friendlyName = searchParams.get('fn');\n  const returnUrl = searchParams.get('return');\n\n  const drivesParam = searchParams.get('d');\n  let driveGrants: DriveGrantRequest[];\n\n  try {\n    const drivesParamObject = drivesParam && JSON.parse(drivesParam);\n    driveGrants = (Array.isArray(drivesParamObject) ? drivesParamObject : [drivesParamObject]).map(\n      (d) => {\n        return {\n          permissionedDrive: {\n            drive: {\n              alias: d.a,\n              type: d.t,\n            },\n            permission: parseInt(d.p),\n          },\n          driveMeta: {\n            name: d.n,\n            description: d.d,\n          },\n        };\n      }\n    );\n  } catch (ex) {\n    console.error(ex);\n    return <div>Bad request</div>;\n  }\n\n  if (!appId || !name || !publicKey64 || !friendlyName || !returnUrl) {\n    console.error(\n      'Any of the following required params was not found in the url: appId, name, publicKey64, friendlyName, returnUrl'\n    );\n    return <div>Bad request</div>;\n  }\n\n  const {\n    fetch: { data: appRegistration, isLoading: appRegIsLoading },\n    registerNewApp: { mutateAsync: registerApp, status: registerAppState, error: registerAppError },\n    registerNewAppClient: {\n      mutateAsync: registerAppClient,\n      status: registerAppClientState,\n      error: regsiterClientError,\n    },\n  } = useApp({ appId });\n\n  const [finalUrl, setFinalUrl] = useState<string | null>();\n\n  const chatPermissionSet: PermissionSet = {\n    keys: permissionKeys?.split(',').map((str) => parseInt(str)) ?? [],\n  };\n\n  const doRegisterApp = async () => {\n    await registerApp({\n      appId: appId,\n      name: name,\n      permissionSet: chatPermissionSet,\n      driveGrants: driveGrants,\n    });\n\n    await doRegisterClient();\n  };\n\n  const doRegisterClient = async () => {\n    const clientRegistrationResponse = await registerAppClient({\n      appId: appId,\n      clientPublicKey64: publicKey64,\n      clientFriendlyName: friendlyName,\n    });\n\n    const encodedData = encodeURI(clientRegistrationResponse.data);\n    const url = `${returnUrl}d=${encodedData}&v=${clientRegistrationResponse.encryptionVersion}`;\n\n    console.log(url);\n    setFinalUrl(url);\n  };\n\n  if (appRegIsLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <ErrorNotification error={registerAppError} />\n      <ErrorNotification error={regsiterClientError} />\n\n      <section className=\"my-20\">\n        <div className=\"container mx-auto\">\n          <div className=\"max-w-[35rem]\">\n            {!appRegistration ? (\n              <>\n                <h1 className=\"mb-5 text-4xl dark:text-white\">\n                  Registering app: {name} <small className=\"block\">client: {friendlyName}</small>\n                </h1>\n                <p>The app {name} is not registered on your identity.</p>\n                <p className=\"mt-2\">\n                  By registering this app, \"{name}\" will have the following access on your identity\n                  and the following drives:\n                </p>\n                <Section isOpaqueBg={true}>\n                  <div className=\"-my-4\">\n                    {chatPermissionSet.keys.map((permissionLevel) => {\n                      return (\n                        <PermissionView\n                          key={`${permissionLevel}`}\n                          permission={permissionLevel}\n                          className=\"my-4\"\n                        />\n                      );\n                    })}\n                  </div>\n                </Section>\n                <Section isOpaqueBg={true}>\n                  <div className=\"-my-4\">\n                    {driveGrants.map((grant) => {\n                      return (\n                        <DrivePermissionRequestView\n                          key={`${grant.permissionedDrive.drive.alias}-${grant.permissionedDrive.drive.type}`}\n                          driveGrant={grant}\n                          className=\"my-4\"\n                        />\n                      );\n                    })}\n                  </div>\n                </Section>\n\n                <div className=\"-sm:mx-2 mt-10 sm:flex sm:flex-row-reverse\">\n                  <ActionButton\n                    onClick={doRegisterApp}\n                    className=\"my-3 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none sm:mx-2 sm:my-auto\"\n                    state={mergeStates(registerAppState, registerAppClientState)}\n                  >\n                    Allow access and Register {name}\n                  </ActionButton>\n                  <ActionButton className=\"my-3 sm:mx-2 sm:my-auto\" type=\"secondary\">\n                    Cancel\n                  </ActionButton>\n                </div>\n              </>\n            ) : (\n              <>\n                {!finalUrl ? (\n                  <>\n                    <h1 className=\"mb-5 text-4xl dark:text-white\">\n                      Register client: {friendlyName}\n                    </h1>\n                    <p>The app {name} is registered on your identity.</p>\n                    <p className=\"mt-2\">\n                      It has the following access on your identity and the following drives:\n                    </p>\n                  </>\n                ) : (\n                  <>\n                    <h1 className=\"mb-5 text-4xl dark:text-white\">\n                      Scucessfully registered client: {friendlyName} on app: {name}\n                    </h1>\n                  </>\n                )}\n                {appRegistration.grant.permissionSet?.keys ? (\n                  <Section isOpaqueBg={true}>\n                    <div className=\"-my-4\">\n                      {appRegistration.grant.permissionSet.keys.map((permissionLevel) => {\n                        return (\n                          <PermissionView\n                            key={`${permissionLevel}`}\n                            permission={permissionLevel}\n                            className=\"my-4\"\n                          />\n                        );\n                      })}\n                    </div>\n                  </Section>\n                ) : null}\n                {appRegistration.grant?.driveGrants ? (\n                  <Section isOpaqueBg={true}>\n                    <div className=\"-my-4\">\n                      {appRegistration.grant.driveGrants.map((grant) => {\n                        return (\n                          <DrivePermissionView\n                            key={`${grant.permissionedDrive.drive.alias}-${grant.permissionedDrive.drive.type}`}\n                            driveGrant={grant}\n                            className=\"my-4\"\n                          />\n                        );\n                      })}\n                    </div>\n                  </Section>\n                ) : null}\n\n                {!finalUrl ? (\n                  <div className=\"flex flex-row justify-end\">\n                    <ActionButton\n                      onClick={doRegisterClient}\n                      className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\"\n                      state={registerAppClientState}\n                    >\n                      Register {friendlyName}\n                    </ActionButton>\n                  </div>\n                ) : (\n                  <>\n                    Url:\n                    <div className=\"overflow-x-scroll whitespace-nowrap\">{finalUrl}</div>\n                    <div className=\"flex flex-row justify-end\">\n                      <ActionButton\n                        onClick={() => {\n                          window.location.href = finalUrl;\n                        }}\n                        className=\"mt-10 block rounded border-0 bg-green-500 py-2 px-4 text-white hover:bg-green-600 focus:outline-none\"\n                        state={registerAppClientState}\n                      >\n                        Back to {name}\n                      </ActionButton>\n                    </div>\n                  </>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default RegisterAppClient;\n"],"names":["driveGrant","permissionTree","className","drive","useDrive","targetDrive","permissionedDrive","fetch","data","title","HardDrive","name","t","driveMeta","getAccessFromPermissionNumber","permission","drivePermissionLevels","alias","type","driveGrants","useSearchParams","searchParams","appId","get","permissionKeys","publicKey64","friendlyName","returnUrl","drivesParam","drivesParamObject","JSON","parse","Array","isArray","map","d","a","parseInt","p","n","description","ex","console","error","useApp","appRegistration","appRegIsLoading","isLoading","registerNewApp","registerApp","mutateAsync","registerAppState","status","registerAppError","registerNewAppClient","registerAppClient","registerAppClientState","regsiterClientError","useState","finalUrl","setFinalUrl","chatPermissionSet","keys","split","str","doRegisterApp","permissionSet","doRegisterClient","clientPublicKey64","clientFriendlyName","clientRegistrationResponse","encodedData","encodeURI","url","encryptionVersion","log","ErrorNotification","grant","Section","isOpaqueBg","permissionLevel","PermissionView","DrivePermissionView","ActionButton","onClick","window","location","href","state","mergeStates"],"sourceRoot":""}