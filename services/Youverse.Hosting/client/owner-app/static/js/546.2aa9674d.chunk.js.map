{"version":3,"file":"static/js/546.2aa9674d.chunk.js","mappings":"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","sources":["components/Dialog/ProfileDialog/ProfileDialog.tsx","components/Form/Textarea.tsx","components/ui/Buttons/SaveStatus.tsx","components/ui/Layout/PageMeta/PageMeta.tsx","hooks/profiles/useProfiles.ts","templates/Profiles/Profiles/Profiles.tsx"],"sourcesContent":["import { ProfileDefinition } from '@youfoundation/dotyoucore-js';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport useProfiles from '../../../hooks/profiles/useProfiles';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport Input from '../../Form/Input';\nimport Label from '../../Form/Label';\nimport Textarea from '../../Form/Textarea';\nimport DialogWrapper from '../../ui/Dialog/DialogWrapper';\n\nconst ProfileDialog = ({\n  title,\n  confirmText,\n  isOpen,\n  defaultValue,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n  defaultValue?: ProfileDefinition;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const {\n    mutateAsync: saveProfileDefinition,\n    status: saveProfileDefinitionStatus,\n    error: saveProfileError,\n  } = useProfiles().saveProfile;\n\n  const [newProfileDef, setNewProfileDef] = useState<ProfileDefinition>({\n    ...defaultValue,\n  });\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper title={title} onClose={onCancel}>\n      <>\n        <ErrorNotification error={saveProfileError} />\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            await saveProfileDefinition(newProfileDef);\n            onConfirm();\n\n            return false;\n          }}\n        >\n          <div className=\"mb-5\">\n            <Label htmlFor=\"name\">{t('Name')}</Label>\n            <Input\n              id=\"name\"\n              name=\"profileName\"\n              defaultValue={newProfileDef.name}\n              onChange={(e) => {\n                setNewProfileDef({ ...newProfileDef, name: e.target.value });\n              }}\n              required\n            />\n          </div>\n          <div className=\"mb-5\">\n            <Label htmlFor=\"name\">{t('Description')}</Label>\n            <Textarea\n              id=\"description\"\n              name=\"profileDescription\"\n              defaultValue={newProfileDef.description}\n              onChange={(e) => {\n                setNewProfileDef({ ...newProfileDef, description: e.target.value });\n              }}\n              required\n            />\n          </div>\n\n          <div className=\"-m-2 flex flex-row-reverse py-3\">\n            <ActionButton className=\"m-2\" state={saveProfileDefinitionStatus} icon={'send'}>\n              {confirmText || t('Add Profile')}\n            </ActionButton>\n            <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n              {t('Cancel')}\n            </ActionButton>\n          </div>\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default ProfileDialog;\n","const Textarea = (\n  props: React.DetailedHTMLProps<\n    React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >\n) => {\n  return (\n    <textarea\n      {...props}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    />\n  );\n};\n\nexport default Textarea;\n","import { useEffect, useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Alert from '../Alerts/Alert/Alert';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n  error,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n  error?: unknown;\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (state === 'loading') {\n    return <p className={`${className} text-sm`}>Saving...</p>;\n  }\n\n  if (state === 'error') {\n    return (\n      <Alert type=\"critical\" className={className}>\n        {error instanceof Error ? error.message : t('Something went wrong')}\n      </Alert>\n    );\n  }\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { FC, ReactNode } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n  breadCrumbs,\n  icon,\n}: {\n  title?: ReactNode | string;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n  breadCrumbs?: { title: string; href?: string }[];\n  icon?: FC;\n}) => {\n  return (\n    <section\n      className=\"-mx-5 -mt-4 mb-10 border-b-2 border-gray-100 bg-slate-50 py-4 pr-5 pl-10 dark:border-gray-700 dark:bg-slate-800 sm:-mx-10\n    sm:-mt-8 sm:py-8 sm:px-10\"\n    >\n      <div className=\"flex flex-col sm:flex-row\">\n        <div className=\"flex-col\">\n          {breadCrumbs && (\n            <ul className=\"mb-2 hidden flex-row sm:flex\">\n              {breadCrumbs.map((crumb, index) => {\n                return (\n                  <li key={index} className=\"mr-2\">\n                    {crumb.href ? (\n                      <Link to={crumb.href} className=\"\">\n                        {crumb.title}\n                        <span className=\"ml-2\">{'>'}</span>\n                      </Link>\n                    ) : (\n                      <span className=\"text-slate-500\">{crumb.title}</span>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {title && (\n            <>\n              <h1 className=\"mb-5 flex flex-row text-4xl dark:text-white\">\n                {icon && icon({ className: 'h-8 w-8 my-auto mr-4' })} {title}\n              </h1>\n              <Helmet>\n                <title>\n                  {(typeof title !== 'object' && `${title}`) ||\n                    window.location.pathname.split('/').pop()}{' '}\n                  | Owner console\n                </title>\n              </Helmet>\n            </>\n          )}\n        </div>\n        <div className=\"ml-auto\">\n          <div className=\"-m-2 flex flex-col flex-wrap justify-end sm:flex-row sm:items-center\">\n            {actions}\n          </div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ApiType, Client, ProfileDefinition } from '@youfoundation/dotyoucore-js';\nimport { convertTextToSlug } from '../../helpers/common';\nimport useAuth from '../auth/useAuth';\n\nexport interface ProfileDefinitionVm extends ProfileDefinition {\n  slug: string;\n}\n\nconst useProfiles = () => {\n  const queryClient = useQueryClient();\n  const { getSharedSecret } = useAuth();\n  const client = new Client({ api: ApiType.Owner, sharedSecret: getSharedSecret() });\n\n  const fetchAll = async () => {\n    const definitions = await (\n      await client.profileDefinitionProvider.getProfileDefinitions()\n    ).map((def) => {\n      return {\n        ...def,\n        slug: convertTextToSlug(def.name),\n      } as ProfileDefinitionVm;\n    });\n\n    return definitions;\n  };\n\n  const saveProfile = async (profileDef: ProfileDefinition) => {\n    return await client.profileDefinitionProvider.saveProfileDefinition(profileDef);\n  };\n\n  return {\n    fetchProfiles: useQuery(['profiles'], () => fetchAll(), {\n      refetchOnWindowFocus: false,\n      retry: false,\n    }),\n    saveProfile: useMutation(saveProfile, {\n      onMutate: async (newProfile) => {\n        await queryClient.cancelQueries(['profiles']);\n\n        const previousProfiles: ProfileDefinitionVm[] = queryClient.getQueryData(['profiles']);\n        const newProfiles = previousProfiles?.map((profile) =>\n          profile.profileId === newProfile.profileId\n            ? ({ ...newProfile, slug: convertTextToSlug(newProfile.name) } as ProfileDefinitionVm)\n            : profile\n        );\n\n        queryClient.setQueryData(['profiles'], newProfiles);\n\n        return { previousProfiles, newProfile };\n      },\n      onError: (err, newProfile, context) => {\n        console.error(err);\n\n        queryClient.setQueryData(['profiles'], context.previousProfiles);\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['profiles']);\n      },\n    }),\n  };\n};\n\nexport default useProfiles;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useProfiles, { ProfileDefinitionVm } from '../../../hooks/profiles/useProfiles';\nimport ActionButton from '../../../components/ui/Buttons/ActionButton';\nimport ProfileDialog from '../../../components/Dialog/ProfileDialog/ProfileDialog';\nimport Heart from '../../../components/ui/Icons/Heart/Heart';\nimport PageMeta from '../../../components/ui/Layout/PageMeta/PageMeta';\nimport LoadingParagraph from '../../../components/ui/Loaders/LoadingParagraph/LoadingParagraph';\n\nconst Profiles = () => {\n  const { data: profiles, isLoading } = useProfiles().fetchProfiles;\n  const [isOpenCreate, setIsOpenCreate] = useState(false);\n\n  return (\n    <>\n      <section>\n        <PageMeta\n          icon={Heart}\n          title={t('My Profiles')}\n          actions={\n            <>\n              <ActionButton icon=\"plus\" onClick={() => setIsOpenCreate(true)} className=\"m-2\">\n                {t('Add Profile')}\n              </ActionButton>\n            </>\n          }\n        />\n        {isLoading ? (\n          <div className=\"-m-2 flex\">\n            <LoadingParagraph className=\"m-2 h-10 w-1/4\" />\n            <LoadingParagraph className=\"m-2 h-10 w-1/4\" />\n          </div>\n        ) : (\n          <div className=\"-m-2 flex flex-row flex-wrap items-stretch\">\n            {profiles?.map((definition) => {\n              return (\n                <div className=\"w-full p-2 md:w-1/4\" key={definition.name}>\n                  <ProfileDefinitionCard profileDef={definition} />\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </section>\n      <ProfileDialog\n        isOpen={isOpenCreate}\n        title={t('New Profile')}\n        onCancel={() => {\n          setIsOpenCreate(false);\n        }}\n        onConfirm={() => {\n          setIsOpenCreate(false);\n        }}\n      />\n    </>\n  );\n};\n\nconst ProfileDefinitionCard = ({ profileDef }: { profileDef: ProfileDefinitionVm }) => {\n  return (\n    <Link\n      to={profileDef.slug}\n      className=\"block h-full rounded-md border-[1px] border-gray-200 border-opacity-60 bg-white transition-colors hover:shadow-md dark:border-gray-800 dark:bg-gray-800 hover:dark:shadow-slate-600\"\n    >\n      <h2 className=\"bg-slate-100 p-4 text-xl dark:bg-slate-700 dark:text-slate-200\">\n        {profileDef.name}\n      </h2>\n      <div className=\"p-4\">\n        <p>{profileDef.description}</p>\n      </div>\n    </Link>\n  );\n};\n\nexport default Profiles;\n"],"names":["title","confirmText","isOpen","defaultValue","onConfirm","onCancel","target","usePortal","useProfiles","saveProfile","saveProfileDefinition","mutateAsync","saveProfileDefinitionStatus","status","saveProfileError","error","useState","newProfileDef","setNewProfileDef","dialog","onClose","onSubmit","e","preventDefault","className","htmlFor","t","id","name","onChange","value","required","description","state","icon","type","onClick","createPortal","props","lastSave","setLastSave","Date","now","setNow","useEffect","timer","setTimeout","clearTimeout","Error","message","diff","getTime","text","toLocaleString","actions","saveStatus","breadCrumbs","map","crumb","index","href","to","window","location","pathname","split","pop","queryClient","useQueryClient","getSharedSecret","useAuth","client","Client","api","ApiType","sharedSecret","fetchAll","profileDefinitionProvider","getProfileDefinitions","def","slug","convertTextToSlug","definitions","profileDef","fetchProfiles","useQuery","refetchOnWindowFocus","retry","useMutation","onMutate","newProfile","cancelQueries","previousProfiles","getQueryData","newProfiles","profile","profileId","setQueryData","onError","err","context","console","onSettled","invalidateQueries","ProfileDefinitionCard","profiles","data","isLoading","isOpenCreate","setIsOpenCreate","Heart","definition"],"sourceRoot":""}