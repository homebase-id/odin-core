{"version":3,"file":"static/js/362.0ee2d5e8.chunk.js","mappings":"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","sources":["components/Connection/PersonCard/PersonCard.tsx","components/Connection/PersonIncomingRequest/PersonIncomingRequest.tsx","components/Image/Image.tsx","components/PermissionViews/AppPermissionView/AppPermissionView.tsx","hooks/apps/useApps.ts","hooks/intersection/useIntersection.ts","provider/app/AppManagementProvider.ts","components/HomePageTeaser/HomePageTeaser.tsx","templates/Home/Home.tsx"],"sourcesContent":["import { ReactNode } from 'react';\n\nimport PendingConnectionImage from '../PendingConnectionImage/PendingConnectionImage';\n\nexport interface PersonCardProps {\n  dotYouId: string;\n  href?: string;\n  isChecked?: boolean;\n  className: string;\n  children?: ReactNode;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n  onlyLoadAfterClick?: boolean;\n}\n\nconst PersonCard = ({\n  dotYouId,\n  href,\n  isChecked,\n  className,\n  children,\n  onClick,\n  onlyLoadAfterClick,\n}: PersonCardProps) => {\n  return (\n    <a className={`${className}`} href={href}>\n      <div\n        className={`h-full rounded-md border bg-white transition-colors  ${\n          isChecked\n            ? 'border-4 border-indigo-500 dark:border-indigo-700'\n            : isChecked === false\n            ? 'border-4'\n            : 'border-gray-200 border-opacity-60 dark:border-gray-800 dark:bg-gray-800'\n        }\n        ${href ? 'cursor-pointer hover:shadow-md hover:dark:shadow-slate-600' : ''}`}\n        onClick={onClick}\n      >\n        <PendingConnectionImage dotYouId={dotYouId} onlyLoadAfterClick={onlyLoadAfterClick} />\n        <div className=\"p-2\">{children}</div>\n      </div>\n    </a>\n  );\n};\n\nexport default PersonCard;\n","import { ReactNode, useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useConnection from '../../../hooks/connections/useConnection';\nimport useSettings from '../../../hooks/settings/useSettings';\nimport { ConnectionRequest } from '../../../provider/connections/CircleDataTypes';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport CharacterHighlighter from '../../ui/CharacterHighlighter/CharacterHighlighter';\nimport IncomingConnectionDialog from '../../Dialog/ConnectionDialogs/IncomingConnectionDialog';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonIncomingRequest = ({\n  senderDotYouId,\n  pendingConnection,\n  children,\n  className,\n}: {\n  senderDotYouId: string;\n  pendingConnection: ConnectionRequest;\n  children?: ReactNode;\n  className: string;\n}) => {\n  const {\n    ignoreRequest: { mutateAsync: ignoreRequest, status: ignoreRequestStatus, error: ignoreError },\n  } = useConnection({});\n  const { data: uiSettings } = useSettings().fetchUiSettings;\n  const [isAcceptDialogOpen, setIsAcceptDialogOpen] = useState(false);\n\n  return (\n    <>\n      <ErrorNotification error={ignoreError} />\n      <PersonCard\n        className={className}\n        dotYouId={senderDotYouId}\n        key={senderDotYouId}\n        onlyLoadAfterClick={!uiSettings?.automaticallyLoadProfilePicture}\n      >\n        <h2 className=\"font-thiner mb-6 dark:text-white\">\n          <CharacterHighlighter>{senderDotYouId}</CharacterHighlighter>\n        </h2>\n        {children}\n        <ActionButton\n          type=\"primary\"\n          className=\"mb-2 w-full\"\n          onClick={(e) => {\n            e.preventDefault();\n            setIsAcceptDialogOpen(true);\n            return false;\n          }}\n          icon=\"check\"\n        >\n          {t('Confirm request')}...\n        </ActionButton>\n        <ActionButton\n          type=\"secondary\"\n          className=\"mb-2 w-full\"\n          onClick={async (e) => {\n            e.preventDefault();\n            await ignoreRequest({ senderDotYouId: senderDotYouId });\n\n            return false;\n          }}\n          confirmOptions={{\n            title: t('Ignore request'),\n            body: `${t('Are you sure you want to ignore the request from')} ${senderDotYouId}`,\n            buttonText: t('Ignore'),\n          }}\n          state={ignoreRequestStatus}\n          icon=\"times\"\n        >\n          {t('Ignore request')}\n        </ActionButton>\n      </PersonCard>\n      <IncomingConnectionDialog\n        isOpen={isAcceptDialogOpen}\n        senderDotYouId={senderDotYouId}\n        confirmText={t('Connect')}\n        onConfirm={async () => {\n          setIsAcceptDialogOpen(false);\n        }}\n        onCancel={() => {\n          setIsAcceptDialogOpen(false);\n        }}\n        pendingConnection={pendingConnection}\n      />\n    </>\n  );\n};\n\nexport default PersonIncomingRequest;\n","import { TargetDrive } from '@youfoundation/dotyoucore-js';\nimport { useRef, useState } from 'react';\nimport { useIntersection } from '../../hooks/intersection/useIntersection';\nimport useImage from '../../hooks/media/useImage';\n\ninterface ImageProps {\n  targetDrive: TargetDrive;\n  fileId: string | undefined;\n  className?: string;\n  alt?: string;\n  title?: string;\n}\n\nconst Image = ({ targetDrive, fileId, className, alt, title }: ImageProps) => {\n  const [isInView, setIsInView] = useState(false);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const { data: imageUrl } = useImage(isInView ? fileId : undefined, targetDrive).fetch;\n\n  useIntersection(imgRef, () => {\n    setIsInView(true);\n  });\n\n  // const discardUrls = () => {\n  //   if (imageUrl) {\n  //     window.URL.revokeObjectURL(imageUrl);\n  //   }\n  // };\n\n  return (\n    <img\n      src={imageUrl}\n      alt={isInView && imageUrl ? alt : ' '}\n      className={`${className} ${\n        (!isInView || !imageUrl) && 'h-full w-full animate-pulse bg-slate-100'\n      }`}\n      title={title}\n      ref={imgRef}\n      // onLoad={discardUrls}\n    />\n  );\n};\n\nexport default Image;\n","import { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport { RedactedAppRegistration } from '../../../provider/app/AppManagementProviderTypes';\nimport Circles from '../../ui/Icons/Circles/Circles';\n\nconst AppMembershipView = ({\n  appDef,\n  permissionLevel,\n  className,\n}: {\n  appDef: RedactedAppRegistration;\n  permissionLevel?: string;\n  className?: string;\n}) => {\n  if (!appDef) {\n    return <></>;\n  }\n\n  return (\n    <div className={`${className ?? ''} ${appDef.isRevoked && 'opacity-50'}`}>\n      <Link to={`/owner/apps/${appDef.appId}`}>\n        <h2 className=\"mb-2 flex flex-row text-xl\">\n          <Circles className=\"my-auto mr-2 h-4 w-4\" />{' '}\n          <span className=\"my-auto\">\n            {appDef.isRevoked && `${t('Revoked')}: `}\n            {appDef.name}\n          </span>\n          {permissionLevel && <span className=\"my-auto\">: {permissionLevel}</span>}\n        </h2>\n      </Link>\n    </div>\n  );\n};\n\nexport default AppMembershipView;\n","import { useQuery } from '@tanstack/react-query';\nimport AppManagementProvider from '../../provider/app/AppManagementProvider';\nimport useAuth from '../auth/useAuth';\n\nconst useApps = () => {\n  const { getSharedSecret } = useAuth();\n\n  const appManagementProvider = AppManagementProvider.getInstance(getSharedSecret());\n\n  const fetchRegistered = async () => {\n    const apps = await appManagementProvider.GetAppRegistrations();\n    return apps?.sort((a, b) => (a.isRevoked ? 1 : 0) - (b.isRevoked ? 1 : 0));\n  };\n\n  return {\n    fetchRegistered: useQuery(['registeredApps'], () => fetchRegistered(), {\n      refetchOnWindowFocus: false,\n    }),\n  };\n};\n\nexport default useApps;\n","import React, { useEffect } from 'react';\n\nconst listenerCallbacks = new WeakMap();\nconst cleanupSettings = new WeakMap();\n\nlet observer: IntersectionObserver;\n\nconst handleIntersections: IntersectionObserverCallback = (entries) => {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      const callback = listenerCallbacks.get(entry.target);\n      const cleanup = cleanupSettings.get(entry.target);\n\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        if (cleanup) {\n          observer.unobserve(entry.target);\n          listenerCallbacks.delete(entry.target);\n        }\n        callback();\n      }\n    }\n  });\n};\n\nconst getIntersectionObserver = () => {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, {\n      rootMargin: '100px',\n      threshold: 0.15,\n    });\n  }\n  return observer;\n};\n\nexport const useIntersection = (\n  elem: React.RefObject<HTMLElement> | undefined,\n  callback: () => void,\n  keepObserving = false\n) => {\n  useEffect(() => {\n    const target = elem?.current;\n    const observer = getIntersectionObserver();\n\n    if (!target) {\n      return;\n    }\n\n    listenerCallbacks.set(target, callback);\n    cleanupSettings.set(target, !keepObserving);\n    observer.observe(target);\n\n    return () => {\n      listenerCallbacks.delete(target);\n      observer.unobserve(target);\n    };\n  }, [elem]);\n};\n","import {\n  AppClientRegistrationRequest,\n  AppClientRegistrationResponse,\n  AppRegistrationRequest,\n  RedactedAppRegistration,\n  GetAppRequest,\n} from './AppManagementProviderTypes';\nimport { OwnerProviderBase } from '../OwnerProviderBase';\n\nexport default class AppManagementProvider extends OwnerProviderBase {\n  private static instance: AppManagementProvider;\n  constructor(sharedSecret: Uint8Array | undefined) {\n    super(sharedSecret);\n  }\n\n  //adds the specified client to the list of allowed clients for a given app; returns a CAT\n  async RegisterAppClient(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/client',\n      request\n    );\n    return response.data;\n  }\n\n  async RegisterChatAppClient_temp(\n    request: AppClientRegistrationRequest\n  ): Promise<AppClientRegistrationResponse> {\n    const client = this.createAxiosClient();\n    const response = await client.post<AppClientRegistrationResponse>(\n      'appmanagement/register/chatclient_temp',\n      request\n    );\n    console.log('RegisterChatAppClient_temp returning response');\n    console.log(response);\n\n    return response.data;\n  }\n\n  async RegisterApp(request: AppRegistrationRequest): Promise<RedactedAppRegistration> {\n    const client = this.createAxiosClient();\n    const response = await client.post<RedactedAppRegistration>(\n      'appmanagement/register/app',\n      request\n    );\n\n    console.log('RegisterApp returning response');\n    console.log(response);\n\n    return response.data;\n  }\n\n  async GetAppRegistration(request: GetAppRequest): Promise<RedactedAppRegistration> {\n    const client = this.createAxiosClient();\n    const response = await client.post<RedactedAppRegistration>('appmanagement/app', request);\n    return response.data;\n  }\n\n  async GetAppRegistrations(): Promise<RedactedAppRegistration[]> {\n    const client = this.createAxiosClient();\n    const response = await client.get<RedactedAppRegistration[]>('appmanagement/list');\n    return response.data;\n  }\n\n  async RevokeApp(request: GetAppRequest): Promise<void> {\n    const client = this.createAxiosClient();\n    await client.post('appmanagement/revoke', request);\n  }\n\n  async AllowApp(request: GetAppRequest): Promise<void> {\n    const client = this.createAxiosClient();\n    const response = await client.post('appmanagement/allow', request);\n    console.log(response);\n  }\n\n  public static getInstance(sharedSecret): AppManagementProvider {\n    if (!AppManagementProvider.instance) {\n      AppManagementProvider.instance = new AppManagementProvider(sharedSecret);\n    }\n\n    return AppManagementProvider.instance;\n  }\n}\n","import {\n  AttributeDefinitions,\n  BuiltInProfiles,\n  getTargetDriveFromProfileId,\n  HomePageAttributes,\n  HomePageConfig,\n  HomePageFields,\n} from '@youfoundation/dotyoucore-js';\nimport useAttributeVersions from '../../hooks/profiles/useAttributeVersions';\nimport Image from '../Image/Image';\n\nconst HomePageTeaser = () => {\n  const { data: homeAttr } = useAttributeVersions({\n    profileId: HomePageConfig.DefaultDriveId,\n    type: HomePageAttributes.HomePage,\n  }).fetchVersions;\n\n  const { data: photoAttr } = useAttributeVersions({\n    profileId: BuiltInProfiles.StandardProfileId,\n    type: AttributeDefinitions.Photo.type,\n  }).fetchVersions;\n\n  return (\n    <a\n      href={`https://${window.location.hostname}/home`}\n      className=\"block hover:shadow-md hover:dark:shadow-slate-600\"\n    >\n      <div className=\"relative\">\n        <Image\n          targetDrive={getTargetDriveFromProfileId(HomePageConfig.DefaultDriveId)}\n          fileId={homeAttr?.[0]?.data[HomePageFields.HeaderImageId]}\n          className=\"min-h-[34rem] object-cover\"\n        />\n        <div className=\"absolute inset-0 mx-auto max-w-[18rem]\">\n          <div className=\"flex h-full items-center\">\n            <Image\n              targetDrive={getTargetDriveFromProfileId(BuiltInProfiles.StandardProfileId)}\n              fileId={photoAttr?.[0]?.data?.['profileImageId']}\n              className=\"aspect-square max-h-[18rem] w-full max-w-[18rem] rounded-full border-8 border-neutral-200 object-cover\"\n            />\n          </div>\n        </div>\n      </div>\n    </a>\n  );\n};\n\nexport default HomePageTeaser;\n","import { Link } from 'react-router-dom';\nimport Alert from '../../components/ui/Alerts/Alert/Alert';\nimport PersonIncomingRequest from '../../components/Connection/PersonIncomingRequest/PersonIncomingRequest';\nimport AppMembershipView from '../../components/PermissionViews/AppPermissionView/AppPermissionView';\nimport CirclePermissionView from '../../components/PermissionViews/CirclePermissionView/CirclePermissionView';\nimport InfoBox from '../../components/ui/InfoBox/InfoBox';\nimport PageMeta from '../../components/ui/Layout/PageMeta/PageMeta';\nimport Section from '../../components/ui/Sections/Section';\nimport { t } from '../../helpers/i18n/dictionary';\nimport useApps from '../../hooks/apps/useApps';\nimport useCircles from '../../hooks/circles/useCircles';\nimport useConnections from '../../hooks/connections/useConnections';\nimport HomePageTeaser from '../../components/HomePageTeaser/HomePageTeaser';\n\nconst Home = () => {\n  return (\n    <section>\n      <Dashboard />\n    </section>\n  );\n};\n\nconst About = {\n  drives: (\n    <>\n      <p>\n        Drives are the center of your identity. They contain your data in their many different\n        forms. Drives hold the data of your profile(s), drafted and published blogs.{' '}\n      </p>\n      <p className=\"mt-2\">\n        Data on these drives can be accessed by you, one of your approved connections, one of your\n        approved apps and the <span className=\"line-through\">YouFoundation</span>. No scratch that,\n        it is your data you are always in control. We will never access your data, because we\n        promise not to... And because it is technically impossible.\n      </p>\n    </>\n  ),\n  circles: (\n    <p>\n      Circles are groups of members that share the same permissions. You can name them based on\n      which social circle your connections belong (eg: family, friends, co-workers, ...). Or\n      anything else that works for you\n    </p>\n  ),\n  apps: (\n    <p>\n      Apps are applications that have been granted access to one or more of your drives. They are\n      able to access that information on your behalf so do make sure when registering new apps on\n      your identity that they don't request any drive access that you don't feel comfortable with.\n    </p>\n  ),\n};\n\nconst Dashboard = () => {\n  const {\n    fetchPending: { data: pendingConnections, isLoading: pendingConnectionsLoading },\n  } = useConnections({\n    pending: { pageSize: 5, pageNumber: 1 },\n    sent: { pageSize: 5, pageNumber: 1 },\n  });\n  const {\n    fetch: { data: circles, isLoading: isCirclesLoading },\n  } = useCircles();\n  const { data: apps, isLoading: isAppsLoading } = useApps().fetchRegistered;\n  // const {\n  //   fetch: { data: drives, isLoading: isDrivesLoading },\n  // } = useDrives();\n\n  return (\n    <>\n      <PageMeta title={t('Dashboard')} />\n\n      <p className=\"max-w-md\">\n        Welcome to your owner console. Here you will be able to edit your{' '}\n        <Link className=\"underline\" to=\"/owner/profile\">\n          profile\n        </Link>\n        , manage your{' '}\n        <Link className=\"underline\" to=\"/owner/connections\">\n          connections\n        </Link>\n        , manage permissions within{' '}\n        <Link className=\"underline\" to=\"/owner/circles\">\n          circles\n        </Link>{' '}\n        and{' '}\n        <Link className=\"underline\" to=\"/owner/apps\">\n          apps\n        </Link>\n        .\n      </p>\n\n      {!pendingConnectionsLoading && pendingConnections?.results?.length ? (\n        <Section isOpaqueBg={true} title={t('Connection requests')} className=\"mb-4\">\n          <div className=\"-m-1 flex flex-row flex-wrap\">\n            {pendingConnections?.results?.map((pendingConnection) => (\n              <PersonIncomingRequest\n                className=\"w-full p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                senderDotYouId={pendingConnection.senderDotYouId}\n                key={pendingConnection.senderDotYouId}\n                pendingConnection={pendingConnection}\n              >\n                <div className=\"-mt-3\">\n                  <p className=\"mb-3 text-sm\">{pendingConnection.message}</p>\n                </div>\n              </PersonIncomingRequest>\n            ))}\n          </div>\n        </Section>\n      ) : null}\n\n      <div className=\"-mx-4 lg:flex lg:flex-row\">\n        <div className=\"px-4 lg:w-1/3\">\n          <Section title={t('Your Homepage')} isOpaqueBg={true} className=\"h-full\">\n            <HomePageTeaser />\n          </Section>\n\n          {/* <Section\n            className=\"h-full\"\n            isOpaqueBg={true}\n            title={\n              <div className=\"flex flex-row\">\n                {t('Drives')}{' '}\n                <InfoBox title={t('About Drives')} className=\"ml-2\">\n                  {About['drives']}\n                </InfoBox>\n              </div>\n            }\n          >\n            {!drives?.length && !isDrivesLoading ? (\n              <Alert className=\"my-2\" type={'info'} isCompact={true}>\n                {About['drives']}\n              </Alert>\n            ) : (\n              <div className=\"-my-4\">\n                {drives?.map((drive) => {\n                  return (\n                    <DriveView\n                      key={`${drive.targetDriveInfo.alias}-${drive.targetDriveInfo.type}`}\n                      drive={drive}\n                      className=\"my-4\"\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </Section> */}\n        </div>\n        <div className=\"px-4 lg:w-1/3\">\n          <Section\n            className=\"h-full\"\n            isOpaqueBg={true}\n            title={\n              <div className=\"flex flex-row\">\n                {t('Circles')}{' '}\n                <InfoBox title={t('About Circles')} className=\"ml-2\">\n                  {About['circles']}\n                </InfoBox>\n              </div>\n            }\n          >\n            <ul className=\"-my-4\">\n              {!circles?.length && !isCirclesLoading ? (\n                <Alert className=\"my-2\" type={'info'} isCompact={true}>\n                  {About['circles']}\n                </Alert>\n              ) : (\n                circles?.map((circle) => {\n                  return (\n                    <CirclePermissionView circleDef={circle} key={circle.id} className=\"my-4\" />\n                  );\n                })\n              )}\n            </ul>\n          </Section>\n        </div>\n        <div className=\"px-4 lg:w-1/3\">\n          <Section\n            className=\"h-full\"\n            isOpaqueBg={true}\n            title={\n              <div className=\"flex flex-row\">\n                {t('Apps')}{' '}\n                <InfoBox title={t('About Apps')} className=\"ml-2\">\n                  {About['apps']}\n                </InfoBox>\n              </div>\n            }\n          >\n            <ul className=\"-my-4\">\n              {!apps?.length && !isAppsLoading ? (\n                <Alert className=\"my-2\" type={'info'} isCompact={true}>\n                  {About['apps']}\n                </Alert>\n              ) : (\n                apps?.map((app) => {\n                  return <AppMembershipView className=\"my-4\" appDef={app} key={app.appId} />;\n                })\n              )}\n            </ul>\n          </Section>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["dotYouId","href","isChecked","className","children","onClick","onlyLoadAfterClick","senderDotYouId","pendingConnection","useConnection","ignoreRequest","mutateAsync","ignoreRequestStatus","status","ignoreError","error","uiSettings","useSettings","fetchUiSettings","data","useState","isAcceptDialogOpen","setIsAcceptDialogOpen","automaticallyLoadProfilePicture","type","e","preventDefault","icon","t","confirmOptions","title","body","buttonText","state","isOpen","confirmText","onConfirm","onCancel","targetDrive","fileId","alt","isInView","setIsInView","imgRef","useRef","imageUrl","useImage","undefined","fetch","useIntersection","src","ref","appDef","permissionLevel","isRevoked","to","appId","name","getSharedSecret","useAuth","appManagementProvider","AppManagementProvider","fetchRegistered","GetAppRegistrations","apps","sort","a","b","useQuery","refetchOnWindowFocus","observer","listenerCallbacks","WeakMap","cleanupSettings","handleIntersections","entries","forEach","entry","has","target","callback","get","cleanup","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","IntersectionObserver","rootMargin","threshold","elem","keepObserving","useEffect","current","set","observe","sharedSecret","request","client","this","createAxiosClient","post","response","console","log","instance","OwnerProviderBase","homeAttr","useAttributeVersions","profileId","HomePageConfig","HomePageAttributes","fetchVersions","photoAttr","BuiltInProfiles","AttributeDefinitions","window","location","hostname","Image","getTargetDriveFromProfileId","HomePageFields","About","drives","circles","Dashboard","useConnections","pending","pageSize","pageNumber","sent","fetchPending","pendingConnections","pendingConnectionsLoading","isLoading","useCircles","isCirclesLoading","useApps","isAppsLoading","PageMeta","results","length","Section","isOpaqueBg","map","PersonIncomingRequest","message","InfoBox","circle","CirclePermissionView","circleDef","id","Alert","isCompact","app"],"sourceRoot":""}