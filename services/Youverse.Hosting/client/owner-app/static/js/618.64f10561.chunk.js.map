{"version":3,"file":"static/js/618.64f10561.chunk.js","mappings":"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","sources":["components/Connection/ConnectionCard/ConnectionCard.tsx","components/Connection/PersonCard/PersonCard.tsx","components/Connection/PersonIncomingRequest/PersonIncomingRequest.tsx","components/Form/Textarea.tsx","components/ui/Icons/Triangle/Triangle.tsx","components/ui/Pager/Pager.tsx","hooks/connections/useActiveConnections.ts","components/Connection/PersonOutgoingRequest/PersonOutgoingRequest.tsx","components/Connection/YourSignature/YourSignature.tsx","components/Dialog/ConnectionDialogs/OutgoingConnectionDialog.tsx","components/Connection/PersonActive/PersonActive.tsx","templates/Connections/Connections/Connections.tsx"],"sourcesContent":["import useContact from '../../../hooks/contacts/useContact';\nimport LoadingParagraph from '../../ui/Loaders/LoadingParagraph/LoadingParagraph';\nimport PersonCard, { PersonCardProps } from '../PersonCard/PersonCard';\n\nconst ConnectionCard = (props: PersonCardProps) => {\n  const { data: contactData, isLoading } = useContact({\n    dotYouId: props.dotYouId,\n  }).fetch;\n  const nameData = contactData?.name;\n  const fullName = nameData\n    ? `${nameData.givenName ?? ''} ${nameData.surname ?? ''}`\n    : props.dotYouId;\n\n  if (isLoading) {\n    return <LoadingParagraph className={`aspect-[3/5] ${props.className}`} />;\n  }\n\n  return (\n    <PersonCard {...props}>\n      <h2 className=\"font-thiner mb-6 dark:text-white\">{fullName ?? props.dotYouId}</h2>\n      {props.children}\n    </PersonCard>\n  );\n};\n\nexport default ConnectionCard;\n","import { ReactNode } from 'react';\n\nimport PendingConnectionImage from '../PendingConnectionImage/PendingConnectionImage';\n\nexport interface PersonCardProps {\n  dotYouId: string;\n  href?: string;\n  isChecked?: boolean;\n  className: string;\n  children?: ReactNode;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n  onlyLoadAfterClick?: boolean;\n}\n\nconst PersonCard = ({\n  dotYouId,\n  href,\n  isChecked,\n  className,\n  children,\n  onClick,\n  onlyLoadAfterClick,\n}: PersonCardProps) => {\n  return (\n    <a className={`${className}`} href={href}>\n      <div\n        className={`h-full rounded-md border bg-white transition-colors  ${\n          isChecked\n            ? 'border-4 border-indigo-500 dark:border-indigo-700'\n            : isChecked === false\n            ? 'border-4'\n            : 'border-gray-200 border-opacity-60 dark:border-gray-800 dark:bg-gray-800'\n        }\n        ${href ? 'cursor-pointer hover:shadow-md hover:dark:shadow-slate-600' : ''}`}\n        onClick={onClick}\n      >\n        <PendingConnectionImage dotYouId={dotYouId} onlyLoadAfterClick={onlyLoadAfterClick} />\n        <div className=\"p-2\">{children}</div>\n      </div>\n    </a>\n  );\n};\n\nexport default PersonCard;\n","import { ReactNode, useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useConnection from '../../../hooks/connections/useConnection';\nimport useSettings from '../../../hooks/settings/useSettings';\nimport { ConnectionRequest } from '../../../provider/connections/CircleDataTypes';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport CharacterHighlighter from '../../ui/CharacterHighlighter/CharacterHighlighter';\nimport IncomingConnectionDialog from '../../Dialog/ConnectionDialogs/IncomingConnectionDialog';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonIncomingRequest = ({\n  senderDotYouId,\n  pendingConnection,\n  children,\n  className,\n}: {\n  senderDotYouId: string;\n  pendingConnection: ConnectionRequest;\n  children?: ReactNode;\n  className: string;\n}) => {\n  const {\n    ignoreRequest: { mutateAsync: ignoreRequest, status: ignoreRequestStatus, error: ignoreError },\n  } = useConnection({});\n  const { data: uiSettings } = useSettings().fetchUiSettings;\n  const [isAcceptDialogOpen, setIsAcceptDialogOpen] = useState(false);\n\n  return (\n    <>\n      <ErrorNotification error={ignoreError} />\n      <PersonCard\n        className={className}\n        dotYouId={senderDotYouId}\n        key={senderDotYouId}\n        onlyLoadAfterClick={!uiSettings?.automaticallyLoadProfilePicture}\n      >\n        <h2 className=\"font-thiner mb-6 dark:text-white\">\n          <CharacterHighlighter>{senderDotYouId}</CharacterHighlighter>\n        </h2>\n        {children}\n        <ActionButton\n          type=\"primary\"\n          className=\"mb-2 w-full\"\n          onClick={(e) => {\n            e.preventDefault();\n            setIsAcceptDialogOpen(true);\n            return false;\n          }}\n          icon=\"check\"\n        >\n          {t('Confirm request')}...\n        </ActionButton>\n        <ActionButton\n          type=\"secondary\"\n          className=\"mb-2 w-full\"\n          onClick={async (e) => {\n            e.preventDefault();\n            await ignoreRequest({ senderDotYouId: senderDotYouId });\n\n            return false;\n          }}\n          confirmOptions={{\n            title: t('Ignore request'),\n            body: `${t('Are you sure you want to ignore the request from')} ${senderDotYouId}`,\n            buttonText: t('Ignore'),\n          }}\n          state={ignoreRequestStatus}\n          icon=\"times\"\n        >\n          {t('Ignore request')}\n        </ActionButton>\n      </PersonCard>\n      <IncomingConnectionDialog\n        isOpen={isAcceptDialogOpen}\n        senderDotYouId={senderDotYouId}\n        confirmText={t('Connect')}\n        onConfirm={async () => {\n          setIsAcceptDialogOpen(false);\n        }}\n        onCancel={() => {\n          setIsAcceptDialogOpen(false);\n        }}\n        pendingConnection={pendingConnection}\n      />\n    </>\n  );\n};\n\nexport default PersonIncomingRequest;\n","const Textarea = (\n  props: React.DetailedHTMLProps<\n    React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >\n) => {\n  return (\n    <textarea\n      {...props}\n      className={`w-full rounded border border-gray-300 bg-white py-1 px-3 text-base leading-8 text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 ${props.className}`}\n    />\n  );\n};\n\nexport default Textarea;\n","import { FC } from 'react';\n\nconst Triangle: FC<IconProps> = ({ className }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 384 512\"\n      fill=\"currentColor\"\n      className={className}\n    >\n      <path d=\"M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z\" />\n    </svg>\n  );\n};\n\nexport default Triangle;\n","import Triangle from '../Icons/Triangle/Triangle';\n\ninterface PagerProps {\n  totalPages: number;\n  setPage: (page: number) => void;\n  currentPage: number;\n  className?: string;\n}\n\nconst Pager = ({ totalPages, setPage, currentPage, className }: PagerProps) => {\n  if (currentPage === 1 && currentPage >= totalPages) {\n    return;\n  }\n\n  return (\n    <div className={`flex text-slate-300 dark:text-slate-700 ${className ?? ''}`}>\n      <div\n        className={\n          currentPage !== 1\n            ? 'cursor-pointer text-slate-600 dark:text-slate-200'\n            : 'pointer-events-none'\n        }\n        onClick={() => setPage(currentPage - 1)}\n      >\n        <Triangle className={`h-5 w-5 rotate-180`} />\n      </div>\n      <div\n        className={\n          currentPage < totalPages\n            ? 'cursor-pointer text-slate-600 dark:text-slate-200'\n            : 'pointer-events-none'\n        }\n        onClick={() => setPage(currentPage + 1)}\n      >\n        <Triangle className={`h-5 w-5`} />\n      </div>\n    </div>\n  );\n};\n\nexport default Pager;\n","import { useQuery } from '@tanstack/react-query';\nimport { PagingOptions } from '@youfoundation/dotyoucore-js';\nimport { CircleNetworkProvider } from '../../provider/connections/CircleNetworkProvider';\nimport useAuth from '../auth/useAuth';\n\ninterface useActiveConnectionsProps {\n  active: { pageSize: number; pageNumber: number };\n}\n\nconst useConnections = (\n  { active: { pageSize: activePageSize, pageNumber: activePage } }: useActiveConnectionsProps = {\n    active: { pageSize: 10, pageNumber: 1 },\n  }\n) => {\n  const { getSharedSecret } = useAuth();\n  const circleNetworkProvider = CircleNetworkProvider.getInstance(getSharedSecret());\n\n  const fetchConnections = async (\n    { pageSize, pageNumber }: PagingOptions = { pageSize: 10, pageNumber: 1 }\n  ) => {\n    return await await circleNetworkProvider.getConnections({\n      pageNumber: pageNumber,\n      pageSize: pageSize,\n    });\n  };\n\n  return {\n    fetchActive: useQuery(\n      ['activeConnections', activePageSize, activePage],\n      () => fetchConnections({ pageSize: activePageSize, pageNumber: activePage }),\n      {\n        refetchOnWindowFocus: false,\n        keepPreviousData: true,\n        onError: (err) => console.error(err),\n      }\n    ),\n  };\n};\n\nexport default useConnections;\n","import { t } from '../../../helpers/i18n/dictionary';\nimport useConnection from '../../../hooks/connections/useConnection';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport CharacterHighlighter from '../../ui/CharacterHighlighter/CharacterHighlighter';\nimport PersonCard from '../PersonCard/PersonCard';\n\nconst PersonOutgoingRequest = ({\n  recipientDotYouId,\n  className,\n}: {\n  recipientDotYouId: string;\n  className: string;\n}) => {\n  const {\n    mutate: revokeRequest,\n    status: revokeRequestStatus,\n    error: actionError,\n  } = useConnection({}).revokeConnectionRequest;\n\n  return (\n    <>\n      <ErrorNotification error={actionError} />\n      <PersonCard className={className} dotYouId={recipientDotYouId}>\n        <h2 className=\"font-thiner mb-6 dark:text-white\">\n          <CharacterHighlighter>{recipientDotYouId}</CharacterHighlighter>\n        </h2>\n        <ActionButton\n          type=\"secondary\"\n          className=\"mb-2 w-full\"\n          onClick={(e) => {\n            e.preventDefault();\n            revokeRequest({ targetDotYouId: recipientDotYouId });\n            return false;\n          }}\n          state={revokeRequestStatus}\n          icon=\"times\"\n        >\n          {t('Cancel')}\n        </ActionButton>\n      </PersonCard>\n    </>\n  );\n};\n\nexport default PersonOutgoingRequest;\n","import {\n  BuiltInProfiles,\n  AttributeDefinitions,\n  MinimalProfileFields,\n  getTargetDriveFromProfileId,\n  AttributeFile,\n  SecurityGroupType,\n} from '@youfoundation/dotyoucore-js';\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useImage from '../../../hooks/media/useImage';\nimport useAttributeVersions from '../../../hooks/profiles/useAttributeVersions';\nimport Alert from '../../ui/Alerts/Alert/Alert';\nimport FallbackImg from '../../ui/FallbackImg/FallbackImg';\nimport LoadingParagraph from '../../ui/Loaders/LoadingParagraph/LoadingParagraph';\n\ninterface infoObject {\n  givenName: string;\n  surname: string;\n  imageFileId: string;\n}\n\ninterface YourSignatureProps {\n  className?: string;\n  onChange: ({ givenName, surname, imageFileId }: infoObject) => void;\n}\n\nconst filterAttributes = (attributes: AttributeFile[]) => {\n  return attributes\n    ?.filter(\n      (attr) =>\n        attr.data !== undefined &&\n        Object.keys(attr.data)?.length !== 0 &&\n        attr.acl.requiredSecurityGroup === SecurityGroupType.Anonymous\n    )\n    ?.sort((attrA, attrB) => attrA.priority - attrB.priority);\n};\n\nconst YourSignature = ({ className, onChange }: YourSignatureProps) => {\n  const {\n    data: nameAttributes,\n    isLoading: nameAttributesLoading,\n    isFetchedAfterMount: isNameFetchedAfterMount,\n  } = useAttributeVersions({\n    profileId: BuiltInProfiles.StandardProfileId.toString(),\n    type: AttributeDefinitions.Name.type,\n  }).fetchVersions;\n\n  const filteredNameAttributes = filterAttributes(nameAttributes);\n\n  const {\n    data: photoAttributes,\n    isLoading: photoAttributesLoading,\n    isFetchedAfterMount: isPhotoFetchedAfterMount,\n  } = useAttributeVersions({\n    profileId: BuiltInProfiles.StandardProfileId.toString(),\n    type: AttributeDefinitions.Photo.type,\n  }).fetchVersions;\n\n  const filteredPhotoAttributes = filterAttributes(photoAttributes);\n\n  const { data: imageUrl } = useImage(\n    filteredPhotoAttributes?.[0]?.data?.[MinimalProfileFields.ProfileImageId],\n    getTargetDriveFromProfileId(BuiltInProfiles.StandardProfileId.toString())\n  ).fetch;\n\n  const info: infoObject = {\n    givenName: filteredNameAttributes?.[0]?.data[MinimalProfileFields.GivenNameId],\n    surname: filteredNameAttributes?.[0]?.data[MinimalProfileFields.SurnameId],\n    imageFileId: filteredPhotoAttributes?.[0]?.data[MinimalProfileFields.ProfileImageId],\n  };\n\n  useEffect(() => {\n    if (filteredNameAttributes?.length) {\n      onChange(info);\n    }\n  }, [isNameFetchedAfterMount, isPhotoFetchedAfterMount]);\n\n  return (\n    <div className={`${className ?? ''}`}>\n      {!nameAttributesLoading && (!info.givenName || !info.surname) ? (\n        <>\n          <Alert type={'warning'} isCompact={true} className=\"mb-4\">\n            <p>\n              {t('Without a name, you cannot connect to other people. Please fill in your name on')}{' '}\n              <Link to={'/owner/profile/standard-info'} className=\"underline\">\n                {t('the profile page')}\n              </Link>\n            </p>\n          </Alert>\n        </>\n      ) : null}\n\n      <div className=\"-mr-3 flex flex-row \">\n        <div className=\"aspect-square w-1/4 max-w-[3rem]\">\n          {photoAttributesLoading ? (\n            <LoadingParagraph className={`aspect-square`} />\n          ) : !imageUrl ? (\n            <FallbackImg\n              initials={(info.givenName?.[0] ?? '') + (info.surname?.[0] ?? '')}\n              className=\"aspect-square h-[3rem] w-[3rem] sm:text-4xl\"\n            />\n          ) : (\n            <img src={imageUrl} className=\"aspect-square object-cover object-top\" />\n          )}\n        </div>\n        <div className=\"my-auto flex-grow px-3\">\n          {nameAttributesLoading ? (\n            <LoadingParagraph className=\"h-6 w-full max-w-xs\" />\n          ) : (\n            <h2 className=\"text-lg leading-tight\">\n              {`${info.givenName ?? ''} ${info.surname ?? ''}`}\n              <small className=\"block text-slate-400 dark:text-slate-600\">\n                {window.location.hostname}\n              </small>\n            </h2>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default YourSignature;\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useConnection from '../../../hooks/connections/useConnection';\nimport useFocusedEditing from '../../../hooks/focusedEditing/useFocusedEditing';\nimport usePortal from '../../../hooks/portal/usePortal';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport YourInfo from '../../Connection/YourInfo/YourInfo';\nimport YourSignature from '../../Connection/YourSignature/YourSignature';\nimport CircleSelector from '../../Form/CircleSelector';\nimport Input from '../../Form/Input';\nimport Label from '../../Form/Label';\nimport Textarea from '../../Form/Textarea';\nimport DialogWrapper from '../../ui/Dialog/DialogWrapper';\n\nconst DEFAULT_MESSAGE = t('Hi, I would like to connect with you');\n\nconst OutgoingConnectionDialog = ({\n  title,\n  isOpen,\n  onConfirm,\n  onCancel,\n}: {\n  title: string;\n  confirmText?: string;\n\n  isOpen: boolean;\n\n  onConfirm: () => void;\n  onCancel: () => void;\n}) => {\n  const target = usePortal('modal-container');\n  const {\n    mutate: sendConnectionRequest,\n    status: sendConnectionRequestStatus,\n    reset: resetConnectionRequest,\n    error: actionError,\n  } = useConnection({}).sendConnectionRequest;\n  const checkReturnTo = useFocusedEditing();\n\n  const [doubleChecked, setDoubleChecked] = useState(false);\n\n  const [connectionTarget, setConnectionTarget] = useState<string>();\n  const [message, setMessage] = useState(DEFAULT_MESSAGE);\n  const [name, setName] = useState<{ givenName: string; surname: string }>();\n  const [photoFileId, setPhotoFileId] = useState<string>(null);\n  const [circleGrants, setCircleGrants] = useState<string[]>([]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const dialog = (\n    <DialogWrapper\n      title={title}\n      onClose={() => {\n        setDoubleChecked(false);\n        onCancel();\n      }}\n      keepOpenOnBlur={true}\n      size=\"2xlarge\"\n    >\n      <>\n        <ErrorNotification error={actionError} />\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            if (doubleChecked) {\n              sendConnectionRequest(\n                {\n                  message: message,\n                  name: name,\n                  photoFileId: photoFileId,\n                  targetDotYouId: connectionTarget,\n                  circleIds: circleGrants,\n                },\n                {\n                  onSuccess: () => {\n                    checkReturnTo();\n\n                    resetConnectionRequest();\n                    setConnectionTarget('');\n                    setMessage(DEFAULT_MESSAGE);\n                    setCircleGrants([]);\n                    setDoubleChecked(false);\n\n                    onConfirm();\n                  },\n                }\n              );\n            } else {\n              if (e.currentTarget.checkValidity()) {\n                setDoubleChecked(true);\n              }\n            }\n          }}\n        >\n          {!doubleChecked ? (\n            <>\n              <div className=\"mb-5\">\n                <Label htmlFor=\"dotyouid\">Recipient identity</Label>\n                <Input\n                  id=\"dotyouid\"\n                  name=\"dotyouid\"\n                  onChange={(e) => {\n                    setConnectionTarget(e.target.value);\n                  }}\n                  defaultValue={connectionTarget}\n                  required\n                />\n              </div>\n              <div className=\"mb-5\">\n                <Label htmlFor=\"message\">{t('Message')}</Label>\n                <Textarea\n                  id=\"message\"\n                  name=\"message\"\n                  defaultValue={message}\n                  onChange={(e) => {\n                    setMessage(e.target.value);\n                  }}\n                  required\n                />\n              </div>\n              <Label>{t('From')}</Label>\n              <YourSignature\n                onChange={(publicInfo) => {\n                  setName({ givenName: publicInfo.givenName, surname: publicInfo.surname });\n                  setPhotoFileId(publicInfo.imageFileId);\n                }}\n              />\n              <div className=\"-m-2 flex flex-row-reverse py-3\">\n                <ActionButton className=\"m-2\" icon={'send'} isDisabled={!name}>\n                  {t('Continue')}\n                </ActionButton>\n                <ActionButton className=\"m-2\" type=\"secondary\" onClick={onCancel}>\n                  {t('Cancel')}\n                </ActionButton>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"mb-4 pb-4\">\n                <h2 className=\"mb-2 text-lg leading-tight\">\n                  {t('Add as member to one or more circles')}:\n                  <small className=\"block text-slate-400 dark:text-slate-600\">\n                    {connectionTarget} {t('will be added as member to the selected circles')}\n                  </small>\n                </h2>\n                <CircleSelector\n                  defaultValue={circleGrants}\n                  onChange={(e) => setCircleGrants(e.target.value)}\n                />\n              </div>\n\n              <h2 className=\"mb-6 text-lg leading-tight\">\n                {t('Your contact details')}\n                <small className=\"block text-slate-400 dark:text-slate-600\">\n                  {connectionTarget} {t('will get access to these contact details')}\n                </small>\n              </h2>\n              <YourInfo circleGrants={circleGrants} className=\"mb-4\" />\n\n              <div className=\"-m-2 flex flex-row-reverse py-3\">\n                <ActionButton className=\"m-2\" state={sendConnectionRequestStatus} icon={'send'}>\n                  {t('Send')}\n                </ActionButton>\n                <ActionButton\n                  className=\"m-2\"\n                  onClick={() => setDoubleChecked(false)}\n                  type={'secondary'}\n                >\n                  {t('Back')}\n                </ActionButton>\n                <ActionButton\n                  className=\"m-2 sm:mr-auto\"\n                  type=\"secondary\"\n                  onClick={() => {\n                    setDoubleChecked(false);\n                    onCancel();\n                  }}\n                >\n                  {t('Cancel')}\n                </ActionButton>\n              </div>\n            </>\n          )}\n        </form>\n      </>\n    </DialogWrapper>\n  );\n\n  return createPortal(dialog, target);\n};\n\nexport default OutgoingConnectionDialog;\n","import { t } from '../../../helpers/i18n/dictionary';\nimport useConnection from '../../../hooks/connections/useConnection';\nimport { DotYouProfile } from '../../../provider/connections/CircleDataTypes';\nimport ErrorNotification from '../../ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../ui/Buttons/ActionButton';\nimport ConnectionCard from '../ConnectionCard/ConnectionCard';\n\nconst PersonActive = ({\n  dotYouProfile,\n\n  className,\n}: {\n  dotYouProfile: DotYouProfile;\n  className: string;\n}) => {\n  const {\n    mutate: disconnect,\n    status: disconnectStatus,\n    error: actionError,\n  } = useConnection({}).disconnect;\n\n  return (\n    <>\n      <ErrorNotification error={actionError} />\n      <ConnectionCard\n        className={`${className ?? ''} relative`}\n        dotYouId={dotYouProfile.dotYouId}\n        href={\n          (dotYouProfile.dotYouId && `/owner/connections/${dotYouProfile.dotYouId}`) ?? undefined\n        }\n      >\n        <div className=\"absolute top-2 right-2 z-10 aspect-square rounded-full\">\n          <ActionButton\n            type=\"secondary\"\n            className=\"rounded-full\"\n            onClick={(e) => {\n              e.preventDefault();\n              disconnect({ connectionDotYouId: dotYouProfile.dotYouId });\n            }}\n            state={disconnectStatus}\n            confirmOptions={{\n              title: `${t('Remove')} ${dotYouProfile.dotYouId}`,\n              buttonText: t('Remove'),\n              body: `${t('Are you sure you want to remove')} ${dotYouProfile.dotYouId} ${t(\n                'from your connections. They will lose all existing access.'\n              )}`,\n            }}\n            icon=\"times\"\n            size=\"square\"\n          />\n        </div>\n      </ConnectionCard>\n    </>\n  );\n};\n\nexport default PersonActive;\n","import PageMeta from '../../../components/ui/Layout/PageMeta/PageMeta';\nimport useConnections from '../../../hooks/connections/useConnections';\nimport ActionButton from '../../../components/ui/Buttons/ActionButton';\nimport PersonIncomingRequest from '../../../components/Connection/PersonIncomingRequest/PersonIncomingRequest';\nimport PersonOutgoingRequest from '../../../components/Connection/PersonOutgoingRequest/PersonOutgoingRequest';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Section from '../../../components/ui/Sections/Section';\nimport OutgoingConnectionDialog from '../../../components/Dialog/ConnectionDialogs/OutgoingConnectionDialog';\nimport { useState } from 'react';\nimport Persons from '../../../components/ui/Icons/Persons/Persons';\nimport LoadingParagraph from '../../../components/ui/Loaders/LoadingParagraph/LoadingParagraph';\nimport Pager from '../../../components/ui/Pager/Pager';\nimport PersonActive from '../../../components/Connection/PersonActive/PersonActive';\nimport useActiveConnections from '../../../hooks/connections/useActiveConnections';\n\nconst Connections = () => {\n  const [pendingPage, setPendingPage] = useState(1);\n  const [activePage, setActivePage] = useState(1);\n  const [sentPage, setSentPage] = useState(1);\n\n  const {\n    fetchPending: { data: pendingConnections, isLoading: pendingConnectionsLoading },\n    fetchSent: { data: sentRequests, isLoading: sentRequestsLoading },\n  } = useConnections({\n    pending: { pageSize: 15, pageNumber: pendingPage },\n    sent: { pageSize: 15, pageNumber: sentPage },\n  });\n\n  const {\n    fetchActive: { data: activeConnections, isLoading: activeConnectionsLoading },\n  } = useActiveConnections({\n    active: { pageSize: 5, pageNumber: activePage },\n  });\n\n  const [isSentConnectionOpen, setIsSentConnectionOpen] = useState(false);\n\n  return (\n    <>\n      <section>\n        <PageMeta\n          icon={Persons}\n          title={'Contacts'}\n          actions={\n            <>\n              <ActionButton\n                onClick={() => setIsSentConnectionOpen(true)}\n                icon={'plus'}\n                className=\"m-2\"\n              >\n                {t('Send Request')}\n              </ActionButton>\n            </>\n          }\n        />\n\n        {!pendingConnections?.results?.length &&\n        !activeConnections?.results?.length &&\n        !sentRequests?.results?.length &&\n        !pendingConnectionsLoading &&\n        !activeConnectionsLoading &&\n        !sentRequestsLoading ? (\n          <div className=\"flex flex-row\">\n            <p className=\"my-auto\">\n              {t('Mmh, this looks empty... Time to add some connections?')}{' '}\n            </p>\n            <ActionButton\n              onClick={(e) => {\n                e.preventDefault();\n                setIsSentConnectionOpen(true);\n\n                return false;\n              }}\n              type=\"secondary\"\n              className=\"ml-2\"\n            >\n              {t('Add')}\n            </ActionButton>\n          </div>\n        ) : null}\n\n        {pendingConnectionsLoading || pendingConnections?.results?.length ? (\n          <Section\n            isOpaqueBg={true}\n            isBorderLess={true}\n            title={t('Connection requests')}\n            actions={\n              <Pager\n                totalPages={pendingConnections?.totalPages}\n                setPage={setPendingPage}\n                currentPage={pendingPage}\n                className=\"m-2\"\n              />\n            }\n          >\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {pendingConnectionsLoading && (\n                <>\n                  <LoadingParagraph className=\"m-1 aspect-square w-1/2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n                  <LoadingParagraph className=\"m-1 aspect-square w-1/2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n                </>\n              )}\n\n              {pendingConnections?.results?.map((pendingConnection) => (\n                <PersonIncomingRequest\n                  className=\"w-full p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  senderDotYouId={pendingConnection.senderDotYouId}\n                  key={pendingConnection.senderDotYouId}\n                  pendingConnection={pendingConnection}\n                >\n                  <div className=\"-mt-3\">\n                    <p className=\"mb-3 text-sm\">{pendingConnection.message}</p>\n                  </div>\n                </PersonIncomingRequest>\n              ))}\n            </div>\n          </Section>\n        ) : null}\n\n        {sentRequestsLoading || sentRequests?.results?.length ? (\n          <Section\n            isOpaqueBg={true}\n            isBorderLess={true}\n            title={t('Sent Connection Requests')}\n            actions={\n              <Pager\n                totalPages={sentRequests?.totalPages}\n                setPage={setSentPage}\n                currentPage={sentPage}\n                className=\"m-2\"\n              />\n            }\n          >\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {sentRequestsLoading && (\n                <>\n                  <LoadingParagraph className=\"m-1 aspect-square w-1/2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n                  <LoadingParagraph className=\"m-1 aspect-square w-1/2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n                </>\n              )}\n\n              {sentRequests?.results?.map((sentRequest) => (\n                <PersonOutgoingRequest\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  recipientDotYouId={sentRequest.recipient}\n                  key={sentRequest.recipient}\n                />\n              ))}\n            </div>\n          </Section>\n        ) : null}\n\n        {activeConnections?.results?.length || activeConnectionsLoading ? (\n          <Section\n            isOpaqueBg={true}\n            isBorderLess={true}\n            title={t('Contacts')}\n            actions={\n              <Pager\n                totalPages={activeConnections?.totalPages}\n                setPage={setActivePage}\n                currentPage={activePage}\n                className=\"m-2\"\n              />\n            }\n          >\n            <div className=\"-m-1 flex flex-row flex-wrap\">\n              {activeConnectionsLoading && (\n                <>\n                  <LoadingParagraph className=\"m-1 aspect-square w-1/2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n                  <LoadingParagraph className=\"m-1 aspect-square w-1/2 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\" />\n                </>\n              )}\n\n              {activeConnections?.results?.map((activeConnection) => (\n                <PersonActive\n                  className=\"w-1/2 p-1 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6\"\n                  dotYouProfile={activeConnection}\n                  key={activeConnection.dotYouId}\n                />\n              ))}\n            </div>\n          </Section>\n        ) : null}\n      </section>\n      <OutgoingConnectionDialog\n        title={t('Send connection request')}\n        isOpen={isSentConnectionOpen}\n        onConfirm={() => setIsSentConnectionOpen(false)}\n        onCancel={() => setIsSentConnectionOpen(false)}\n      />\n    </>\n  );\n};\n\nexport default Connections;\n"],"names":["props","useContact","dotYouId","fetch","contactData","data","isLoading","nameData","name","fullName","givenName","surname","className","children","href","isChecked","onClick","onlyLoadAfterClick","senderDotYouId","pendingConnection","useConnection","ignoreRequest","mutateAsync","ignoreRequestStatus","status","ignoreError","error","uiSettings","useSettings","fetchUiSettings","useState","isAcceptDialogOpen","setIsAcceptDialogOpen","automaticallyLoadProfilePicture","type","e","preventDefault","icon","t","confirmOptions","title","body","buttonText","state","isOpen","confirmText","onConfirm","onCancel","xmlns","viewBox","fill","d","totalPages","setPage","currentPage","active","pageSize","pageNumber","activePageSize","activePage","useAuth","getSharedSecret","circleNetworkProvider","CircleNetworkProvider","fetchConnections","getConnections","fetchActive","useQuery","refetchOnWindowFocus","keepPreviousData","onError","err","console","recipientDotYouId","revokeConnectionRequest","revokeRequest","mutate","revokeRequestStatus","actionError","ErrorNotification","PersonCard","CharacterHighlighter","ActionButton","targetDotYouId","filterAttributes","attributes","filter","attr","undefined","Object","keys","length","acl","requiredSecurityGroup","SecurityGroupType","sort","attrA","attrB","priority","onChange","useAttributeVersions","profileId","BuiltInProfiles","AttributeDefinitions","fetchVersions","nameAttributes","nameAttributesLoading","isNameFetchedAfterMount","isFetchedAfterMount","filteredNameAttributes","photoAttributes","photoAttributesLoading","isPhotoFetchedAfterMount","filteredPhotoAttributes","imageUrl","useImage","MinimalProfileFields","getTargetDriveFromProfileId","info","imageFileId","useEffect","Alert","isCompact","to","LoadingParagraph","src","FallbackImg","initials","window","location","hostname","DEFAULT_MESSAGE","target","usePortal","sendConnectionRequest","sendConnectionRequestStatus","resetConnectionRequest","reset","checkReturnTo","useFocusedEditing","doubleChecked","setDoubleChecked","connectionTarget","setConnectionTarget","message","setMessage","setName","photoFileId","setPhotoFileId","circleGrants","setCircleGrants","dialog","DialogWrapper","onClose","keepOpenOnBlur","size","onSubmit","circleIds","onSuccess","currentTarget","checkValidity","CircleSelector","defaultValue","value","YourInfo","Label","htmlFor","Input","id","required","Textarea","publicInfo","isDisabled","createPortal","dotYouProfile","disconnect","disconnectStatus","ConnectionCard","connectionDotYouId","pendingPage","setPendingPage","setActivePage","sentPage","setSentPage","useConnections","pending","sent","fetchPending","pendingConnections","pendingConnectionsLoading","fetchSent","sentRequests","sentRequestsLoading","useActiveConnections","activeConnections","activeConnectionsLoading","isSentConnectionOpen","setIsSentConnectionOpen","PageMeta","Persons","actions","results","Section","isOpaqueBg","isBorderLess","Pager","map","PersonIncomingRequest","sentRequest","recipient","activeConnection"],"sourceRoot":""}