{"version":3,"file":"static/js/576.ec317dc7.chunk.js","mappings":"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","sources":["components/ui/Buttons/SaveStatus.tsx","components/ui/Layout/PageMeta/PageMeta.tsx","templates/Apps/AppDetails/AppDetails.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport Alert from '../Alerts/Alert/Alert';\n\nconst seconds = 60000;\nconst minutes = 600000;\n\nconst SaveStatus = ({\n  className,\n  state,\n  error,\n}: {\n  className: string;\n  state: 'error' | 'idle' | 'loading' | 'success';\n  error?: unknown;\n}) => {\n  const [lastSave, setLastSave] = useState<Date>(null);\n  const [now, setNow] = useState<Date>(new Date());\n\n  useEffect(() => {\n    if (state === 'success') {\n      setLastSave(new Date());\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setNow(new Date());\n    }, 30000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [now]);\n\n  if (state === 'loading') {\n    return <p className={`${className} text-sm`}>Saving...</p>;\n  }\n\n  if (state === 'error') {\n    return (\n      <Alert type=\"critical\" className={className}>\n        {error instanceof Error ? error.message : t('Something went wrong')}\n      </Alert>\n    );\n  }\n\n  if (!lastSave) {\n    return null;\n  }\n\n  const diff = now.getTime() - lastSave.getTime();\n  const text = lastSave\n    ? diff <= seconds\n      ? 'a few seconds ago'\n      : diff <= minutes\n      ? 'a few minutes ago'\n      : lastSave.toLocaleString()\n    : '';\n\n  return text ? <p className={`${className} text-sm`}>Last saved {text}</p> : null;\n};\n\nexport default SaveStatus;\n","import { FC, ReactNode } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport SaveStatus from '../../Buttons/SaveStatus';\n\nconst PageMeta = ({\n  title,\n  actions,\n  saveStatus,\n  breadCrumbs,\n  icon,\n}: {\n  title?: ReactNode | string;\n  actions?: ReactNode;\n  saveStatus?: 'error' | 'idle' | 'loading' | 'success';\n  breadCrumbs?: { title: string; href?: string }[];\n  icon?: FC;\n}) => {\n  return (\n    <section\n      className=\"-mx-5 -mt-4 mb-10 border-b-2 border-gray-100 bg-slate-50 py-4 pr-5 pl-10 dark:border-gray-700 dark:bg-slate-800 sm:-mx-10\n    sm:-mt-8 sm:py-8 sm:px-10\"\n    >\n      <div className=\"flex flex-col sm:flex-row\">\n        <div className=\"flex-col\">\n          {breadCrumbs && (\n            <ul className=\"mb-2 hidden flex-row sm:flex\">\n              {breadCrumbs.map((crumb, index) => {\n                return (\n                  <li key={index} className=\"mr-2\">\n                    {crumb.href ? (\n                      <Link to={crumb.href} className=\"\">\n                        {crumb.title}\n                        <span className=\"ml-2\">{'>'}</span>\n                      </Link>\n                    ) : (\n                      <span className=\"text-slate-500\">{crumb.title}</span>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n          {title && (\n            <>\n              <h1 className=\"mb-5 flex flex-row text-4xl dark:text-white\">\n                {icon && icon({ className: 'h-8 w-8 my-auto mr-4' })} {title}\n              </h1>\n              <Helmet>\n                <title>\n                  {(typeof title !== 'object' && `${title}`) ||\n                    window.location.pathname.split('/').pop()}{' '}\n                  | Owner console\n                </title>\n              </Helmet>\n            </>\n          )}\n        </div>\n        <div className=\"ml-auto\">\n          <div className=\"-m-2 flex flex-col flex-wrap justify-end sm:flex-row sm:items-center\">\n            {actions}\n          </div>\n          {saveStatus && <SaveStatus className=\"mt-1\" state={saveStatus} />}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PageMeta;\n","import { useParams } from 'react-router-dom';\nimport { t } from '../../../helpers/i18n/dictionary';\nimport useApp from '../../../hooks/apps/useApp';\nimport Alert from '../../../components/ui/Alerts/Alert/Alert';\nimport ErrorNotification from '../../../components/ui/Alerts/ErrorNotification/ErrorNotification';\nimport ActionButton from '../../../components/ui/Buttons/ActionButton';\nimport Grid from '../../../components/ui/Icons/Grid/Grid';\nimport PageMeta from '../../../components/ui/Layout/PageMeta/PageMeta';\nimport DrivePermissionView from '../../../components/PermissionViews/DrivePermissionView/DrivePermissionView';\nimport PermissionView from '../../../components/PermissionViews/PermissionView/PermissionView';\nimport Section from '../../../components/ui/Sections/Section';\n\nconst AppDetails = () => {\n  const { appKey } = useParams();\n  const decodedAppKey = decodeURIComponent(appKey);\n  const {\n    fetch: { data: app, isLoading: appLoading },\n    revokeApp: { mutate: revokeApp, status: revokeAppStatus, error: revokeAppError },\n    allowApp: { mutate: allowApp, status: allowAppStatus, error: allowAppError },\n  } = useApp({ appId: decodedAppKey });\n\n  if (appLoading) {\n    <>Loading</>;\n  }\n\n  if (!app) {\n    return <>No matching app found</>;\n  }\n\n  return (\n    <>\n      <ErrorNotification error={revokeAppError} />\n      <ErrorNotification error={allowAppError} />\n      <PageMeta\n        icon={Grid}\n        title={`${app.name}`}\n        breadCrumbs={[{ href: '/owner/apps', title: 'My apps' }, { title: app.name ?? '' }]}\n        actions={\n          <>\n            {app.isRevoked ? (\n              <ActionButton\n                type=\"primary\"\n                className=\"m-2 my-auto\"\n                onClick={() => allowApp({ appId: decodedAppKey })}\n                state={allowAppStatus}\n                confirmOptions={{\n                  title: t('Restore App'),\n                  buttonText: t('Restore'),\n                  body: `${t('Are you sure you want to restore')} ${app.name} ${t(\n                    'and allow access to your identity'\n                  )}`,\n                }}\n              >\n                Restore app\n              </ActionButton>\n            ) : (\n              <ActionButton\n                type=\"remove\"\n                className=\"m-2 my-auto\"\n                onClick={() => revokeApp({ appId: decodedAppKey })}\n                state={revokeAppStatus}\n                confirmOptions={{\n                  title: t('Revoke App'),\n                  buttonText: t('Revoke'),\n                  body: `${t('Are you sure you want to revoke')} ${app.name} ${t(\n                    'from all access to your identity'\n                  )}`,\n                }}\n              >\n                Revoke app\n              </ActionButton>\n            )}\n          </>\n        }\n      />\n\n      {app.isRevoked && (\n        <Alert type=\"critical\" title={t('App is revoked')} className=\"mb-5\">\n          {t('This app is revoked, it no longer has the access provided')}\n        </Alert>\n      )}\n\n      {app.grant.permissionSet?.keys ? (\n        <Section title={t('Access')} isOpaqueBg={true}>\n          <div className=\"-my-4\">\n            {app.grant.permissionSet.keys.map((permissionLevel) => {\n              return (\n                <PermissionView\n                  key={`${permissionLevel}`}\n                  permission={permissionLevel}\n                  className=\"my-4\"\n                />\n              );\n            })}\n          </div>\n        </Section>\n      ) : null}\n      <Section title={t('Access on the following drives')} isOpaqueBg={true}>\n        {app.grant?.driveGrants?.length ? (\n          <div className=\"-my-4\">\n            {app.grant?.driveGrants?.map((grant) => {\n              return (\n                <DrivePermissionView\n                  key={`${grant?.permissionedDrive?.drive?.alias}-${grant?.permissionedDrive?.drive?.type}`}\n                  driveGrant={grant}\n                  className=\"my-4\"\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"flex flex-row\">\n            <p className=\"my-auto\">{t(\"This app doesn't have any access\")}</p>\n          </div>\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default AppDetails;\n"],"names":["className","state","error","useState","lastSave","setLastSave","Date","now","setNow","useEffect","timer","setTimeout","clearTimeout","type","Error","message","t","diff","getTime","text","toLocaleString","title","actions","saveStatus","breadCrumbs","icon","map","crumb","index","href","to","window","location","pathname","split","pop","appKey","useParams","decodedAppKey","decodeURIComponent","useApp","appId","fetch","app","data","appLoading","isLoading","revokeApp","mutate","revokeAppStatus","status","revokeAppError","allowApp","allowAppStatus","allowAppError","Grid","name","isRevoked","onClick","confirmOptions","buttonText","body","grant","permissionSet","keys","isOpaqueBg","permissionLevel","permission","driveGrants","length","driveGrant","permissionedDrive","drive","alias"],"sourceRoot":""}